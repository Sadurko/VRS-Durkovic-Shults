
ADC_TIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800304c  0800304c  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800318c  0800318c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800318c  0800318c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800318c  0800318c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800318c  0800318c  0001318c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003190  08003190  00013190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000010  080031a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  080031a4  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085fd  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c02  00000000  00000000  0002863d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002abf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179fd  00000000  00000000  0002b4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000072ec  00000000  00000000  00042eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000814aa  00000000  00000000  0004a1a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb64b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027ec  00000000  00000000  000cb6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003034 	.word	0x08003034

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003034 	.word	0x08003034

080001c8 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d6:	f023 020f 	bic.w	r2, r3, #15
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	431a      	orrs	r2, r3
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80001e2:	bf00      	nop
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr

080001ee <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80001ee:	b480      	push	{r7}
 80001f0:	b083      	sub	sp, #12
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	689b      	ldr	r3, [r3, #8]
 80001fa:	f003 0301 	and.w	r3, r3, #1
 80001fe:	2b01      	cmp	r3, #1
 8000200:	bf0c      	ite	eq
 8000202:	2301      	moveq	r3, #1
 8000204:	2300      	movne	r3, #0
 8000206:	b2db      	uxtb	r3, r3
}
 8000208:	4618      	mov	r0, r3
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8000214:	b590      	push	{r4, r7, lr}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800021e:	2300      	movs	r3, #0
 8000220:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8000222:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000226:	f7ff ffe2 	bl	80001ee <LL_ADC_IsEnabled>
 800022a:	4604      	mov	r4, r0
 800022c:	4817      	ldr	r0, [pc, #92]	; (800028c <LL_ADC_CommonInit+0x78>)
 800022e:	f7ff ffde 	bl	80001ee <LL_ADC_IsEnabled>
 8000232:	4603      	mov	r3, r0
 8000234:	4323      	orrs	r3, r4
 8000236:	2b00      	cmp	r3, #0
 8000238:	d120      	bne.n	800027c <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d012      	beq.n	8000268 <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	689a      	ldr	r2, [r3, #8]
 8000246:	4b12      	ldr	r3, [pc, #72]	; (8000290 <LL_ADC_CommonInit+0x7c>)
 8000248:	4013      	ands	r3, r2
 800024a:	683a      	ldr	r2, [r7, #0]
 800024c:	6811      	ldr	r1, [r2, #0]
 800024e:	683a      	ldr	r2, [r7, #0]
 8000250:	6852      	ldr	r2, [r2, #4]
 8000252:	4311      	orrs	r1, r2
 8000254:	683a      	ldr	r2, [r7, #0]
 8000256:	6892      	ldr	r2, [r2, #8]
 8000258:	4311      	orrs	r1, r2
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	68d2      	ldr	r2, [r2, #12]
 800025e:	430a      	orrs	r2, r1
 8000260:	431a      	orrs	r2, r3
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	e00b      	b.n	8000280 <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	689a      	ldr	r2, [r3, #8]
 800026c:	4b08      	ldr	r3, [pc, #32]	; (8000290 <LL_ADC_CommonInit+0x7c>)
 800026e:	4013      	ands	r3, r2
 8000270:	683a      	ldr	r2, [r7, #0]
 8000272:	6812      	ldr	r2, [r2, #0]
 8000274:	431a      	orrs	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	e001      	b.n	8000280 <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800027c:	2301      	movs	r3, #1
 800027e:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8000280:	7bfb      	ldrb	r3, [r7, #15]
}
 8000282:	4618      	mov	r0, r3
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	bd90      	pop	{r4, r7, pc}
 800028a:	bf00      	nop
 800028c:	50000100 	.word	0x50000100
 8000290:	fffc30e0 	.word	0xfffc30e0

08000294 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800029e:	2300      	movs	r3, #0
 80002a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f7ff ffa3 	bl	80001ee <LL_ADC_IsEnabled>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d111      	bne.n	80002d2 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	68db      	ldr	r3, [r3, #12]
 80002b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80002b6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80002ba:	683a      	ldr	r2, [r7, #0]
 80002bc:	6811      	ldr	r1, [r2, #0]
 80002be:	683a      	ldr	r2, [r7, #0]
 80002c0:	6852      	ldr	r2, [r2, #4]
 80002c2:	4311      	orrs	r1, r2
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	6892      	ldr	r2, [r2, #8]
 80002c8:	430a      	orrs	r2, r1
 80002ca:	431a      	orrs	r2, r3
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	e001      	b.n	80002d6 <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80002d2:	2301      	movs	r3, #1
 80002d4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002d8:	4618      	mov	r0, r3
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80002ea:	2300      	movs	r3, #0
 80002ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80002ee:	6878      	ldr	r0, [r7, #4]
 80002f0:	f7ff ff7d 	bl	80001ee <LL_ADC_IsEnabled>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d132      	bne.n	8000360 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d015      	beq.n	800032e <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	68da      	ldr	r2, [r3, #12]
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <LL_ADC_REG_Init+0x90>)
 8000308:	4013      	ands	r3, r2
 800030a:	683a      	ldr	r2, [r7, #0]
 800030c:	6811      	ldr	r1, [r2, #0]
 800030e:	683a      	ldr	r2, [r7, #0]
 8000310:	6892      	ldr	r2, [r2, #8]
 8000312:	4311      	orrs	r1, r2
 8000314:	683a      	ldr	r2, [r7, #0]
 8000316:	68d2      	ldr	r2, [r2, #12]
 8000318:	4311      	orrs	r1, r2
 800031a:	683a      	ldr	r2, [r7, #0]
 800031c:	6912      	ldr	r2, [r2, #16]
 800031e:	4311      	orrs	r1, r2
 8000320:	683a      	ldr	r2, [r7, #0]
 8000322:	6952      	ldr	r2, [r2, #20]
 8000324:	430a      	orrs	r2, r1
 8000326:	431a      	orrs	r2, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	e011      	b.n	8000352 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	68da      	ldr	r2, [r3, #12]
 8000332:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <LL_ADC_REG_Init+0x90>)
 8000334:	4013      	ands	r3, r2
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	6811      	ldr	r1, [r2, #0]
 800033a:	683a      	ldr	r2, [r7, #0]
 800033c:	68d2      	ldr	r2, [r2, #12]
 800033e:	4311      	orrs	r1, r2
 8000340:	683a      	ldr	r2, [r7, #0]
 8000342:	6912      	ldr	r2, [r2, #16]
 8000344:	4311      	orrs	r1, r2
 8000346:	683a      	ldr	r2, [r7, #0]
 8000348:	6952      	ldr	r2, [r2, #20]
 800034a:	430a      	orrs	r2, r1
 800034c:	431a      	orrs	r2, r3
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	4619      	mov	r1, r3
 8000358:	6878      	ldr	r0, [r7, #4]
 800035a:	f7ff ff35 	bl	80001c8 <LL_ADC_REG_SetSequencerLength>
 800035e:	e001      	b.n	8000364 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8000360:	2301      	movs	r3, #1
 8000362:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000364:	7bfb      	ldrb	r3, [r7, #15]
}
 8000366:	4618      	mov	r0, r3
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	fff0c03c 	.word	0xfff0c03c

08000374 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000374:	b480      	push	{r7}
 8000376:	b089      	sub	sp, #36	; 0x24
 8000378:	af00      	add	r7, sp, #0
 800037a:	60f8      	str	r0, [r7, #12]
 800037c:	60b9      	str	r1, [r7, #8]
 800037e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	fa93 f3a3 	rbit	r3, r3
 800038e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000390:	693b      	ldr	r3, [r7, #16]
 8000392:	fab3 f383 	clz	r3, r3
 8000396:	005b      	lsls	r3, r3, #1
 8000398:	2103      	movs	r1, #3
 800039a:	fa01 f303 	lsl.w	r3, r1, r3
 800039e:	43db      	mvns	r3, r3
 80003a0:	401a      	ands	r2, r3
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	fa93 f3a3 	rbit	r3, r3
 80003ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80003ae:	69bb      	ldr	r3, [r7, #24]
 80003b0:	fab3 f383 	clz	r3, r3
 80003b4:	005b      	lsls	r3, r3, #1
 80003b6:	6879      	ldr	r1, [r7, #4]
 80003b8:	fa01 f303 	lsl.w	r3, r1, r3
 80003bc:	431a      	orrs	r2, r3
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	601a      	str	r2, [r3, #0]
}
 80003c2:	bf00      	nop
 80003c4:	3724      	adds	r7, #36	; 0x24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b085      	sub	sp, #20
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	60f8      	str	r0, [r7, #12]
 80003d6:	60b9      	str	r1, [r7, #8]
 80003d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	685a      	ldr	r2, [r3, #4]
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	43db      	mvns	r3, r3
 80003e2:	401a      	ands	r2, r3
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	6879      	ldr	r1, [r7, #4]
 80003e8:	fb01 f303 	mul.w	r3, r1, r3
 80003ec:	431a      	orrs	r2, r3
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	605a      	str	r2, [r3, #4]
}
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80003fe:	b480      	push	{r7}
 8000400:	b089      	sub	sp, #36	; 0x24
 8000402:	af00      	add	r7, sp, #0
 8000404:	60f8      	str	r0, [r7, #12]
 8000406:	60b9      	str	r1, [r7, #8]
 8000408:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	689a      	ldr	r2, [r3, #8]
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	fa93 f3a3 	rbit	r3, r3
 8000418:	613b      	str	r3, [r7, #16]
  return(result);
 800041a:	693b      	ldr	r3, [r7, #16]
 800041c:	fab3 f383 	clz	r3, r3
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	2103      	movs	r1, #3
 8000424:	fa01 f303 	lsl.w	r3, r1, r3
 8000428:	43db      	mvns	r3, r3
 800042a:	401a      	ands	r2, r3
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000430:	69fb      	ldr	r3, [r7, #28]
 8000432:	fa93 f3a3 	rbit	r3, r3
 8000436:	61bb      	str	r3, [r7, #24]
  return(result);
 8000438:	69bb      	ldr	r3, [r7, #24]
 800043a:	fab3 f383 	clz	r3, r3
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	6879      	ldr	r1, [r7, #4]
 8000442:	fa01 f303 	lsl.w	r3, r1, r3
 8000446:	431a      	orrs	r2, r3
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800044c:	bf00      	nop
 800044e:	3724      	adds	r7, #36	; 0x24
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000458:	b480      	push	{r7}
 800045a:	b089      	sub	sp, #36	; 0x24
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	68da      	ldr	r2, [r3, #12]
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	fa93 f3a3 	rbit	r3, r3
 8000472:	613b      	str	r3, [r7, #16]
  return(result);
 8000474:	693b      	ldr	r3, [r7, #16]
 8000476:	fab3 f383 	clz	r3, r3
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	2103      	movs	r1, #3
 800047e:	fa01 f303 	lsl.w	r3, r1, r3
 8000482:	43db      	mvns	r3, r3
 8000484:	401a      	ands	r2, r3
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800048a:	69fb      	ldr	r3, [r7, #28]
 800048c:	fa93 f3a3 	rbit	r3, r3
 8000490:	61bb      	str	r3, [r7, #24]
  return(result);
 8000492:	69bb      	ldr	r3, [r7, #24]
 8000494:	fab3 f383 	clz	r3, r3
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	6879      	ldr	r1, [r7, #4]
 800049c:	fa01 f303 	lsl.w	r3, r1, r3
 80004a0:	431a      	orrs	r2, r3
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	60da      	str	r2, [r3, #12]
}
 80004a6:	bf00      	nop
 80004a8:	3724      	adds	r7, #36	; 0x24
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr

080004b2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b089      	sub	sp, #36	; 0x24
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	60f8      	str	r0, [r7, #12]
 80004ba:	60b9      	str	r1, [r7, #8]
 80004bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	6a1a      	ldr	r2, [r3, #32]
 80004c2:	68bb      	ldr	r3, [r7, #8]
 80004c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	fa93 f3a3 	rbit	r3, r3
 80004cc:	613b      	str	r3, [r7, #16]
  return(result);
 80004ce:	693b      	ldr	r3, [r7, #16]
 80004d0:	fab3 f383 	clz	r3, r3
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	210f      	movs	r1, #15
 80004d8:	fa01 f303 	lsl.w	r3, r1, r3
 80004dc:	43db      	mvns	r3, r3
 80004de:	401a      	ands	r2, r3
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004e4:	69fb      	ldr	r3, [r7, #28]
 80004e6:	fa93 f3a3 	rbit	r3, r3
 80004ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80004ec:	69bb      	ldr	r3, [r7, #24]
 80004ee:	fab3 f383 	clz	r3, r3
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	6879      	ldr	r1, [r7, #4]
 80004f6:	fa01 f303 	lsl.w	r3, r1, r3
 80004fa:	431a      	orrs	r2, r3
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000500:	bf00      	nop
 8000502:	3724      	adds	r7, #36	; 0x24
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800050c:	b480      	push	{r7}
 800050e:	b089      	sub	sp, #36	; 0x24
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	0a1b      	lsrs	r3, r3, #8
 8000520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	fa93 f3a3 	rbit	r3, r3
 8000528:	613b      	str	r3, [r7, #16]
  return(result);
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	fab3 f383 	clz	r3, r3
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	210f      	movs	r1, #15
 8000534:	fa01 f303 	lsl.w	r3, r1, r3
 8000538:	43db      	mvns	r3, r3
 800053a:	401a      	ands	r2, r3
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	0a1b      	lsrs	r3, r3, #8
 8000540:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	fa93 f3a3 	rbit	r3, r3
 8000548:	61bb      	str	r3, [r7, #24]
  return(result);
 800054a:	69bb      	ldr	r3, [r7, #24]
 800054c:	fab3 f383 	clz	r3, r3
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	fa01 f303 	lsl.w	r3, r1, r3
 8000558:	431a      	orrs	r2, r3
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800055e:	bf00      	nop
 8000560:	3724      	adds	r7, #36	; 0x24
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b088      	sub	sp, #32
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000578:	2300      	movs	r3, #0
 800057a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	fa93 f3a3 	rbit	r3, r3
 8000588:	613b      	str	r3, [r7, #16]
  return(result);
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	fab3 f383 	clz	r3, r3
 8000590:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000592:	e048      	b.n	8000626 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	2101      	movs	r1, #1
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	fa01 f303 	lsl.w	r3, r1, r3
 80005a0:	4013      	ands	r3, r2
 80005a2:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d03a      	beq.n	8000620 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	461a      	mov	r2, r3
 80005b0:	69b9      	ldr	r1, [r7, #24]
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f7ff fede 	bl	8000374 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d003      	beq.n	80005c8 <LL_GPIO_Init+0x5e>
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d106      	bne.n	80005d6 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	461a      	mov	r2, r3
 80005ce:	69b9      	ldr	r1, [r7, #24]
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f7ff ff14 	bl	80003fe <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	691b      	ldr	r3, [r3, #16]
 80005da:	461a      	mov	r2, r3
 80005dc:	69b9      	ldr	r1, [r7, #24]
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff ff3a 	bl	8000458 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d119      	bne.n	8000620 <LL_GPIO_Init+0xb6>
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	fa93 f3a3 	rbit	r3, r3
 80005f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80005f8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80005fa:	fab3 f383 	clz	r3, r3
 80005fe:	2b07      	cmp	r3, #7
 8000600:	d807      	bhi.n	8000612 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	461a      	mov	r2, r3
 8000608:	69b9      	ldr	r1, [r7, #24]
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff ff51 	bl	80004b2 <LL_GPIO_SetAFPin_0_7>
 8000610:	e006      	b.n	8000620 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	461a      	mov	r2, r3
 8000618:	69b9      	ldr	r1, [r7, #24]
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff ff76 	bl	800050c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	3301      	adds	r3, #1
 8000624:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	fa22 f303 	lsr.w	r3, r2, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1af      	bne.n	8000594 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d003      	beq.n	8000644 <LL_GPIO_Init+0xda>
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	2b02      	cmp	r3, #2
 8000642:	d107      	bne.n	8000654 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	6819      	ldr	r1, [r3, #0]
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	461a      	mov	r2, r3
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f7ff febd 	bl	80003ce <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	3720      	adds	r7, #32
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <LL_RCC_HSI_IsReady+0x20>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f003 0302 	and.w	r3, r3, #2
 800066c:	2b02      	cmp	r3, #2
 800066e:	bf0c      	ite	eq
 8000670:	2301      	moveq	r3, #1
 8000672:	2300      	movne	r3, #0
 8000674:	b2db      	uxtb	r3, r3
}
 8000676:	4618      	mov	r0, r3
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	40021000 	.word	0x40021000

08000684 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <LL_RCC_LSE_IsReady+0x20>)
 800068a:	6a1b      	ldr	r3, [r3, #32]
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	2b02      	cmp	r3, #2
 8000692:	bf0c      	ite	eq
 8000694:	2301      	moveq	r3, #1
 8000696:	2300      	movne	r3, #0
 8000698:	b2db      	uxtb	r3, r3
}
 800069a:	4618      	mov	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	40021000 	.word	0x40021000

080006a8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <LL_RCC_GetSysClkSource+0x18>)
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	f003 030c 	and.w	r3, r3, #12
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <LL_RCC_GetAHBPrescaler+0x18>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000

080006e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000

080006fc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <LL_RCC_GetAPB2Prescaler+0x18>)
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000

08000718 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <LL_RCC_GetUSARTClockSource+0x28>)
 8000722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000724:	2103      	movs	r1, #3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	fa01 f303 	lsl.w	r3, r1, r3
 800072c:	401a      	ands	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	061b      	lsls	r3, r3, #24
 8000732:	4313      	orrs	r3, r2
}
 8000734:	4618      	mov	r0, r3
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	40021000 	.word	0x40021000

08000744 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <LL_RCC_PLL_GetMainSource+0x18>)
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000

08000760 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 800076c:	4618      	mov	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000

0800077c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <LL_RCC_PLL_GetPrediv+0x18>)
 8000782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000784:	f003 030f 	and.w	r3, r3, #15
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000

08000798 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80007a0:	f000 f864 	bl	800086c <RCC_GetSystemClockFreq>
 80007a4:	4602      	mov	r2, r0
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f882 	bl	80008b8 <RCC_GetHCLKClockFreq>
 80007b4:	4602      	mov	r2, r0
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f890 	bl	80008e4 <RCC_GetPCLK1ClockFreq>
 80007c4:	4602      	mov	r2, r0
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f89c 	bl	800090c <RCC_GetPCLK2ClockFreq>
 80007d4:	4602      	mov	r2, r0
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	60da      	str	r2, [r3, #12]
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d12d      	bne.n	8000852 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ff8e 	bl	8000718 <LL_RCC_GetUSARTClockSource>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b03      	cmp	r3, #3
 8000800:	d00a      	beq.n	8000818 <LL_RCC_GetUSARTClockFreq+0x34>
 8000802:	2b03      	cmp	r3, #3
 8000804:	d819      	bhi.n	800083a <LL_RCC_GetUSARTClockFreq+0x56>
 8000806:	2b01      	cmp	r3, #1
 8000808:	d002      	beq.n	8000810 <LL_RCC_GetUSARTClockFreq+0x2c>
 800080a:	2b02      	cmp	r3, #2
 800080c:	d00c      	beq.n	8000828 <LL_RCC_GetUSARTClockFreq+0x44>
 800080e:	e014      	b.n	800083a <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000810:	f000 f82c 	bl	800086c <RCC_GetSystemClockFreq>
 8000814:	60f8      	str	r0, [r7, #12]
        break;
 8000816:	e021      	b.n	800085c <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8000818:	f7ff ff22 	bl	8000660 <LL_RCC_HSI_IsReady>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d019      	beq.n	8000856 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <LL_RCC_GetUSARTClockFreq+0x84>)
 8000824:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000826:	e016      	b.n	8000856 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8000828:	f7ff ff2c 	bl	8000684 <LL_RCC_LSE_IsReady>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d013      	beq.n	800085a <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8000832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000836:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000838:	e00f      	b.n	800085a <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800083a:	f000 f817 	bl	800086c <RCC_GetSystemClockFreq>
 800083e:	4603      	mov	r3, r0
 8000840:	4618      	mov	r0, r3
 8000842:	f000 f839 	bl	80008b8 <RCC_GetHCLKClockFreq>
 8000846:	4603      	mov	r3, r0
 8000848:	4618      	mov	r0, r3
 800084a:	f000 f84b 	bl	80008e4 <RCC_GetPCLK1ClockFreq>
 800084e:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8000850:	e004      	b.n	800085c <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8000852:	bf00      	nop
 8000854:	e002      	b.n	800085c <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8000856:	bf00      	nop
 8000858:	e000      	b.n	800085c <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 800085a:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 800085c:	68fb      	ldr	r3, [r7, #12]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	007a1200 	.word	0x007a1200

0800086c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000876:	f7ff ff17 	bl	80006a8 <LL_RCC_GetSysClkSource>
 800087a:	4603      	mov	r3, r0
 800087c:	2b08      	cmp	r3, #8
 800087e:	d00c      	beq.n	800089a <RCC_GetSystemClockFreq+0x2e>
 8000880:	2b08      	cmp	r3, #8
 8000882:	d80e      	bhi.n	80008a2 <RCC_GetSystemClockFreq+0x36>
 8000884:	2b00      	cmp	r3, #0
 8000886:	d002      	beq.n	800088e <RCC_GetSystemClockFreq+0x22>
 8000888:	2b04      	cmp	r3, #4
 800088a:	d003      	beq.n	8000894 <RCC_GetSystemClockFreq+0x28>
 800088c:	e009      	b.n	80008a2 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <RCC_GetSystemClockFreq+0x48>)
 8000890:	607b      	str	r3, [r7, #4]
      break;
 8000892:	e009      	b.n	80008a8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <RCC_GetSystemClockFreq+0x48>)
 8000896:	607b      	str	r3, [r7, #4]
      break;
 8000898:	e006      	b.n	80008a8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800089a:	f000 f84b 	bl	8000934 <RCC_PLL_GetFreqDomain_SYS>
 800089e:	6078      	str	r0, [r7, #4]
      break;
 80008a0:	e002      	b.n	80008a8 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <RCC_GetSystemClockFreq+0x48>)
 80008a4:	607b      	str	r3, [r7, #4]
      break;
 80008a6:	bf00      	nop
  }

  return frequency;
 80008a8:	687b      	ldr	r3, [r7, #4]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	007a1200 	.word	0x007a1200

080008b8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80008c0:	f7ff ff00 	bl	80006c4 <LL_RCC_GetAHBPrescaler>
 80008c4:	4603      	mov	r3, r0
 80008c6:	091b      	lsrs	r3, r3, #4
 80008c8:	f003 030f 	and.w	r3, r3, #15
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <RCC_GetHCLKClockFreq+0x28>)
 80008ce:	5cd3      	ldrb	r3, [r2, r3]
 80008d0:	461a      	mov	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	40d3      	lsrs	r3, r2
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	08003054 	.word	0x08003054

080008e4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80008ec:	f7ff fef8 	bl	80006e0 <LL_RCC_GetAPB1Prescaler>
 80008f0:	4603      	mov	r3, r0
 80008f2:	0a1b      	lsrs	r3, r3, #8
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <RCC_GetPCLK1ClockFreq+0x24>)
 80008f6:	5cd3      	ldrb	r3, [r2, r3]
 80008f8:	461a      	mov	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	40d3      	lsrs	r3, r2
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	08003064 	.word	0x08003064

0800090c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000914:	f7ff fef2 	bl	80006fc <LL_RCC_GetAPB2Prescaler>
 8000918:	4603      	mov	r3, r0
 800091a:	0adb      	lsrs	r3, r3, #11
 800091c:	4a04      	ldr	r2, [pc, #16]	; (8000930 <RCC_GetPCLK2ClockFreq+0x24>)
 800091e:	5cd3      	ldrb	r3, [r2, r3]
 8000920:	461a      	mov	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	40d3      	lsrs	r3, r2
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	08003064 	.word	0x08003064

08000934 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000942:	f7ff feff 	bl	8000744 <LL_RCC_PLL_GetMainSource>
 8000946:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d004      	beq.n	8000958 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000954:	d003      	beq.n	800095e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8000956:	e005      	b.n	8000964 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800095a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800095c:	e005      	b.n	800096a <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8000960:	60fb      	str	r3, [r7, #12]
      break;
 8000962:	e002      	b.n	800096a <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8000966:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8000968:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800096a:	f7ff ff07 	bl	800077c <LL_RCC_PLL_GetPrediv>
 800096e:	4603      	mov	r3, r0
 8000970:	3301      	adds	r3, #1
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	fbb2 f4f3 	udiv	r4, r2, r3
 8000978:	f7ff fef2 	bl	8000760 <LL_RCC_PLL_GetMultiplicator>
 800097c:	4603      	mov	r3, r0
 800097e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000982:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000986:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	fa92 f2a2 	rbit	r2, r2
 800098e:	603a      	str	r2, [r7, #0]
  return(result);
 8000990:	683a      	ldr	r2, [r7, #0]
 8000992:	fab2 f282 	clz	r2, r2
 8000996:	40d3      	lsrs	r3, r2
 8000998:	3302      	adds	r3, #2
 800099a:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	bf00      	nop
 80009a8:	003d0900 	.word	0x003d0900
 80009ac:	007a1200 	.word	0x007a1200

080009b0 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	683a      	ldr	r2, [r7, #0]
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	683a      	ldr	r2, [r7, #0]
 8000a4a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	683a      	ldr	r2, [r7, #0]
 8000a82:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	f043 0201 	orr.w	r2, r3, #1
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	615a      	str	r2, [r3, #20]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a2f      	ldr	r2, [pc, #188]	; (8000ba0 <LL_TIM_Init+0xd4>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d007      	beq.n	8000af8 <LL_TIM_Init+0x2c>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aee:	d003      	beq.n	8000af8 <LL_TIM_Init+0x2c>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a2c      	ldr	r2, [pc, #176]	; (8000ba4 <LL_TIM_Init+0xd8>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d106      	bne.n	8000b06 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a25      	ldr	r2, [pc, #148]	; (8000ba0 <LL_TIM_Init+0xd4>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d013      	beq.n	8000b36 <LL_TIM_Init+0x6a>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b14:	d00f      	beq.n	8000b36 <LL_TIM_Init+0x6a>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a22      	ldr	r2, [pc, #136]	; (8000ba4 <LL_TIM_Init+0xd8>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d00b      	beq.n	8000b36 <LL_TIM_Init+0x6a>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a21      	ldr	r2, [pc, #132]	; (8000ba8 <LL_TIM_Init+0xdc>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d007      	beq.n	8000b36 <LL_TIM_Init+0x6a>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a20      	ldr	r2, [pc, #128]	; (8000bac <LL_TIM_Init+0xe0>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d003      	beq.n	8000b36 <LL_TIM_Init+0x6a>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a1f      	ldr	r2, [pc, #124]	; (8000bb0 <LL_TIM_Init+0xe4>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d106      	bne.n	8000b44 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff3b 	bl	80009cc <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff27 	bl	80009b0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <LL_TIM_Init+0xd4>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d00b      	beq.n	8000b82 <LL_TIM_Init+0xb6>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <LL_TIM_Init+0xdc>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d007      	beq.n	8000b82 <LL_TIM_Init+0xb6>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <LL_TIM_Init+0xe0>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d003      	beq.n	8000b82 <LL_TIM_Init+0xb6>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a0c      	ldr	r2, [pc, #48]	; (8000bb0 <LL_TIM_Init+0xe4>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d105      	bne.n	8000b8e <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	7c1b      	ldrb	r3, [r3, #16]
 8000b86:	4619      	mov	r1, r3
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff2d 	bl	80009e8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff ff8c 	bl	8000aac <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40012c00 	.word	0x40012c00
 8000ba4:	40000400 	.word	0x40000400
 8000ba8:	40014000 	.word	0x40014000
 8000bac:	40014400 	.word	0x40014400
 8000bb0:	40014800 	.word	0x40014800

08000bb4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000bca:	d045      	beq.n	8000c58 <LL_TIM_OC_Init+0xa4>
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000bd2:	d848      	bhi.n	8000c66 <LL_TIM_OC_Init+0xb2>
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bda:	d036      	beq.n	8000c4a <LL_TIM_OC_Init+0x96>
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000be2:	d840      	bhi.n	8000c66 <LL_TIM_OC_Init+0xb2>
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bea:	d027      	beq.n	8000c3c <LL_TIM_OC_Init+0x88>
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bf2:	d838      	bhi.n	8000c66 <LL_TIM_OC_Init+0xb2>
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bfa:	d018      	beq.n	8000c2e <LL_TIM_OC_Init+0x7a>
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c02:	d830      	bhi.n	8000c66 <LL_TIM_OC_Init+0xb2>
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d003      	beq.n	8000c12 <LL_TIM_OC_Init+0x5e>
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	2b10      	cmp	r3, #16
 8000c0e:	d007      	beq.n	8000c20 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8000c10:	e029      	b.n	8000c66 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f000 f82d 	bl	8000c74 <OC1Config>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8000c1e:	e023      	b.n	8000c68 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f000 f8a6 	bl	8000d74 <OC2Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8000c2c:	e01c      	b.n	8000c68 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f000 f923 	bl	8000e7c <OC3Config>
 8000c36:	4603      	mov	r3, r0
 8000c38:	75fb      	strb	r3, [r7, #23]
      break;
 8000c3a:	e015      	b.n	8000c68 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f000 f9a0 	bl	8000f84 <OC4Config>
 8000c44:	4603      	mov	r3, r0
 8000c46:	75fb      	strb	r3, [r7, #23]
      break;
 8000c48:	e00e      	b.n	8000c68 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	68f8      	ldr	r0, [r7, #12]
 8000c4e:	f000 fa05 	bl	800105c <OC5Config>
 8000c52:	4603      	mov	r3, r0
 8000c54:	75fb      	strb	r3, [r7, #23]
      break;
 8000c56:	e007      	b.n	8000c68 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f000 fa60 	bl	8001120 <OC6Config>
 8000c60:	4603      	mov	r3, r0
 8000c62:	75fb      	strb	r3, [r7, #23]
      break;
 8000c64:	e000      	b.n	8000c68 <LL_TIM_OC_Init+0xb4>
      break;
 8000c66:	bf00      	nop
  }

  return result;
 8000c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a1b      	ldr	r3, [r3, #32]
 8000c8e:	f023 0201 	bic.w	r2, r3, #1
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a1b      	ldr	r3, [r3, #32]
 8000c9a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f023 0303 	bic.w	r3, r3, #3
 8000cae:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cba:	683a      	ldr	r2, [r7, #0]
 8000cbc:	6812      	ldr	r2, [r2, #0]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	f023 0202 	bic.w	r2, r3, #2
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	691b      	ldr	r3, [r3, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	f023 0201 	bic.w	r2, r3, #1
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a20      	ldr	r2, [pc, #128]	; (8000d64 <OC1Config+0xf0>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d00b      	beq.n	8000cfe <OC1Config+0x8a>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a1f      	ldr	r2, [pc, #124]	; (8000d68 <OC1Config+0xf4>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d007      	beq.n	8000cfe <OC1Config+0x8a>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a1e      	ldr	r2, [pc, #120]	; (8000d6c <OC1Config+0xf8>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d003      	beq.n	8000cfe <OC1Config+0x8a>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <OC1Config+0xfc>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d11e      	bne.n	8000d3c <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	f023 0208 	bic.w	r2, r3, #8
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	f023 0204 	bic.w	r2, r3, #4
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fe58 	bl	8000a04 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40012c00 	.word	0x40012c00
 8000d68:	40014000 	.word	0x40014000
 8000d6c:	40014400 	.word	0x40014400
 8000d70:	40014800 	.word	0x40014800

08000d74 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a1b      	ldr	r3, [r3, #32]
 8000d8e:	f023 0210 	bic.w	r2, r3, #16
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a1b      	ldr	r3, [r3, #32]
 8000d9a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	0212      	lsls	r2, r2, #8
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f023 0220 	bic.w	r2, r3, #32
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f023 0210 	bic.w	r2, r3, #16
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	011b      	lsls	r3, r3, #4
 8000de0:	4313      	orrs	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <OC2Config+0xf8>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d00b      	beq.n	8000e04 <OC2Config+0x90>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <OC2Config+0xfc>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d007      	beq.n	8000e04 <OC2Config+0x90>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <OC2Config+0x100>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d003      	beq.n	8000e04 <OC2Config+0x90>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a1e      	ldr	r2, [pc, #120]	; (8000e78 <OC2Config+0x104>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d11f      	bne.n	8000e44 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	019b      	lsls	r3, r3, #6
 8000e10:	4313      	orrs	r3, r2
 8000e12:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	019b      	lsls	r3, r3, #6
 8000e20:	4313      	orrs	r3, r2
 8000e22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	4619      	mov	r1, r3
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff fde2 	bl	8000a20 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40012c00 	.word	0x40012c00
 8000e70:	40014000 	.word	0x40014000
 8000e74:	40014400 	.word	0x40014400
 8000e78:	40014800 	.word	0x40014800

08000e7c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a1b      	ldr	r3, [r3, #32]
 8000e96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a1b      	ldr	r3, [r3, #32]
 8000ea2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f023 0303 	bic.w	r3, r3, #3
 8000eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	6812      	ldr	r2, [r2, #0]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a21      	ldr	r2, [pc, #132]	; (8000f74 <OC3Config+0xf8>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d00b      	beq.n	8000f0a <OC3Config+0x8e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a20      	ldr	r2, [pc, #128]	; (8000f78 <OC3Config+0xfc>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d007      	beq.n	8000f0a <OC3Config+0x8e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a1f      	ldr	r2, [pc, #124]	; (8000f7c <OC3Config+0x100>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d003      	beq.n	8000f0a <OC3Config+0x8e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <OC3Config+0x104>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d11f      	bne.n	8000f4a <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	029b      	lsls	r3, r3, #10
 8000f16:	4313      	orrs	r3, r2
 8000f18:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	029b      	lsls	r3, r3, #10
 8000f26:	4313      	orrs	r3, r2
 8000f28:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	69db      	ldr	r3, [r3, #28]
 8000f44:	015b      	lsls	r3, r3, #5
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff fd6d 	bl	8000a3c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40012c00 	.word	0x40012c00
 8000f78:	40014000 	.word	0x40014000
 8000f7c:	40014400 	.word	0x40014400
 8000f80:	40014800 	.word	0x40014800

08000f84 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a1b      	ldr	r3, [r3, #32]
 8000faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fbe:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	6812      	ldr	r2, [r2, #0]
 8000fce:	0212      	lsls	r2, r2, #8
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	031b      	lsls	r3, r3, #12
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	031b      	lsls	r3, r3, #12
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a15      	ldr	r2, [pc, #84]	; (800104c <OC4Config+0xc8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d00b      	beq.n	8001014 <OC4Config+0x90>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a14      	ldr	r2, [pc, #80]	; (8001050 <OC4Config+0xcc>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d007      	beq.n	8001014 <OC4Config+0x90>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a13      	ldr	r2, [pc, #76]	; (8001054 <OC4Config+0xd0>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d003      	beq.n	8001014 <OC4Config+0x90>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <OC4Config+0xd4>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d107      	bne.n	8001024 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	019b      	lsls	r3, r3, #6
 8001020:	4313      	orrs	r3, r2
 8001022:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	4619      	mov	r1, r3
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff fd0e 	bl	8000a58 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40012c00 	.word	0x40012c00
 8001050:	40014000 	.word	0x40014000
 8001054:	40014400 	.word	0x40014400
 8001058:	40014800 	.word	0x40014800

0800105c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001084:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	6812      	ldr	r2, [r2, #0]
 8001094:	4313      	orrs	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	041b      	lsls	r3, r3, #16
 80010a4:	4313      	orrs	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	041b      	lsls	r3, r3, #16
 80010b4:	4313      	orrs	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a15      	ldr	r2, [pc, #84]	; (8001110 <OC5Config+0xb4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d00b      	beq.n	80010d8 <OC5Config+0x7c>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a14      	ldr	r2, [pc, #80]	; (8001114 <OC5Config+0xb8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d007      	beq.n	80010d8 <OC5Config+0x7c>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a13      	ldr	r2, [pc, #76]	; (8001118 <OC5Config+0xbc>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d003      	beq.n	80010d8 <OC5Config+0x7c>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <OC5Config+0xc0>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d109      	bne.n	80010ec <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	021b      	lsls	r3, r3, #8
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	4619      	mov	r1, r3
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff fcbb 	bl	8000a74 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40012c00 	.word	0x40012c00
 8001114:	40014000 	.word	0x40014000
 8001118:	40014400 	.word	0x40014400
 800111c:	40014800 	.word	0x40014800

08001120 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001148:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	6812      	ldr	r2, [r2, #0]
 8001158:	0212      	lsls	r2, r2, #8
 800115a:	4313      	orrs	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	051b      	lsls	r3, r3, #20
 800116a:	4313      	orrs	r3, r2
 800116c:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	051b      	lsls	r3, r3, #20
 800117a:	4313      	orrs	r3, r2
 800117c:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <OC6Config+0xb4>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00b      	beq.n	800119e <OC6Config+0x7e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <OC6Config+0xb8>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d007      	beq.n	800119e <OC6Config+0x7e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a12      	ldr	r2, [pc, #72]	; (80011dc <OC6Config+0xbc>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d003      	beq.n	800119e <OC6Config+0x7e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <OC6Config+0xc0>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d109      	bne.n	80011b2 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	029b      	lsls	r3, r3, #10
 80011ac:	431a      	orrs	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	4619      	mov	r1, r3
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff fc66 	bl	8000a90 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40012c00 	.word	0x40012c00
 80011d8:	40014000 	.word	0x40014000
 80011dc:	40014400 	.word	0x40014400
 80011e0:	40014800 	.word	0x40014800

080011e4 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	bf0c      	ite	eq
 80011f8:	2301      	moveq	r3, #1
 80011fa:	2300      	movne	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	605a      	str	r2, [r3, #4]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	609a      	str	r2, [r3, #8]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8001256:	b4b0      	push	{r4, r5, r7}
 8001258:	b085      	sub	sp, #20
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 8001264:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 8001266:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800126e:	d114      	bne.n	800129a <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	005a      	lsls	r2, r3, #1
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	085b      	lsrs	r3, r3, #1
 8001278:	441a      	add	r2, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001280:	b29b      	uxth	r3, r3
 8001282:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8001284:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8001288:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800128a:	086b      	lsrs	r3, r5, #1
 800128c:	b29b      	uxth	r3, r3
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8001298:	e00a      	b.n	80012b0 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	085a      	lsrs	r2, r3, #1
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	441a      	add	r2, r3
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	60da      	str	r2, [r3, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bcb0      	pop	{r4, r5, r7}
 80012b8:	4770      	bx	lr
	...

080012bc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ff88 	bl	80011e4 <LL_USART_IsEnabled>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d14e      	bne.n	8001378 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4b29      	ldr	r3, [pc, #164]	; (8001384 <LL_USART_Init+0xc8>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	6851      	ldr	r1, [r2, #4]
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	68d2      	ldr	r2, [r2, #12]
 80012ea:	4311      	orrs	r1, r2
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	6912      	ldr	r2, [r2, #16]
 80012f0:	4311      	orrs	r1, r2
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	6992      	ldr	r2, [r2, #24]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	4619      	mov	r1, r3
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff80 	bl	800120a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	4619      	mov	r1, r3
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff8d 	bl	8001230 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <LL_USART_Init+0xcc>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d104      	bne.n	8001328 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff fa60 	bl	80007e4 <LL_RCC_GetUSARTClockFreq>
 8001324:	61b8      	str	r0, [r7, #24]
 8001326:	e016      	b.n	8001356 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a18      	ldr	r2, [pc, #96]	; (800138c <LL_USART_Init+0xd0>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d107      	bne.n	8001340 <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fa2f 	bl	8000798 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	61bb      	str	r3, [r7, #24]
 800133e:	e00a      	b.n	8001356 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a13      	ldr	r2, [pc, #76]	; (8001390 <LL_USART_Init+0xd4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d106      	bne.n	8001356 <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fa23 	bl	8000798 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00d      	beq.n	8001378 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d009      	beq.n	8001378 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8001364:	2300      	movs	r3, #0
 8001366:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	699a      	ldr	r2, [r3, #24]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	69b9      	ldr	r1, [r7, #24]
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ff6f 	bl	8001256 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001378:	7ffb      	ldrb	r3, [r7, #31]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3720      	adds	r7, #32
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	efff69f3 	.word	0xefff69f3
 8001388:	40013800 	.word	0x40013800
 800138c:	40004400 	.word	0x40004400
 8001390:	40004800 	.word	0x40004800

08001394 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <LL_InitTick+0x30>)
 80013a8:	3b01      	subs	r3, #1
 80013aa:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <LL_InitTick+0x30>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <LL_InitTick+0x30>)
 80013b4:	2205      	movs	r2, #5
 80013b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000e010 	.word	0xe000e010

080013c8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80013d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ffdd 	bl	8001394 <LL_InitTick>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <LL_mDelay+0x48>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80013f2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fa:	d00c      	beq.n	8001416 <LL_mDelay+0x32>
  {
    Delay++;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3301      	adds	r3, #1
 8001400:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001402:	e008      	b.n	8001416 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <LL_mDelay+0x48>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <LL_mDelay+0x32>
    {
      Delay--;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f3      	bne.n	8001404 <LL_mDelay+0x20>
    }
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e010 	.word	0xe000e010

08001430 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <LL_SetSystemCoreClock+0x1c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	2000000c 	.word	0x2000000c

08001450 <LL_ADC_REG_SetSequencerRanks>:
{
 8001450:	b490      	push	{r4, r7}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3330      	adds	r3, #48	; 0x30
 8001460:	4619      	mov	r1, r3
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001468:	f44f 7340 	mov.w	r3, #768	; 0x300
 800146c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	fa93 f3a3 	rbit	r3, r3
 8001474:	613b      	str	r3, [r7, #16]
  return(result);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	fab3 f383 	clz	r3, r3
 800147c:	fa22 f303 	lsr.w	r3, r2, r3
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8001486:	6822      	ldr	r2, [r4, #0]
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	f003 031f 	and.w	r3, r3, #31
 800148e:	211f      	movs	r1, #31
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	401a      	ands	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	f003 031f 	and.w	r3, r3, #31
 80014a4:	f1c3 031a 	rsb	r3, r3, #26
 80014a8:	fa21 f303 	lsr.w	r3, r1, r3
 80014ac:	4313      	orrs	r3, r2
 80014ae:	6023      	str	r3, [r4, #0]
}
 80014b0:	bf00      	nop
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc90      	pop	{r4, r7}
 80014b8:	4770      	bx	lr

080014ba <LL_ADC_SetChannelSamplingTime>:
{
 80014ba:	b490      	push	{r4, r7}
 80014bc:	b08a      	sub	sp, #40	; 0x28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3314      	adds	r3, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 80014d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa93 f3a3 	rbit	r3, r3
 80014de:	613b      	str	r3, [r7, #16]
  return(result);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	fab3 f383 	clz	r3, r3
 80014e6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80014f0:	6822      	ldr	r2, [r4, #0]
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 80014f8:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 80014fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa93 f3a3 	rbit	r3, r3
 8001504:	61bb      	str	r3, [r7, #24]
  return(result);
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	fab3 f383 	clz	r3, r3
 800150c:	fa21 f303 	lsr.w	r3, r1, r3
 8001510:	2107      	movs	r1, #7
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	401a      	ands	r2, r3
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 8001520:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	fa93 f3a3 	rbit	r3, r3
 800152c:	623b      	str	r3, [r7, #32]
  return(result);
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	fab3 f383 	clz	r3, r3
 8001534:	fa21 f303 	lsr.w	r3, r1, r3
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	6023      	str	r3, [r4, #0]
}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	; 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bc90      	pop	{r4, r7}
 800154a:	4770      	bx	lr

0800154c <LL_ADC_SetChannelSingleDiff>:
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001564:	43db      	mvns	r3, r3
 8001566:	401a      	ands	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0320 	and.w	r3, r3, #32
 800156e:	4908      	ldr	r1, [pc, #32]	; (8001590 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001570:	4099      	lsls	r1, r3
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	400b      	ands	r3, r1
 8001576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800157a:	431a      	orrs	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	0007ffff 	.word	0x0007ffff

08001594 <LL_ADC_Enable>:
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015a8:	f043 0201 	orr.w	r2, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	609a      	str	r2, [r3, #8]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_IsEnabled>:
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	bf0c      	ite	eq
 80015d0:	2301      	moveq	r3, #1
 80015d2:	2300      	movne	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	bf0c      	ite	eq
 80015f6:	2301      	moveq	r3, #1
 80015f8:	2300      	movne	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001618:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800161c:	f043 0204 	orr.w	r2, r3, #4
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b04      	cmp	r3, #4
 8001642:	bf0c      	ite	eq
 8001644:	2301      	moveq	r3, #1
 8001646:	2300      	movne	r3, #0
 8001648:	b2db      	uxtb	r3, r3
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf0c      	ite	eq
 800166a:	2301      	moveq	r3, #1
 800166c:	2300      	movne	r3, #0
 800166e:	b2db      	uxtb	r3, r3
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2204      	movs	r2, #4
 8001688:	601a      	str	r2, [r3, #0]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <LL_ADC_EnableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_EnableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f043 0204 	orr.w	r2, r3, #4
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	605a      	str	r2, [r3, #4]
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f023 0208 	bic.w	r2, r3, #8
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	605a      	str	r2, [r3, #4]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016e2:	695a      	ldr	r2, [r3, #20]
 80016e4:	4907      	ldr	r1, [pc, #28]	; (8001704 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4013      	ands	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016f6:	68fb      	ldr	r3, [r7, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40021000 	.word	0x40021000

08001708 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b094      	sub	sp, #80	; 0x50
 800170c:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800170e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800171a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]
 800172a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
 8001748:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 800174a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800174e:	f7ff ffc3 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001752:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001756:	f7ff ffbf 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration  
  PA0   ------> ADC1_IN1 
  */
  // pin na ktorom sa meria napatie - analogovy rezim - nie je pripojeny k rezistore
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800175a:	2301      	movs	r3, #1
 800175c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800175e:	2303      	movs	r3, #3
 8001760:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	4619      	mov	r1, r3
 800176a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176e:	f7fe fefc 	bl	800056a <LL_GPIO_Init>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001772:	2300      	movs	r3, #0
 8001774:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001776:	2300      	movs	r3, #0
 8001778:	64bb      	str	r3, [r7, #72]	; 0x48
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800177a:	2300      	movs	r3, #0
 800177c:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800177e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001782:	4619      	mov	r1, r3
 8001784:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001788:	f7fe fd84 	bl	8000294 <LL_ADC_Init>

  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001798:	2300      	movs	r3, #0
 800179a:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 800179c:	2301      	movs	r3, #1
 800179e:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 80017a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a4:	643b      	str	r3, [r7, #64]	; 0x40
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80017a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017aa:	4619      	mov	r1, r3
 80017ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017b0:	f7fe fd96 	bl	80002e0 <LL_ADC_REG_Init>
  LL_ADC_EnableIT_EOC(ADC1);
 80017b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017b8:	f7ff ff6d 	bl	8001696 <LL_ADC_EnableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 80017bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017c0:	f7ff ff79 	bl	80016b6 <LL_ADC_DisableIT_EOS>

  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 80017c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c8:	61fb      	str	r3, [r7, #28]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	480e      	ldr	r0, [pc, #56]	; (8001810 <MX_ADC1_Init+0x108>)
 80017d6:	f7fe fd1d 	bl	8000214 <LL_ADC_CommonInit>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80017da:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <MX_ADC1_Init+0x10c>)
 80017dc:	2106      	movs	r1, #6
 80017de:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017e2:	f7ff fe35 	bl	8001450 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80017e6:	2200      	movs	r2, #0
 80017e8:	490a      	ldr	r1, [pc, #40]	; (8001814 <MX_ADC1_Init+0x10c>)
 80017ea:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017ee:	f7ff fe64 	bl	80014ba <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80017f2:	227f      	movs	r2, #127	; 0x7f
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <MX_ADC1_Init+0x10c>)
 80017f6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017fa:	f7ff fea7 	bl	800154c <LL_ADC_SetChannelSingleDiff>

  LL_ADC_Enable(ADC1);
 80017fe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001802:	f7ff fec7 	bl	8001594 <LL_ADC_Enable>
}
 8001806:	bf00      	nop
 8001808:	3750      	adds	r7, #80	; 0x50
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	50000300 	.word	0x50000300
 8001814:	04300002 	.word	0x04300002

08001818 <ADC_start_conversion>:

void ADC_start_conversion(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	if ((LL_ADC_IsEnabled(ADC1) == 1)             &&
 800181c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001820:	f7ff fecc 	bl	80015bc <LL_ADC_IsEnabled>
 8001824:	4603      	mov	r3, r0
 8001826:	2b01      	cmp	r3, #1
 8001828:	d111      	bne.n	800184e <ADC_start_conversion+0x36>
	  (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 800182a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800182e:	f7ff fed8 	bl	80015e2 <LL_ADC_IsDisableOngoing>
 8001832:	4603      	mov	r3, r0
	if ((LL_ADC_IsEnabled(ADC1) == 1)             &&
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10a      	bne.n	800184e <ADC_start_conversion+0x36>
	  (LL_ADC_REG_IsConversionOngoing(ADC1) == 0)   )
 8001838:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800183c:	f7ff fef8 	bl	8001630 <LL_ADC_REG_IsConversionOngoing>
 8001840:	4603      	mov	r3, r0
	  (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 8001842:	2b00      	cmp	r3, #0
 8001844:	d103      	bne.n	800184e <ADC_start_conversion+0x36>
	{
		LL_ADC_REG_StartConversion(ADC1);
 8001846:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800184a:	f7ff fedd 	bl	8001608 <LL_ADC_REG_StartConversion>
	else
	{
		/**/
	}

	while (LL_ADC_IsActiveFlag_EOC(ADC1) == 0){}
 800184e:	bf00      	nop
 8001850:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001854:	f7ff feff 	bl	8001656 <LL_ADC_IsActiveFlag_EOC>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f8      	beq.n	8001850 <ADC_start_conversion+0x38>

	LL_ADC_ClearFlag_EOC(ADC1);
 800185e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001862:	f7ff ff0b 	bl	800167c <LL_ADC_ClearFlag_EOC>
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <ADC_convertedValue2float>:


float ADC_convertedValue2float(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
	return (ADC1->DR/4097.0f)*3.3f;
 8001870:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800187e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800189c <ADC_convertedValue2float+0x30>
 8001882:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001886:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80018a0 <ADC_convertedValue2float+0x34>
 800188a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800188e:	eeb0 0a67 	vmov.f32	s0, s15
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	45800800 	.word	0x45800800
 80018a0:	40533333 	.word	0x40533333

080018a4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	4907      	ldr	r1, [pc, #28]	; (80018d4 <NVIC_EnableIRQ+0x30>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	2001      	movs	r0, #1
 80018be:	fa00 f202 	lsl.w	r2, r0, r2
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da0b      	bge.n	8001904 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	; (8001924 <NVIC_SetPriority+0x4c>)
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	3b04      	subs	r3, #4
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001902:	e009      	b.n	8001918 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4907      	ldr	r1, [pc, #28]	; (8001928 <NVIC_SetPriority+0x50>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00
 8001928:	e000e100 	.word	0xe000e100

0800192c <LL_AHB1_GRP1_EnableClock>:
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001936:	695a      	ldr	r2, [r3, #20]
 8001938:	4907      	ldr	r1, [pc, #28]	; (8001958 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4313      	orrs	r3, r2
 800193e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001942:	695a      	ldr	r2, [r3, #20]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4013      	ands	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	40021000 	.word	0x40021000

0800195c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001960:	2001      	movs	r0, #1
 8001962:	f7ff ffe3 	bl	800192c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 8001966:	2100      	movs	r1, #0
 8001968:	2010      	movs	r0, #16
 800196a:	f7ff ffb5 	bl	80018d8 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800196e:	2010      	movs	r0, #16
 8001970:	f7ff ff98 	bl	80018a4 <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 8001974:	2100      	movs	r1, #0
 8001976:	2011      	movs	r0, #17
 8001978:	f7ff ffae 	bl	80018d8 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800197c:	2011      	movs	r0, #17
 800197e:	f7ff ff91 	bl	80018a4 <NVIC_EnableIRQ>

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <LL_AHB1_GRP1_EnableClock>:
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001992:	695a      	ldr	r2, [r3, #20]
 8001994:	4907      	ldr	r1, [pc, #28]	; (80019b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4313      	orrs	r3, r2
 800199a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800199e:	695a      	ldr	r2, [r3, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4013      	ands	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019a6:	68fb      	ldr	r3, [r7, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	40021000 	.word	0x40021000

080019b8 <LL_GPIO_SetPinMode>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	613b      	str	r3, [r7, #16]
  return(result);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	fab3 f383 	clz	r3, r3
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2103      	movs	r1, #3
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	401a      	ands	r2, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa93 f3a3 	rbit	r3, r3
 80019f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	fab3 f383 	clz	r3, r3
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001a00:	431a      	orrs	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	601a      	str	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_GPIO_SetPinOutputType>:
{
 8001a12:	b480      	push	{r7}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	401a      	ands	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	431a      	orrs	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	605a      	str	r2, [r3, #4]
}
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a66:	463b      	mov	r3, r7
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
 8001a74:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001a76:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a7a:	f7ff ff85 	bl	8001988 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001a7e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001a82:	f7ff ff81 	bl	8001988 <LL_AHB1_GRP1_EnableClock>

  //GPIO PIN 3 AS OUTPUT - LED
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_OUTPUT);
 8001a86:	2201      	movs	r2, #1
 8001a88:	2108      	movs	r1, #8
 8001a8a:	480f      	ldr	r0, [pc, #60]	; (8001ac8 <MX_GPIO_Init+0x68>)
 8001a8c:	f7ff ff94 	bl	80019b8 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinOutputType(GPIOB, LL_GPIO_PIN_3, LL_GPIO_OUTPUT_PUSHPULL);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2108      	movs	r1, #8
 8001a94:	480c      	ldr	r0, [pc, #48]	; (8001ac8 <MX_GPIO_Init+0x68>)
 8001a96:	f7ff ffbc 	bl	8001a12 <LL_GPIO_SetPinOutputType>
  //SET INITIAL STATE - RESET
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8001a9a:	2108      	movs	r1, #8
 8001a9c:	480a      	ldr	r0, [pc, #40]	; (8001ac8 <MX_GPIO_Init+0x68>)
 8001a9e:	f7ff ffd0 	bl	8001a42 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab6:	463b      	mov	r3, r7
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4803      	ldr	r0, [pc, #12]	; (8001ac8 <MX_GPIO_Init+0x68>)
 8001abc:	f7fe fd55 	bl	800056a <LL_GPIO_Init>

}
 8001ac0:	bf00      	nop
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	48000400 	.word	0x48000400

08001acc <NVIC_SetPriorityGrouping>:
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <NVIC_SetPriorityGrouping+0x44>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <NVIC_SetPriorityGrouping+0x44>)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	60d3      	str	r3, [r2, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <LL_RCC_HSI_Enable>:
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <LL_RCC_HSI_Enable+0x1c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <LL_RCC_HSI_Enable+0x1c>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000

08001b34 <LL_RCC_HSI_IsReady>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <LL_RCC_HSI_IsReady+0x20>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	bf0c      	ite	eq
 8001b44:	2301      	moveq	r3, #1
 8001b46:	2300      	movne	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	40021000 	.word	0x40021000

08001b58 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4904      	ldr	r1, [pc, #16]	; (8001b80 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000

08001b84 <LL_RCC_SetSysClkSource>:
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <LL_RCC_SetSysClkSource+0x24>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f023 0203 	bic.w	r2, r3, #3
 8001b94:	4904      	ldr	r1, [pc, #16]	; (8001ba8 <LL_RCC_SetSysClkSource+0x24>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	40021000 	.word	0x40021000

08001bac <LL_RCC_GetSysClkSource>:
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <LL_RCC_GetSysClkSource+0x18>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <LL_RCC_SetAHBPrescaler>:
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <LL_RCC_SetAHBPrescaler+0x24>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd8:	4904      	ldr	r1, [pc, #16]	; (8001bec <LL_RCC_SetAHBPrescaler+0x24>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40021000 	.word	0x40021000

08001bf0 <LL_RCC_SetAPB1Prescaler>:
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c00:	4904      	ldr	r1, [pc, #16]	; (8001c14 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	40021000 	.word	0x40021000

08001c18 <LL_RCC_SetAPB2Prescaler>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c28:	4904      	ldr	r1, [pc, #16]	; (8001c3c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	40021000 	.word	0x40021000

08001c40 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c4a:	69da      	ldr	r2, [r3, #28]
 8001c4c:	4907      	ldr	r1, [pc, #28]	; (8001c6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c56:	69da      	ldr	r2, [r3, #28]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	40021000 	.word	0x40021000

08001c70 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c7a:	699a      	ldr	r2, [r3, #24]
 8001c7c:	4907      	ldr	r1, [pc, #28]	; (8001c9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c86:	699a      	ldr	r2, [r3, #24]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <LL_FLASH_SetLatency+0x24>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f023 0207 	bic.w	r2, r3, #7
 8001cb0:	4904      	ldr	r1, [pc, #16]	; (8001cc4 <LL_FLASH_SetLatency+0x24>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	600b      	str	r3, [r1, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	40022000 	.word	0x40022000

08001cc8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <LL_FLASH_GetLatency+0x18>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40022000 	.word	0x40022000

08001ce4 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d106      	bne.n	8001d00 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <LL_SYSTICK_SetClkSource+0x34>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a08      	ldr	r2, [pc, #32]	; (8001d18 <LL_SYSTICK_SetClkSource+0x34>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001cfe:	e005      	b.n	8001d0c <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <LL_SYSTICK_SetClkSource+0x34>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <LL_SYSTICK_SetClkSource+0x34>)
 8001d06:	f023 0304 	bic.w	r3, r3, #4
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001d22:	2001      	movs	r0, #1
 8001d24:	f7ff ffa4 	bl	8001c70 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001d28:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001d2c:	f7ff ff88 	bl	8001c40 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f7ff fecb 	bl	8001acc <NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d36:	f000 f823 	bl	8001d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d3a:	f7ff fe91 	bl	8001a60 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d3e:	f7ff fe0d 	bl	800195c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001d42:	f000 ffc7 	bl	8002cd4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001d46:	f7ff fcdf 	bl	8001708 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001d4a:	f000 fc23 	bl	8002594 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // vyberanie funkcii
  USART2_RegisterCallback(processDmaData);
 8001d4e:	480a      	ldr	r0, [pc, #40]	; (8001d78 <main+0x5c>)
 8001d50:	f000 ffae 	bl	8002cb0 <USART2_RegisterCallback>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int deley_count = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	607b      	str	r3, [r7, #4]
#if POLLING
	//Polling for new data, no interrupts
	USART2_CheckDmaReception();
	LL_mDelay(10);
#else
	if(deley_count == 30)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b1e      	cmp	r3, #30
 8001d5c:	d105      	bne.n	8001d6a <main+0x4e>
	{
		USART2_PutBuffer(rx_data, sizeof(rx_data));
 8001d5e:	210a      	movs	r1, #10
 8001d60:	4806      	ldr	r0, [pc, #24]	; (8001d7c <main+0x60>)
 8001d62:	f001 f899 	bl	8002e98 <USART2_PutBuffer>
		deley_count = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
	}
	LL_mDelay(100);
 8001d6a:	2064      	movs	r0, #100	; 0x64
 8001d6c:	f7ff fb3a 	bl	80013e4 <LL_mDelay>
	deley_count++;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3301      	adds	r3, #1
 8001d74:	607b      	str	r3, [r7, #4]
	if(deley_count == 30)
 8001d76:	e7ef      	b.n	8001d58 <main+0x3c>
 8001d78:	08001ded 	.word	0x08001ded
 8001d7c:	20000000 	.word	0x20000000

08001d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff ff8b 	bl	8001ca0 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001d8a:	f7ff ff9d 	bl	8001cc8 <LL_FLASH_GetLatency>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8001d94:	f000 f8a6 	bl	8001ee4 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001d98:	f7ff febc 	bl	8001b14 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001d9c:	bf00      	nop
 8001d9e:	f7ff fec9 	bl	8001b34 <LL_RCC_HSI_IsReady>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d1fa      	bne.n	8001d9e <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001da8:	2010      	movs	r0, #16
 8001daa:	f7ff fed5 	bl	8001b58 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7ff ff0a 	bl	8001bc8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff ff1b 	bl	8001bf0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7ff ff2c 	bl	8001c18 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7ff fedf 	bl	8001b84 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001dc6:	bf00      	nop
 8001dc8:	f7ff fef0 	bl	8001bac <LL_RCC_GetSysClkSource>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1fa      	bne.n	8001dc8 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8001dd2:	4805      	ldr	r0, [pc, #20]	; (8001de8 <SystemClock_Config+0x68>)
 8001dd4:	f7ff faf8 	bl	80013c8 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001dd8:	2004      	movs	r0, #4
 8001dda:	f7ff ff83 	bl	8001ce4 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8001dde:	4802      	ldr	r0, [pc, #8]	; (8001de8 <SystemClock_Config+0x68>)
 8001de0:	f7ff fb26 	bl	8001430 <LL_SetSystemCoreClock>
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	007a1200 	.word	0x007a1200

08001dec <processDmaData>:
		}
    }
}

void processDmaData(const uint8_t* data, uint16_t len)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
	if(*(data) == '$')
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b24      	cmp	r3, #36	; 0x24
 8001dfe:	d15e      	bne.n	8001ebe <processDmaData+0xd2>
	{
		for(uint8_t i = 0; (i <= 35); i++)
 8001e00:	2300      	movs	r3, #0
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	e024      	b.n	8001e50 <processDmaData+0x64>
		{
			rx_data[i%10 ] = *(data+i);
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	18d0      	adds	r0, r2, r3
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	4b2f      	ldr	r3, [pc, #188]	; (8001ecc <processDmaData+0xe0>)
 8001e10:	fba3 1302 	umull	r1, r3, r3, r2
 8001e14:	08d9      	lsrs	r1, r3, #3
 8001e16:	460b      	mov	r3, r1
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	7801      	ldrb	r1, [r0, #0]
 8001e26:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <processDmaData+0xe4>)
 8001e28:	5499      	strb	r1, [r3, r2]
			if(*(data+i) == '$')
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	4413      	add	r3, r2
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b24      	cmp	r3, #36	; 0x24
 8001e34:	d103      	bne.n	8001e3e <processDmaData+0x52>
			{
				listen = 1;
 8001e36:	4b27      	ldr	r3, [pc, #156]	; (8001ed4 <processDmaData+0xe8>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]
				break;
 8001e3c:	e00b      	b.n	8001e56 <processDmaData+0x6a>
			}
			if(i == 35)
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	2b23      	cmp	r3, #35	; 0x23
 8001e42:	d102      	bne.n	8001e4a <processDmaData+0x5e>
			{
				listen = 0;
 8001e44:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <processDmaData+0xe8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; (i <= 35); i++)
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	2b23      	cmp	r3, #35	; 0x23
 8001e54:	d9d7      	bls.n	8001e06 <processDmaData+0x1a>
			}
		}

		if(listen)
 8001e56:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <processDmaData+0xe8>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d02f      	beq.n	8001ebe <processDmaData+0xd2>
		{
			// cyklus rata male a velke pismena
			for(uint8_t i = 1; i < len; i++)
 8001e5e:	2301      	movs	r3, #1
 8001e60:	73bb      	strb	r3, [r7, #14]
 8001e62:	e027      	b.n	8001eb4 <processDmaData+0xc8>
			{
				if(islower(*(data+i)))
 8001e64:	7bbb      	ldrb	r3, [r7, #14]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	4a1a      	ldr	r2, [pc, #104]	; (8001ed8 <processDmaData+0xec>)
 8001e70:	4413      	add	r3, r2
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d106      	bne.n	8001e8a <processDmaData+0x9e>
				{
					countLower++;
 8001e7c:	4b17      	ldr	r3, [pc, #92]	; (8001edc <processDmaData+0xf0>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b15      	ldr	r3, [pc, #84]	; (8001edc <processDmaData+0xf0>)
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	e011      	b.n	8001eae <processDmaData+0xc2>
				}
				else if(isupper(*(data+i)))
 8001e8a:	7bbb      	ldrb	r3, [r7, #14]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	3301      	adds	r3, #1
 8001e94:	4a10      	ldr	r2, [pc, #64]	; (8001ed8 <processDmaData+0xec>)
 8001e96:	4413      	add	r3, r2
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d105      	bne.n	8001eae <processDmaData+0xc2>
				{
					countUpper++;
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <processDmaData+0xf4>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <processDmaData+0xf4>)
 8001eac:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 1; i < len; i++)
 8001eae:	7bbb      	ldrb	r3, [r7, #14]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	73bb      	strb	r3, [r7, #14]
 8001eb4:	7bbb      	ldrb	r3, [r7, #14]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	887a      	ldrh	r2, [r7, #2]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d8d2      	bhi.n	8001e64 <processDmaData+0x78>
				}
			}
		}
	}
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	cccccccd 	.word	0xcccccccd
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	2000002e 	.word	0x2000002e
 8001ed8:	0800308b 	.word	0x0800308b
 8001edc:	2000002d 	.word	0x2000002d
 8001ee0:	2000002c 	.word	0x2000002c

08001ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <LL_DMA_DisableChannel+0x3c>)
 8001f04:	5cd3      	ldrb	r3, [r2, r3]
 8001f06:	461a      	mov	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	3a01      	subs	r2, #1
 8001f12:	4907      	ldr	r1, [pc, #28]	; (8001f30 <LL_DMA_DisableChannel+0x3c>)
 8001f14:	5c8a      	ldrb	r2, [r1, r2]
 8001f16:	4611      	mov	r1, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	440a      	add	r2, r1
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6013      	str	r3, [r2, #0]
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	0800304c 	.word	0x0800304c

08001f34 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f48:	bf0c      	ite	eq
 8001f4a:	2301      	moveq	r3, #1
 8001f4c:	2300      	movne	r3, #0
 8001f4e:	b2db      	uxtb	r3, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f70:	bf0c      	ite	eq
 8001f72:	2301      	moveq	r3, #1
 8001f74:	2300      	movne	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f98:	bf0c      	ite	eq
 8001f9a:	2301      	moveq	r3, #1
 8001f9c:	2300      	movne	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001fba:	605a      	str	r2, [r3, #4]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fd6:	605a      	str	r2, [r3, #4]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ff2:	605a      	str	r2, [r3, #4]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_TIM_ClearFlag_UPDATE>:
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f06f 0201 	mvn.w	r2, #1
 800200e:	611a      	str	r2, [r3, #16]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_TIM_IsActiveFlag_UPDATE>:
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	bf0c      	ite	eq
 8002030:	2301      	moveq	r3, #1
 8002032:	2300      	movne	r3, #0
 8002034:	b2db      	uxtb	r3, r3
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b10      	cmp	r3, #16
 8002054:	bf0c      	ite	eq
 8002056:	2301      	moveq	r3, #1
 8002058:	2300      	movne	r3, #0
 800205a:	b2db      	uxtb	r3, r3
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002078:	2b40      	cmp	r3, #64	; 0x40
 800207a:	bf0c      	ite	eq
 800207c:	2301      	moveq	r3, #1
 800207e:	2300      	movne	r3, #0
 8002080:	b2db      	uxtb	r3, r3
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2210      	movs	r2, #16
 800209a:	621a      	str	r2, [r3, #32]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_GPIO_IsOutputPinSet>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	4013      	ands	r3, r2
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	bf0c      	ite	eq
 80020c0:	2301      	moveq	r3, #1
 80020c2:	2300      	movne	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_GPIO_SetOutputPin>:
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	619a      	str	r2, [r3, #24]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_GPIO_ResetOutputPin>:
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <HardFault_Handler+0x4>

0800211e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002122:	e7fe      	b.n	8002122 <MemManage_Handler+0x4>

08002124 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <BusFault_Handler+0x4>

0800212a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800212e:	e7fe      	b.n	800212e <UsageFault_Handler+0x4>

08002130 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 800216c:	4811      	ldr	r0, [pc, #68]	; (80021b4 <TIM3_IRQHandler+0x4c>)
 800216e:	f7ff ff55 	bl	800201c <LL_TIM_IsActiveFlag_UPDATE>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d018      	beq.n	80021aa <TIM3_IRQHandler+0x42>
	{
		if(LL_GPIO_IsOutputPinSet(GPIOB, LL_GPIO_PIN_3))
 8002178:	2108      	movs	r1, #8
 800217a:	480f      	ldr	r0, [pc, #60]	; (80021b8 <TIM3_IRQHandler+0x50>)
 800217c:	f7ff ff94 	bl	80020a8 <LL_GPIO_IsOutputPinSet>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d004      	beq.n	8002190 <TIM3_IRQHandler+0x28>
		{
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8002186:	2108      	movs	r1, #8
 8002188:	480b      	ldr	r0, [pc, #44]	; (80021b8 <TIM3_IRQHandler+0x50>)
 800218a:	f7ff ffb0 	bl	80020ee <LL_GPIO_ResetOutputPin>
 800218e:	e003      	b.n	8002198 <TIM3_IRQHandler+0x30>
		}
		else
		{
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8002190:	2108      	movs	r1, #8
 8002192:	4809      	ldr	r0, [pc, #36]	; (80021b8 <TIM3_IRQHandler+0x50>)
 8002194:	f7ff ff9d 	bl	80020d2 <LL_GPIO_SetOutputPin>
		}

		ADC_start_conversion();
 8002198:	f7ff fb3e 	bl	8001818 <ADC_start_conversion>
		voltage = ADC_convertedValue2float();
 800219c:	f7ff fb66 	bl	800186c <ADC_convertedValue2float>
 80021a0:	eef0 7a40 	vmov.f32	s15, s0
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <TIM3_IRQHandler+0x54>)
 80021a6:	edc3 7a00 	vstr	s15, [r3]
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 80021aa:	4802      	ldr	r0, [pc, #8]	; (80021b4 <TIM3_IRQHandler+0x4c>)
 80021ac:	f7ff ff28 	bl	8002000 <LL_TIM_ClearFlag_UPDATE>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40000400 	.word	0x40000400
 80021b8:	48000400 	.word	0x48000400
 80021bc:	20000030 	.word	0x20000030

080021c0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 80021c4:	480c      	ldr	r0, [pc, #48]	; (80021f8 <DMA1_Channel6_IRQHandler+0x38>)
 80021c6:	f7ff feb5 	bl	8001f34 <LL_DMA_IsActiveFlag_TC6>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 80021d0:	f000 fe82 	bl	8002ed8 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 80021d4:	4808      	ldr	r0, [pc, #32]	; (80021f8 <DMA1_Channel6_IRQHandler+0x38>)
 80021d6:	f7ff fee9 	bl	8001fac <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 80021da:	e00a      	b.n	80021f2 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 80021dc:	4806      	ldr	r0, [pc, #24]	; (80021f8 <DMA1_Channel6_IRQHandler+0x38>)
 80021de:	f7ff fed1 	bl	8001f84 <LL_DMA_IsActiveFlag_HT6>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d104      	bne.n	80021f2 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 80021e8:	f000 fe76 	bl	8002ed8 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <DMA1_Channel6_IRQHandler+0x38>)
 80021ee:	f7ff fef9 	bl	8001fe4 <LL_DMA_ClearFlag_HT6>
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40020000 	.word	0x40020000

080021fc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8002200:	480a      	ldr	r0, [pc, #40]	; (800222c <DMA1_Channel7_IRQHandler+0x30>)
 8002202:	f7ff feab 	bl	8001f5c <LL_DMA_IsActiveFlag_TC7>
 8002206:	4603      	mov	r3, r0
 8002208:	2b01      	cmp	r3, #1
 800220a:	d10d      	bne.n	8002228 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 800220c:	4807      	ldr	r0, [pc, #28]	; (800222c <DMA1_Channel7_IRQHandler+0x30>)
 800220e:	f7ff fedb 	bl	8001fc8 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8002212:	bf00      	nop
 8002214:	4806      	ldr	r0, [pc, #24]	; (8002230 <DMA1_Channel7_IRQHandler+0x34>)
 8002216:	f7ff ff27 	bl	8002068 <LL_USART_IsActiveFlag_TC>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f9      	beq.n	8002214 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002220:	2107      	movs	r1, #7
 8002222:	4802      	ldr	r0, [pc, #8]	; (800222c <DMA1_Channel7_IRQHandler+0x30>)
 8002224:	f7ff fe66 	bl	8001ef4 <LL_DMA_DisableChannel>
	}
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40020000 	.word	0x40020000
 8002230:	40004400 	.word	0x40004400

08002234 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8002238:	4806      	ldr	r0, [pc, #24]	; (8002254 <USART2_IRQHandler+0x20>)
 800223a:	f7ff ff02 	bl	8002042 <LL_USART_IsActiveFlag_IDLE>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d004      	beq.n	800224e <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8002244:	f000 fe48 	bl	8002ed8 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <USART2_IRQHandler+0x20>)
 800224a:	f7ff ff20 	bl	800208e <LL_USART_ClearFlag_IDLE>
	}
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40004400 	.word	0x40004400

08002258 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800225c:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <SystemInit+0x84>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	4a1e      	ldr	r2, [pc, #120]	; (80022dc <SystemInit+0x84>)
 8002264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800226c:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <SystemInit+0x88>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1b      	ldr	r2, [pc, #108]	; (80022e0 <SystemInit+0x88>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002278:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <SystemInit+0x88>)
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4918      	ldr	r1, [pc, #96]	; (80022e0 <SystemInit+0x88>)
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <SystemInit+0x8c>)
 8002280:	4013      	ands	r3, r2
 8002282:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002284:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <SystemInit+0x88>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <SystemInit+0x88>)
 800228a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800228e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002292:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <SystemInit+0x88>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a11      	ldr	r2, [pc, #68]	; (80022e0 <SystemInit+0x88>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <SystemInit+0x88>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <SystemInit+0x88>)
 80022a6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80022aa:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <SystemInit+0x88>)
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <SystemInit+0x88>)
 80022b2:	f023 030f 	bic.w	r3, r3, #15
 80022b6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <SystemInit+0x88>)
 80022ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022bc:	4908      	ldr	r1, [pc, #32]	; (80022e0 <SystemInit+0x88>)
 80022be:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <SystemInit+0x90>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <SystemInit+0x88>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <SystemInit+0x84>)
 80022cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022d0:	609a      	str	r2, [r3, #8]
#endif
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000ed00 	.word	0xe000ed00
 80022e0:	40021000 	.word	0x40021000
 80022e4:	f87fc00c 	.word	0xf87fc00c
 80022e8:	ff00fccc 	.word	0xff00fccc

080022ec <NVIC_GetPriorityGrouping>:
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <NVIC_GetPriorityGrouping+0x18>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	f003 0307 	and.w	r3, r3, #7
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <NVIC_EnableIRQ>:
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	f003 021f 	and.w	r2, r3, #31
 8002318:	4907      	ldr	r1, [pc, #28]	; (8002338 <NVIC_EnableIRQ+0x30>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	2001      	movs	r0, #1
 8002322:	fa00 f202 	lsl.w	r2, r0, r2
 8002326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000e100 	.word	0xe000e100

0800233c <NVIC_SetPriority>:
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	6039      	str	r1, [r7, #0]
 8002346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	2b00      	cmp	r3, #0
 800234e:	da0b      	bge.n	8002368 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	b2da      	uxtb	r2, r3
 8002354:	490c      	ldr	r1, [pc, #48]	; (8002388 <NVIC_SetPriority+0x4c>)
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	3b04      	subs	r3, #4
 800235e:	0112      	lsls	r2, r2, #4
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	440b      	add	r3, r1
 8002364:	761a      	strb	r2, [r3, #24]
}
 8002366:	e009      	b.n	800237c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	b2da      	uxtb	r2, r3
 800236c:	4907      	ldr	r1, [pc, #28]	; (800238c <NVIC_SetPriority+0x50>)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	0112      	lsls	r2, r2, #4
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	440b      	add	r3, r1
 8002378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00
 800238c:	e000e100 	.word	0xe000e100

08002390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f1c3 0307 	rsb	r3, r3, #7
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	bf28      	it	cs
 80023ae:	2304      	movcs	r3, #4
 80023b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d902      	bls.n	80023c0 <NVIC_EncodePriority+0x30>
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3b03      	subs	r3, #3
 80023be:	e000      	b.n	80023c2 <NVIC_EncodePriority+0x32>
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	f04f 32ff 	mov.w	r2, #4294967295
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43da      	mvns	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	401a      	ands	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d8:	f04f 31ff 	mov.w	r1, #4294967295
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	43d9      	mvns	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e8:	4313      	orrs	r3, r2
         );
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3724      	adds	r7, #36	; 0x24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <LL_APB1_GRP1_EnableClock>:
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	4907      	ldr	r1, [pc, #28]	; (8002424 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4313      	orrs	r3, r2
 800240a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <LL_APB1_GRP1_EnableClock+0x2c>)
 800240e:	69da      	ldr	r2, [r3, #28]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4013      	ands	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002416:	68fb      	ldr	r3, [r7, #12]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	40021000 	.word	0x40021000

08002428 <LL_TIM_EnableCounter>:
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	601a      	str	r2, [r3, #0]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_TIM_EnableARRPreload>:
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	601a      	str	r2, [r3, #0]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_TIM_OC_DisableFast>:
{
 8002468:	b4b0      	push	{r4, r5, r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d028      	beq.n	80024ca <LL_TIM_OC_DisableFast+0x62>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	2b04      	cmp	r3, #4
 800247c:	d023      	beq.n	80024c6 <LL_TIM_OC_DisableFast+0x5e>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b10      	cmp	r3, #16
 8002482:	d01e      	beq.n	80024c2 <LL_TIM_OC_DisableFast+0x5a>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b40      	cmp	r3, #64	; 0x40
 8002488:	d019      	beq.n	80024be <LL_TIM_OC_DisableFast+0x56>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002490:	d013      	beq.n	80024ba <LL_TIM_OC_DisableFast+0x52>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002498:	d00d      	beq.n	80024b6 <LL_TIM_OC_DisableFast+0x4e>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a0:	d007      	beq.n	80024b2 <LL_TIM_OC_DisableFast+0x4a>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a8:	d101      	bne.n	80024ae <LL_TIM_OC_DisableFast+0x46>
 80024aa:	2307      	movs	r3, #7
 80024ac:	e00e      	b.n	80024cc <LL_TIM_OC_DisableFast+0x64>
 80024ae:	2308      	movs	r3, #8
 80024b0:	e00c      	b.n	80024cc <LL_TIM_OC_DisableFast+0x64>
 80024b2:	2306      	movs	r3, #6
 80024b4:	e00a      	b.n	80024cc <LL_TIM_OC_DisableFast+0x64>
 80024b6:	2305      	movs	r3, #5
 80024b8:	e008      	b.n	80024cc <LL_TIM_OC_DisableFast+0x64>
 80024ba:	2304      	movs	r3, #4
 80024bc:	e006      	b.n	80024cc <LL_TIM_OC_DisableFast+0x64>
 80024be:	2303      	movs	r3, #3
 80024c0:	e004      	b.n	80024cc <LL_TIM_OC_DisableFast+0x64>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e002      	b.n	80024cc <LL_TIM_OC_DisableFast+0x64>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <LL_TIM_OC_DisableFast+0x64>
 80024ca:	2300      	movs	r3, #0
 80024cc:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3318      	adds	r3, #24
 80024d2:	461a      	mov	r2, r3
 80024d4:	4629      	mov	r1, r5
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <LL_TIM_OC_DisableFast+0x94>)
 80024d8:	5c5b      	ldrb	r3, [r3, r1]
 80024da:	4413      	add	r3, r2
 80024dc:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80024de:	6822      	ldr	r2, [r4, #0]
 80024e0:	4629      	mov	r1, r5
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <LL_TIM_OC_DisableFast+0x98>)
 80024e4:	5c5b      	ldrb	r3, [r3, r1]
 80024e6:	4619      	mov	r1, r3
 80024e8:	2304      	movs	r3, #4
 80024ea:	408b      	lsls	r3, r1
 80024ec:	43db      	mvns	r3, r3
 80024ee:	4013      	ands	r3, r2
 80024f0:	6023      	str	r3, [r4, #0]
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bcb0      	pop	{r4, r5, r7}
 80024fa:	4770      	bx	lr
 80024fc:	0800306c 	.word	0x0800306c
 8002500:	08003078 	.word	0x08003078

08002504 <LL_TIM_SetClockSource>:
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002516:	f023 0307 	bic.w	r3, r3, #7
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	609a      	str	r2, [r3, #8]
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LL_TIM_SetTriggerOutput>:
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	605a      	str	r2, [r3, #4]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_TIM_DisableMasterSlaveMode>:
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_TIM_EnableIT_UPDATE>:
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f043 0201 	orr.w	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	60da      	str	r2, [r3, #12]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08e      	sub	sp, #56	; 0x38
 8002598:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800259a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]
 80025a8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	2220      	movs	r2, #32
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fd37 	bl	8003024 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80025b6:	2002      	movs	r0, #2
 80025b8:	f7ff ff1e 	bl	80023f8 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80025bc:	f7ff fe96 	bl	80022ec <NVIC_GetPriorityGrouping>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2200      	movs	r2, #0
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fee2 	bl	8002390 <NVIC_EncodePriority>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4619      	mov	r1, r3
 80025d0:	201d      	movs	r0, #29
 80025d2:	f7ff feb3 	bl	800233c <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80025d6:	201d      	movs	r0, #29
 80025d8:	f7ff fe96 	bl	8002308 <NVIC_EnableIRQ>

  //TIM3 clock = 8MHz
  TIM_InitStruct.Prescaler = 7999; 								//1kHz
 80025dc:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80025e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80025e2:	2300      	movs	r3, #0
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 499;								//500ms
 80025e6:	f240 13f3 	movw	r3, #499	; 0x1f3
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80025ec:	2300      	movs	r3, #0
 80025ee:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80025f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f4:	4619      	mov	r1, r3
 80025f6:	4817      	ldr	r0, [pc, #92]	; (8002654 <MX_TIM3_Init+0xc0>)
 80025f8:	f7fe fa68 	bl	8000acc <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_EnableARRPreload(TIM3);
 80025fc:	4815      	ldr	r0, [pc, #84]	; (8002654 <MX_TIM3_Init+0xc0>)
 80025fe:	f7ff ff23 	bl	8002448 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002602:	2100      	movs	r1, #0
 8002604:	4813      	ldr	r0, [pc, #76]	; (8002654 <MX_TIM3_Init+0xc0>)
 8002606:	f7ff ff7d 	bl	8002504 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 800260a:	2310      	movs	r3, #16
 800260c:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	461a      	mov	r2, r3
 8002622:	2101      	movs	r1, #1
 8002624:	480b      	ldr	r0, [pc, #44]	; (8002654 <MX_TIM3_Init+0xc0>)
 8002626:	f7fe fac5 	bl	8000bb4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 800262a:	2101      	movs	r1, #1
 800262c:	4809      	ldr	r0, [pc, #36]	; (8002654 <MX_TIM3_Init+0xc0>)
 800262e:	f7ff ff1b 	bl	8002468 <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002632:	2100      	movs	r1, #0
 8002634:	4807      	ldr	r0, [pc, #28]	; (8002654 <MX_TIM3_Init+0xc0>)
 8002636:	f7ff ff7a 	bl	800252e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800263a:	4806      	ldr	r0, [pc, #24]	; (8002654 <MX_TIM3_Init+0xc0>)
 800263c:	f7ff ff8a 	bl	8002554 <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM3);
 8002640:	4804      	ldr	r0, [pc, #16]	; (8002654 <MX_TIM3_Init+0xc0>)
 8002642:	f7ff ff97 	bl	8002574 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8002646:	4803      	ldr	r0, [pc, #12]	; (8002654 <MX_TIM3_Init+0xc0>)
 8002648:	f7ff feee 	bl	8002428 <LL_TIM_EnableCounter>

}
 800264c:	bf00      	nop
 800264e:	3738      	adds	r7, #56	; 0x38
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40000400 	.word	0x40000400

08002658 <NVIC_EnableIRQ>:
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4907      	ldr	r1, [pc, #28]	; (8002688 <NVIC_EnableIRQ+0x30>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2001      	movs	r0, #1
 8002672:	fa00 f202 	lsl.w	r2, r0, r2
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000e100 	.word	0xe000e100

0800268c <NVIC_SetPriority>:
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	da0b      	bge.n	80026b8 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	490c      	ldr	r1, [pc, #48]	; (80026d8 <NVIC_SetPriority+0x4c>)
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	f003 030f 	and.w	r3, r3, #15
 80026ac:	3b04      	subs	r3, #4
 80026ae:	0112      	lsls	r2, r2, #4
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	440b      	add	r3, r1
 80026b4:	761a      	strb	r2, [r3, #24]
}
 80026b6:	e009      	b.n	80026cc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	4907      	ldr	r1, [pc, #28]	; (80026dc <NVIC_SetPriority+0x50>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	440b      	add	r3, r1
 80026c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00
 80026dc:	e000e100 	.word	0xe000e100

080026e0 <LL_AHB1_GRP1_EnableClock>:
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	4907      	ldr	r1, [pc, #28]	; (800270c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4013      	ands	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40021000 	.word	0x40021000

08002710 <LL_APB1_GRP1_EnableClock>:
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <LL_APB1_GRP1_EnableClock+0x2c>)
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	4907      	ldr	r1, [pc, #28]	; (800273c <LL_APB1_GRP1_EnableClock+0x2c>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4313      	orrs	r3, r2
 8002722:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4013      	ands	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800272e:	68fb      	ldr	r3, [r7, #12]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	40021000 	.word	0x40021000

08002740 <LL_DMA_EnableChannel>:
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	3b01      	subs	r3, #1
 800274e:	4a0b      	ldr	r2, [pc, #44]	; (800277c <LL_DMA_EnableChannel+0x3c>)
 8002750:	5cd3      	ldrb	r3, [r2, r3]
 8002752:	461a      	mov	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4413      	add	r3, r2
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	3a01      	subs	r2, #1
 800275e:	4907      	ldr	r1, [pc, #28]	; (800277c <LL_DMA_EnableChannel+0x3c>)
 8002760:	5c8a      	ldrb	r2, [r1, r2]
 8002762:	4611      	mov	r1, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	440a      	add	r2, r1
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6013      	str	r3, [r2, #0]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	08003084 	.word	0x08003084

08002780 <LL_DMA_SetDataTransferDirection>:
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	3b01      	subs	r3, #1
 8002790:	4a0d      	ldr	r2, [pc, #52]	; (80027c8 <LL_DMA_SetDataTransferDirection+0x48>)
 8002792:	5cd3      	ldrb	r3, [r2, r3]
 8002794:	461a      	mov	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4413      	add	r3, r2
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027a0:	f023 0310 	bic.w	r3, r3, #16
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	3a01      	subs	r2, #1
 80027a8:	4907      	ldr	r1, [pc, #28]	; (80027c8 <LL_DMA_SetDataTransferDirection+0x48>)
 80027aa:	5c8a      	ldrb	r2, [r1, r2]
 80027ac:	4611      	mov	r1, r2
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	440a      	add	r2, r1
 80027b2:	4611      	mov	r1, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]
}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	08003084 	.word	0x08003084

080027cc <LL_DMA_GetDataTransferDirection>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	3b01      	subs	r3, #1
 80027da:	4a07      	ldr	r2, [pc, #28]	; (80027f8 <LL_DMA_GetDataTransferDirection+0x2c>)
 80027dc:	5cd3      	ldrb	r3, [r2, r3]
 80027de:	461a      	mov	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4413      	add	r3, r2
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	f244 0310 	movw	r3, #16400	; 0x4010
 80027ea:	4013      	ands	r3, r2
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	08003084 	.word	0x08003084

080027fc <LL_DMA_SetMode>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	3b01      	subs	r3, #1
 800280c:	4a0c      	ldr	r2, [pc, #48]	; (8002840 <LL_DMA_SetMode+0x44>)
 800280e:	5cd3      	ldrb	r3, [r2, r3]
 8002810:	461a      	mov	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4413      	add	r3, r2
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 0220 	bic.w	r2, r3, #32
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	3b01      	subs	r3, #1
 8002820:	4907      	ldr	r1, [pc, #28]	; (8002840 <LL_DMA_SetMode+0x44>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	4619      	mov	r1, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	440b      	add	r3, r1
 800282a:	4619      	mov	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]
}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	08003084 	.word	0x08003084

08002844 <LL_DMA_SetPeriphIncMode>:
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	3b01      	subs	r3, #1
 8002854:	4a0c      	ldr	r2, [pc, #48]	; (8002888 <LL_DMA_SetPeriphIncMode+0x44>)
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	461a      	mov	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4413      	add	r3, r2
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	3b01      	subs	r3, #1
 8002868:	4907      	ldr	r1, [pc, #28]	; (8002888 <LL_DMA_SetPeriphIncMode+0x44>)
 800286a:	5ccb      	ldrb	r3, [r1, r3]
 800286c:	4619      	mov	r1, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	440b      	add	r3, r1
 8002872:	4619      	mov	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	08003084 	.word	0x08003084

0800288c <LL_DMA_SetMemoryIncMode>:
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	3b01      	subs	r3, #1
 800289c:	4a0c      	ldr	r2, [pc, #48]	; (80028d0 <LL_DMA_SetMemoryIncMode+0x44>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	461a      	mov	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4413      	add	r3, r2
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	4907      	ldr	r1, [pc, #28]	; (80028d0 <LL_DMA_SetMemoryIncMode+0x44>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	4619      	mov	r1, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	440b      	add	r3, r1
 80028ba:	4619      	mov	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
}
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	08003084 	.word	0x08003084

080028d4 <LL_DMA_SetPeriphSize>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	4a0c      	ldr	r2, [pc, #48]	; (8002918 <LL_DMA_SetPeriphSize+0x44>)
 80028e6:	5cd3      	ldrb	r3, [r2, r3]
 80028e8:	461a      	mov	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4413      	add	r3, r2
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	4907      	ldr	r1, [pc, #28]	; (8002918 <LL_DMA_SetPeriphSize+0x44>)
 80028fa:	5ccb      	ldrb	r3, [r1, r3]
 80028fc:	4619      	mov	r1, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	440b      	add	r3, r1
 8002902:	4619      	mov	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
}
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	08003084 	.word	0x08003084

0800291c <LL_DMA_SetMemorySize>:
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	3b01      	subs	r3, #1
 800292c:	4a0c      	ldr	r2, [pc, #48]	; (8002960 <LL_DMA_SetMemorySize+0x44>)
 800292e:	5cd3      	ldrb	r3, [r2, r3]
 8002930:	461a      	mov	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4413      	add	r3, r2
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	3b01      	subs	r3, #1
 8002940:	4907      	ldr	r1, [pc, #28]	; (8002960 <LL_DMA_SetMemorySize+0x44>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	4619      	mov	r1, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	440b      	add	r3, r1
 800294a:	4619      	mov	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
}
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	08003084 	.word	0x08003084

08002964 <LL_DMA_SetChannelPriorityLevel>:
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	3b01      	subs	r3, #1
 8002974:	4a0c      	ldr	r2, [pc, #48]	; (80029a8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002976:	5cd3      	ldrb	r3, [r2, r3]
 8002978:	461a      	mov	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4413      	add	r3, r2
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	3b01      	subs	r3, #1
 8002988:	4907      	ldr	r1, [pc, #28]	; (80029a8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800298a:	5ccb      	ldrb	r3, [r1, r3]
 800298c:	4619      	mov	r1, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	440b      	add	r3, r1
 8002992:	4619      	mov	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4313      	orrs	r3, r2
 8002998:	600b      	str	r3, [r1, #0]
}
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	08003084 	.word	0x08003084

080029ac <LL_DMA_SetDataLength>:
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	4a0c      	ldr	r2, [pc, #48]	; (80029f0 <LL_DMA_SetDataLength+0x44>)
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	461a      	mov	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4413      	add	r3, r2
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	0c1b      	lsrs	r3, r3, #16
 80029ca:	041b      	lsls	r3, r3, #16
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	3a01      	subs	r2, #1
 80029d0:	4907      	ldr	r1, [pc, #28]	; (80029f0 <LL_DMA_SetDataLength+0x44>)
 80029d2:	5c8a      	ldrb	r2, [r1, r2]
 80029d4:	4611      	mov	r1, r2
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	440a      	add	r2, r1
 80029da:	4611      	mov	r1, r2
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	4313      	orrs	r3, r2
 80029e0:	604b      	str	r3, [r1, #4]
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	08003084 	.word	0x08003084

080029f4 <LL_DMA_GetDataLength>:
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	4a06      	ldr	r2, [pc, #24]	; (8002a1c <LL_DMA_GetDataLength+0x28>)
 8002a04:	5cd3      	ldrb	r3, [r2, r3]
 8002a06:	461a      	mov	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	b29b      	uxth	r3, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	08003084 	.word	0x08003084

08002a20 <LL_DMA_ConfigAddresses>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	d114      	bne.n	8002a5e <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	4a16      	ldr	r2, [pc, #88]	; (8002a94 <LL_DMA_ConfigAddresses+0x74>)
 8002a3a:	5cd3      	ldrb	r3, [r2, r3]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4413      	add	r3, r2
 8002a42:	461a      	mov	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	4a11      	ldr	r2, [pc, #68]	; (8002a94 <LL_DMA_ConfigAddresses+0x74>)
 8002a4e:	5cd3      	ldrb	r3, [r2, r3]
 8002a50:	461a      	mov	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4413      	add	r3, r2
 8002a56:	461a      	mov	r2, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	6093      	str	r3, [r2, #8]
}
 8002a5c:	e013      	b.n	8002a86 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	3b01      	subs	r3, #1
 8002a62:	4a0c      	ldr	r2, [pc, #48]	; (8002a94 <LL_DMA_ConfigAddresses+0x74>)
 8002a64:	5cd3      	ldrb	r3, [r2, r3]
 8002a66:	461a      	mov	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	4a07      	ldr	r2, [pc, #28]	; (8002a94 <LL_DMA_ConfigAddresses+0x74>)
 8002a78:	5cd3      	ldrb	r3, [r2, r3]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4413      	add	r3, r2
 8002a80:	461a      	mov	r2, r3
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	60d3      	str	r3, [r2, #12]
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	08003084 	.word	0x08003084

08002a98 <LL_DMA_SetMemoryAddress>:
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	4a06      	ldr	r2, [pc, #24]	; (8002ac4 <LL_DMA_SetMemoryAddress+0x2c>)
 8002aaa:	5cd3      	ldrb	r3, [r2, r3]
 8002aac:	461a      	mov	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	60d3      	str	r3, [r2, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	08003084 	.word	0x08003084

08002ac8 <LL_DMA_SetPeriphAddress>:
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	4a06      	ldr	r2, [pc, #24]	; (8002af4 <LL_DMA_SetPeriphAddress+0x2c>)
 8002ada:	5cd3      	ldrb	r3, [r2, r3]
 8002adc:	461a      	mov	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6093      	str	r3, [r2, #8]
}
 8002ae8:	bf00      	nop
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	08003084 	.word	0x08003084

08002af8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	4a0b      	ldr	r2, [pc, #44]	; (8002b34 <LL_DMA_EnableIT_TC+0x3c>)
 8002b08:	5cd3      	ldrb	r3, [r2, r3]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4413      	add	r3, r2
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	3a01      	subs	r2, #1
 8002b16:	4907      	ldr	r1, [pc, #28]	; (8002b34 <LL_DMA_EnableIT_TC+0x3c>)
 8002b18:	5c8a      	ldrb	r2, [r1, r2]
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	440a      	add	r2, r1
 8002b20:	f043 0302 	orr.w	r3, r3, #2
 8002b24:	6013      	str	r3, [r2, #0]
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	08003084 	.word	0x08003084

08002b38 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	4a0b      	ldr	r2, [pc, #44]	; (8002b74 <LL_DMA_EnableIT_HT+0x3c>)
 8002b48:	5cd3      	ldrb	r3, [r2, r3]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	3a01      	subs	r2, #1
 8002b56:	4907      	ldr	r1, [pc, #28]	; (8002b74 <LL_DMA_EnableIT_HT+0x3c>)
 8002b58:	5c8a      	ldrb	r2, [r1, r2]
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	440a      	add	r2, r1
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	6013      	str	r3, [r2, #0]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	08003084 	.word	0x08003084

08002b78 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	4a0b      	ldr	r2, [pc, #44]	; (8002bb4 <LL_DMA_EnableIT_TE+0x3c>)
 8002b88:	5cd3      	ldrb	r3, [r2, r3]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4413      	add	r3, r2
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	3a01      	subs	r2, #1
 8002b96:	4907      	ldr	r1, [pc, #28]	; (8002bb4 <LL_DMA_EnableIT_TE+0x3c>)
 8002b98:	5c8a      	ldrb	r2, [r1, r2]
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	440a      	add	r2, r1
 8002ba0:	f043 0308 	orr.w	r3, r3, #8
 8002ba4:	6013      	str	r3, [r2, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	08003084 	.word	0x08003084

08002bb8 <LL_USART_Enable>:
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f043 0201 	orr.w	r2, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	601a      	str	r2, [r3, #0]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <LL_USART_ConfigAsyncMode>:
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f043 0210 	orr.w	r2, r3, #16
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	601a      	str	r2, [r3, #0]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	609a      	str	r2, [r3, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	609a      	str	r2, [r3, #8]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	609a      	str	r2, [r3, #8]
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8002c84:	b490      	push	{r4, r7}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 8002c8e:	2400      	movs	r4, #0

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d103      	bne.n	8002c9e <LL_USART_DMA_GetRegAddr+0x1a>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3328      	adds	r3, #40	; 0x28
 8002c9a:	461c      	mov	r4, r3
 8002c9c:	e002      	b.n	8002ca4 <LL_USART_DMA_GetRegAddr+0x20>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3324      	adds	r3, #36	; 0x24
 8002ca2:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 8002ca4:	4623      	mov	r3, r4
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc90      	pop	{r4, r7}
 8002cae:	4770      	bx	lr

08002cb0 <USART2_RegisterCallback>:
uint8_t bufferUSART2dma[DMA_USART2_BUFFER_SIZE];

static void (* USART2_ProcessData)(const uint8_t* data, uint16_t len) = 0;

void USART2_RegisterCallback(void *callback)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a03      	ldr	r2, [pc, #12]	; (8002cd0 <USART2_RegisterCallback+0x20>)
 8002cc2:	6013      	str	r3, [r2, #0]
	}
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	20000034 	.word	0x20000034

08002cd4 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002cd4:	b5b0      	push	{r4, r5, r7, lr}
 8002cd6:	b090      	sub	sp, #64	; 0x40
 8002cd8:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002cda:	f107 031c 	add.w	r3, r7, #28
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	60da      	str	r2, [r3, #12]
 8002ce8:	611a      	str	r2, [r3, #16]
 8002cea:	615a      	str	r2, [r3, #20]
 8002cec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
 8002cfc:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002cfe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002d02:	f7ff fd05 	bl	8002710 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002d06:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002d0a:	f7ff fce9 	bl	80026e0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002d0e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002d12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002d14:	2302      	movs	r3, #2
 8002d16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002d24:	2307      	movs	r3, #7
 8002d26:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d30:	f7fd fc1b 	bl	800056a <LL_GPIO_Init>

  /* USART2 DMA Init */
  
  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002d34:	2200      	movs	r2, #0
 8002d36:	2106      	movs	r1, #6
 8002d38:	4854      	ldr	r0, [pc, #336]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002d3a:	f7ff fd21 	bl	8002780 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8002d3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d42:	2106      	movs	r1, #6
 8002d44:	4851      	ldr	r0, [pc, #324]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002d46:	f7ff fe0d 	bl	8002964 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2106      	movs	r1, #6
 8002d4e:	484f      	ldr	r0, [pc, #316]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002d50:	f7ff fd54 	bl	80027fc <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002d54:	2200      	movs	r2, #0
 8002d56:	2106      	movs	r1, #6
 8002d58:	484c      	ldr	r0, [pc, #304]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002d5a:	f7ff fd73 	bl	8002844 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8002d5e:	2280      	movs	r2, #128	; 0x80
 8002d60:	2106      	movs	r1, #6
 8002d62:	484a      	ldr	r0, [pc, #296]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002d64:	f7ff fd92 	bl	800288c <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2106      	movs	r1, #6
 8002d6c:	4847      	ldr	r0, [pc, #284]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002d6e:	f7ff fdb1 	bl	80028d4 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2106      	movs	r1, #6
 8002d76:	4845      	ldr	r0, [pc, #276]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002d78:	f7ff fdd0 	bl	800291c <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4844      	ldr	r0, [pc, #272]	; (8002e90 <MX_USART2_UART_Init+0x1bc>)
 8002d80:	f7ff ff80 	bl	8002c84 <LL_USART_DMA_GetRegAddr>
 8002d84:	4604      	mov	r4, r0
 8002d86:	4d43      	ldr	r5, [pc, #268]	; (8002e94 <MX_USART2_UART_Init+0x1c0>)
 8002d88:	2106      	movs	r1, #6
 8002d8a:	4840      	ldr	r0, [pc, #256]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002d8c:	f7ff fd1e 	bl	80027cc <LL_DMA_GetDataTransferDirection>
 8002d90:	4603      	mov	r3, r0
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	462b      	mov	r3, r5
 8002d96:	4622      	mov	r2, r4
 8002d98:	2106      	movs	r1, #6
 8002d9a:	483c      	ldr	r0, [pc, #240]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002d9c:	f7ff fe40 	bl	8002a20 <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART2dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002da0:	2214      	movs	r2, #20
 8002da2:	2106      	movs	r1, #6
 8002da4:	4839      	ldr	r0, [pc, #228]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002da6:	f7ff fe01 	bl	80029ac <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002daa:	2106      	movs	r1, #6
 8002dac:	4837      	ldr	r0, [pc, #220]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002dae:	f7ff fcc7 	bl	8002740 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8002db2:	4837      	ldr	r0, [pc, #220]	; (8002e90 <MX_USART2_UART_Init+0x1bc>)
 8002db4:	f7ff ff46 	bl	8002c44 <LL_USART_EnableDMAReq_RX>

#if !POLLING
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8002db8:	2106      	movs	r1, #6
 8002dba:	4834      	ldr	r0, [pc, #208]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002dbc:	f7ff fe9c 	bl	8002af8 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8002dc0:	2106      	movs	r1, #6
 8002dc2:	4832      	ldr	r0, [pc, #200]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002dc4:	f7ff feb8 	bl	8002b38 <LL_DMA_EnableIT_HT>
#endif

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002dc8:	2210      	movs	r2, #16
 8002dca:	2107      	movs	r1, #7
 8002dcc:	482f      	ldr	r0, [pc, #188]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002dce:	f7ff fcd7 	bl	8002780 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8002dd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dd6:	2107      	movs	r1, #7
 8002dd8:	482c      	ldr	r0, [pc, #176]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002dda:	f7ff fdc3 	bl	8002964 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2107      	movs	r1, #7
 8002de2:	482a      	ldr	r0, [pc, #168]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002de4:	f7ff fd0a 	bl	80027fc <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002de8:	2200      	movs	r2, #0
 8002dea:	2107      	movs	r1, #7
 8002dec:	4827      	ldr	r0, [pc, #156]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002dee:	f7ff fd29 	bl	8002844 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8002df2:	2280      	movs	r2, #128	; 0x80
 8002df4:	2107      	movs	r1, #7
 8002df6:	4825      	ldr	r0, [pc, #148]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002df8:	f7ff fd48 	bl	800288c <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2107      	movs	r1, #7
 8002e00:	4822      	ldr	r0, [pc, #136]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002e02:	f7ff fd67 	bl	80028d4 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2107      	movs	r1, #7
 8002e0a:	4820      	ldr	r0, [pc, #128]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002e0c:	f7ff fd86 	bl	800291c <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002e10:	2100      	movs	r1, #0
 8002e12:	481f      	ldr	r0, [pc, #124]	; (8002e90 <MX_USART2_UART_Init+0x1bc>)
 8002e14:	f7ff ff36 	bl	8002c84 <LL_USART_DMA_GetRegAddr>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2107      	movs	r1, #7
 8002e1e:	481b      	ldr	r0, [pc, #108]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002e20:	f7ff fe52 	bl	8002ac8 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8002e24:	481a      	ldr	r0, [pc, #104]	; (8002e90 <MX_USART2_UART_Init+0x1bc>)
 8002e26:	f7ff ff1d 	bl	8002c64 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8002e2a:	2107      	movs	r1, #7
 8002e2c:	4817      	ldr	r0, [pc, #92]	; (8002e8c <MX_USART2_UART_Init+0x1b8>)
 8002e2e:	f7ff fea3 	bl	8002b78 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002e32:	2100      	movs	r1, #0
 8002e34:	2026      	movs	r0, #38	; 0x26
 8002e36:	f7ff fc29 	bl	800268c <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002e3a:	2026      	movs	r0, #38	; 0x26
 8002e3c:	f7ff fc0c 	bl	8002658 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8002e40:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002e44:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002e46:	2300      	movs	r3, #0
 8002e48:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002e52:	230c      	movs	r3, #12
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002e5e:	f107 031c 	add.w	r3, r7, #28
 8002e62:	4619      	mov	r1, r3
 8002e64:	480a      	ldr	r0, [pc, #40]	; (8002e90 <MX_USART2_UART_Init+0x1bc>)
 8002e66:	f7fe fa29 	bl	80012bc <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8002e6a:	4809      	ldr	r0, [pc, #36]	; (8002e90 <MX_USART2_UART_Init+0x1bc>)
 8002e6c:	f7ff feda 	bl	8002c24 <LL_USART_DisableIT_CTS>
#if !POLLING
  LL_USART_EnableIT_IDLE(USART2);
 8002e70:	4807      	ldr	r0, [pc, #28]	; (8002e90 <MX_USART2_UART_Init+0x1bc>)
 8002e72:	f7ff fec7 	bl	8002c04 <LL_USART_EnableIT_IDLE>
#endif
  LL_USART_ConfigAsyncMode(USART2);
 8002e76:	4806      	ldr	r0, [pc, #24]	; (8002e90 <MX_USART2_UART_Init+0x1bc>)
 8002e78:	f7ff feae 	bl	8002bd8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002e7c:	4804      	ldr	r0, [pc, #16]	; (8002e90 <MX_USART2_UART_Init+0x1bc>)
 8002e7e:	f7ff fe9b 	bl	8002bb8 <LL_USART_Enable>
}
 8002e82:	bf00      	nop
 8002e84:	3738      	adds	r7, #56	; 0x38
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bdb0      	pop	{r4, r5, r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40020000 	.word	0x40020000
 8002e90:	40004400 	.word	0x40004400
 8002e94:	2000003c 	.word	0x2000003c

08002e98 <USART2_PutBuffer>:


void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	2107      	movs	r1, #7
 8002eaa:	480a      	ldr	r0, [pc, #40]	; (8002ed4 <USART2_PutBuffer+0x3c>)
 8002eac:	f7ff fdf4 	bl	8002a98 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2107      	movs	r1, #7
 8002eb6:	4807      	ldr	r0, [pc, #28]	; (8002ed4 <USART2_PutBuffer+0x3c>)
 8002eb8:	f7ff fd78 	bl	80029ac <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8002ebc:	2107      	movs	r1, #7
 8002ebe:	4805      	ldr	r0, [pc, #20]	; (8002ed4 <USART2_PutBuffer+0x3c>)
 8002ec0:	f7ff fe1a 	bl	8002af8 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002ec4:	2107      	movs	r1, #7
 8002ec6:	4803      	ldr	r0, [pc, #12]	; (8002ed4 <USART2_PutBuffer+0x3c>)
 8002ec8:	f7ff fc3a 	bl	8002740 <LL_DMA_EnableChannel>
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40020000 	.word	0x40020000

08002ed8 <USART2_CheckDmaReception>:


void USART2_CheckDmaReception(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
	if(USART2_ProcessData == 0) return;
 8002ede:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <USART2_CheckDmaReception+0xa0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d043      	beq.n	8002f6e <USART2_CheckDmaReception+0x96>

	static uint16_t old_pos = 0;

	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8002ee6:	2106      	movs	r1, #6
 8002ee8:	4824      	ldr	r0, [pc, #144]	; (8002f7c <USART2_CheckDmaReception+0xa4>)
 8002eea:	f7ff fd83 	bl	80029f4 <LL_DMA_GetDataLength>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	f1c3 0314 	rsb	r3, r3, #20
 8002ef6:	80fb      	strh	r3, [r7, #6]

	if (pos != old_pos)
 8002ef8:	4b21      	ldr	r3, [pc, #132]	; (8002f80 <USART2_CheckDmaReception+0xa8>)
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	88fa      	ldrh	r2, [r7, #6]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d02a      	beq.n	8002f58 <USART2_CheckDmaReception+0x80>
	{
		if (pos > old_pos)
 8002f02:	4b1f      	ldr	r3, [pc, #124]	; (8002f80 <USART2_CheckDmaReception+0xa8>)
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	88fa      	ldrh	r2, [r7, #6]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d90e      	bls.n	8002f2a <USART2_CheckDmaReception+0x52>
		{
			USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <USART2_CheckDmaReception+0xa0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a1b      	ldr	r2, [pc, #108]	; (8002f80 <USART2_CheckDmaReception+0xa8>)
 8002f12:	8812      	ldrh	r2, [r2, #0]
 8002f14:	4611      	mov	r1, r2
 8002f16:	4a1b      	ldr	r2, [pc, #108]	; (8002f84 <USART2_CheckDmaReception+0xac>)
 8002f18:	1888      	adds	r0, r1, r2
 8002f1a:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <USART2_CheckDmaReception+0xa8>)
 8002f1c:	8812      	ldrh	r2, [r2, #0]
 8002f1e:	88f9      	ldrh	r1, [r7, #6]
 8002f20:	1a8a      	subs	r2, r1, r2
 8002f22:	b292      	uxth	r2, r2
 8002f24:	4611      	mov	r1, r2
 8002f26:	4798      	blx	r3
 8002f28:	e016      	b.n	8002f58 <USART2_CheckDmaReception+0x80>
		}
		else
		{
			USART2_ProcessData(&bufferUSART2dma[old_pos], DMA_USART2_BUFFER_SIZE - old_pos);
 8002f2a:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <USART2_CheckDmaReception+0xa0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a14      	ldr	r2, [pc, #80]	; (8002f80 <USART2_CheckDmaReception+0xa8>)
 8002f30:	8812      	ldrh	r2, [r2, #0]
 8002f32:	4611      	mov	r1, r2
 8002f34:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <USART2_CheckDmaReception+0xac>)
 8002f36:	1888      	adds	r0, r1, r2
 8002f38:	4a11      	ldr	r2, [pc, #68]	; (8002f80 <USART2_CheckDmaReception+0xa8>)
 8002f3a:	8812      	ldrh	r2, [r2, #0]
 8002f3c:	f1c2 0214 	rsb	r2, r2, #20
 8002f40:	b292      	uxth	r2, r2
 8002f42:	4611      	mov	r1, r2
 8002f44:	4798      	blx	r3

			if (pos > 0)
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <USART2_CheckDmaReception+0x80>
			{
				USART2_ProcessData(&bufferUSART2dma[0], pos);
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <USART2_CheckDmaReception+0xa0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	88fa      	ldrh	r2, [r7, #6]
 8002f52:	4611      	mov	r1, r2
 8002f54:	480b      	ldr	r0, [pc, #44]	; (8002f84 <USART2_CheckDmaReception+0xac>)
 8002f56:	4798      	blx	r3
			}
		}
	}

	old_pos = pos;
 8002f58:	4a09      	ldr	r2, [pc, #36]	; (8002f80 <USART2_CheckDmaReception+0xa8>)
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	8013      	strh	r3, [r2, #0]

	if (old_pos == DMA_USART2_BUFFER_SIZE)
 8002f5e:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <USART2_CheckDmaReception+0xa8>)
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	2b14      	cmp	r3, #20
 8002f64:	d104      	bne.n	8002f70 <USART2_CheckDmaReception+0x98>
	{
		old_pos = 0;
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <USART2_CheckDmaReception+0xa8>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	801a      	strh	r2, [r3, #0]
 8002f6c:	e000      	b.n	8002f70 <USART2_CheckDmaReception+0x98>
	if(USART2_ProcessData == 0) return;
 8002f6e:	bf00      	nop
	}
}
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000034 	.word	0x20000034
 8002f7c:	40020000 	.word	0x40020000
 8002f80:	20000038 	.word	0x20000038
 8002f84:	2000003c 	.word	0x2000003c

08002f88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fc0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f8e:	e003      	b.n	8002f98 <LoopCopyDataInit>

08002f90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002f92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f96:	3104      	adds	r1, #4

08002f98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f98:	480b      	ldr	r0, [pc, #44]	; (8002fc8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002f9a:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <LoopForever+0xe>)
	adds	r2, r0, r1
 8002f9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002fa0:	d3f6      	bcc.n	8002f90 <CopyDataInit>
	ldr	r2, =_sbss
 8002fa2:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002fa4:	e002      	b.n	8002fac <LoopFillZerobss>

08002fa6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002fa6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002fa8:	f842 3b04 	str.w	r3, [r2], #4

08002fac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <LoopForever+0x16>)
	cmp	r2, r3
 8002fae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002fb0:	d3f9      	bcc.n	8002fa6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002fb2:	f7ff f951 	bl	8002258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fb6:	f000 f811 	bl	8002fdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fba:	f7fe feaf 	bl	8001d1c <main>

08002fbe <LoopForever>:

LoopForever:
    b LoopForever
 8002fbe:	e7fe      	b.n	8002fbe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fc0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002fc4:	08003194 	.word	0x08003194
	ldr	r0, =_sdata
 8002fc8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002fcc:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8002fd0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8002fd4:	20000050 	.word	0x20000050

08002fd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fd8:	e7fe      	b.n	8002fd8 <ADC1_2_IRQHandler>
	...

08002fdc <__libc_init_array>:
 8002fdc:	b570      	push	{r4, r5, r6, lr}
 8002fde:	4d0d      	ldr	r5, [pc, #52]	; (8003014 <__libc_init_array+0x38>)
 8002fe0:	4c0d      	ldr	r4, [pc, #52]	; (8003018 <__libc_init_array+0x3c>)
 8002fe2:	1b64      	subs	r4, r4, r5
 8002fe4:	10a4      	asrs	r4, r4, #2
 8002fe6:	2600      	movs	r6, #0
 8002fe8:	42a6      	cmp	r6, r4
 8002fea:	d109      	bne.n	8003000 <__libc_init_array+0x24>
 8002fec:	4d0b      	ldr	r5, [pc, #44]	; (800301c <__libc_init_array+0x40>)
 8002fee:	4c0c      	ldr	r4, [pc, #48]	; (8003020 <__libc_init_array+0x44>)
 8002ff0:	f000 f820 	bl	8003034 <_init>
 8002ff4:	1b64      	subs	r4, r4, r5
 8002ff6:	10a4      	asrs	r4, r4, #2
 8002ff8:	2600      	movs	r6, #0
 8002ffa:	42a6      	cmp	r6, r4
 8002ffc:	d105      	bne.n	800300a <__libc_init_array+0x2e>
 8002ffe:	bd70      	pop	{r4, r5, r6, pc}
 8003000:	f855 3b04 	ldr.w	r3, [r5], #4
 8003004:	4798      	blx	r3
 8003006:	3601      	adds	r6, #1
 8003008:	e7ee      	b.n	8002fe8 <__libc_init_array+0xc>
 800300a:	f855 3b04 	ldr.w	r3, [r5], #4
 800300e:	4798      	blx	r3
 8003010:	3601      	adds	r6, #1
 8003012:	e7f2      	b.n	8002ffa <__libc_init_array+0x1e>
 8003014:	0800318c 	.word	0x0800318c
 8003018:	0800318c 	.word	0x0800318c
 800301c:	0800318c 	.word	0x0800318c
 8003020:	08003190 	.word	0x08003190

08003024 <memset>:
 8003024:	4402      	add	r2, r0
 8003026:	4603      	mov	r3, r0
 8003028:	4293      	cmp	r3, r2
 800302a:	d100      	bne.n	800302e <memset+0xa>
 800302c:	4770      	bx	lr
 800302e:	f803 1b01 	strb.w	r1, [r3], #1
 8003032:	e7f9      	b.n	8003028 <memset+0x4>

08003034 <_init>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	bf00      	nop
 8003038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303a:	bc08      	pop	{r3}
 800303c:	469e      	mov	lr, r3
 800303e:	4770      	bx	lr

08003040 <_fini>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	bf00      	nop
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr
