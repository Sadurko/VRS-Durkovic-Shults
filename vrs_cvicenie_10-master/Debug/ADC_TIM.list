
ADC_TIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f84  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800315c  0800315c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800315c  0800315c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800315c  0800315c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800315c  0800315c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003160  08003160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000010  08003174  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08003174  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f2c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce3  00000000  00000000  00028f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002ac50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002b600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e18  00000000  00000000  0002bec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000073f9  00000000  00000000  00043ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008305f  00000000  00000000  0004b0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce138  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002808  00000000  00000000  000ce18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080030f4 	.word	0x080030f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080030f4 	.word	0x080030f4

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ea:	f023 020f 	bic.w	r2, r3, #15
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	431a      	orrs	r2, r3
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80001f6:	bf00      	nop
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr

08000202 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000202:	b480      	push	{r7}
 8000204:	b083      	sub	sp, #12
 8000206:	af00      	add	r7, sp, #0
 8000208:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	689b      	ldr	r3, [r3, #8]
 800020e:	f003 0301 	and.w	r3, r3, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf0c      	ite	eq
 8000216:	2301      	moveq	r3, #1
 8000218:	2300      	movne	r3, #0
 800021a:	b2db      	uxtb	r3, r3
}
 800021c:	4618      	mov	r0, r3
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr

08000228 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8000228:	b590      	push	{r4, r7, lr}
 800022a:	b085      	sub	sp, #20
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8000232:	2300      	movs	r3, #0
 8000234:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8000236:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800023a:	f7ff ffe2 	bl	8000202 <LL_ADC_IsEnabled>
 800023e:	4604      	mov	r4, r0
 8000240:	4817      	ldr	r0, [pc, #92]	; (80002a0 <LL_ADC_CommonInit+0x78>)
 8000242:	f7ff ffde 	bl	8000202 <LL_ADC_IsEnabled>
 8000246:	4603      	mov	r3, r0
 8000248:	4323      	orrs	r3, r4
 800024a:	2b00      	cmp	r3, #0
 800024c:	d120      	bne.n	8000290 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d012      	beq.n	800027c <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	689a      	ldr	r2, [r3, #8]
 800025a:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <LL_ADC_CommonInit+0x7c>)
 800025c:	4013      	ands	r3, r2
 800025e:	683a      	ldr	r2, [r7, #0]
 8000260:	6811      	ldr	r1, [r2, #0]
 8000262:	683a      	ldr	r2, [r7, #0]
 8000264:	6852      	ldr	r2, [r2, #4]
 8000266:	4311      	orrs	r1, r2
 8000268:	683a      	ldr	r2, [r7, #0]
 800026a:	6892      	ldr	r2, [r2, #8]
 800026c:	4311      	orrs	r1, r2
 800026e:	683a      	ldr	r2, [r7, #0]
 8000270:	68d2      	ldr	r2, [r2, #12]
 8000272:	430a      	orrs	r2, r1
 8000274:	431a      	orrs	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	e00b      	b.n	8000294 <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	689a      	ldr	r2, [r3, #8]
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <LL_ADC_CommonInit+0x7c>)
 8000282:	4013      	ands	r3, r2
 8000284:	683a      	ldr	r2, [r7, #0]
 8000286:	6812      	ldr	r2, [r2, #0]
 8000288:	431a      	orrs	r2, r3
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	e001      	b.n	8000294 <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8000290:	2301      	movs	r3, #1
 8000292:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8000294:	7bfb      	ldrb	r3, [r7, #15]
}
 8000296:	4618      	mov	r0, r3
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	bd90      	pop	{r4, r7, pc}
 800029e:	bf00      	nop
 80002a0:	50000100 	.word	0x50000100
 80002a4:	fffc30e0 	.word	0xfffc30e0

080002a8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80002b2:	2300      	movs	r3, #0
 80002b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f7ff ffa3 	bl	8000202 <LL_ADC_IsEnabled>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d111      	bne.n	80002e6 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80002ca:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80002ce:	683a      	ldr	r2, [r7, #0]
 80002d0:	6811      	ldr	r1, [r2, #0]
 80002d2:	683a      	ldr	r2, [r7, #0]
 80002d4:	6852      	ldr	r2, [r2, #4]
 80002d6:	4311      	orrs	r1, r2
 80002d8:	683a      	ldr	r2, [r7, #0]
 80002da:	6892      	ldr	r2, [r2, #8]
 80002dc:	430a      	orrs	r2, r1
 80002de:	431a      	orrs	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	e001      	b.n	80002ea <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80002e6:	2301      	movs	r3, #1
 80002e8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80002ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80002fe:	2300      	movs	r3, #0
 8000300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	f7ff ff7d 	bl	8000202 <LL_ADC_IsEnabled>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d132      	bne.n	8000374 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d015      	beq.n	8000342 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	68da      	ldr	r2, [r3, #12]
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <LL_ADC_REG_Init+0x90>)
 800031c:	4013      	ands	r3, r2
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	6811      	ldr	r1, [r2, #0]
 8000322:	683a      	ldr	r2, [r7, #0]
 8000324:	6892      	ldr	r2, [r2, #8]
 8000326:	4311      	orrs	r1, r2
 8000328:	683a      	ldr	r2, [r7, #0]
 800032a:	68d2      	ldr	r2, [r2, #12]
 800032c:	4311      	orrs	r1, r2
 800032e:	683a      	ldr	r2, [r7, #0]
 8000330:	6912      	ldr	r2, [r2, #16]
 8000332:	4311      	orrs	r1, r2
 8000334:	683a      	ldr	r2, [r7, #0]
 8000336:	6952      	ldr	r2, [r2, #20]
 8000338:	430a      	orrs	r2, r1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	60da      	str	r2, [r3, #12]
 8000340:	e011      	b.n	8000366 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	68da      	ldr	r2, [r3, #12]
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <LL_ADC_REG_Init+0x90>)
 8000348:	4013      	ands	r3, r2
 800034a:	683a      	ldr	r2, [r7, #0]
 800034c:	6811      	ldr	r1, [r2, #0]
 800034e:	683a      	ldr	r2, [r7, #0]
 8000350:	68d2      	ldr	r2, [r2, #12]
 8000352:	4311      	orrs	r1, r2
 8000354:	683a      	ldr	r2, [r7, #0]
 8000356:	6912      	ldr	r2, [r2, #16]
 8000358:	4311      	orrs	r1, r2
 800035a:	683a      	ldr	r2, [r7, #0]
 800035c:	6952      	ldr	r2, [r2, #20]
 800035e:	430a      	orrs	r2, r1
 8000360:	431a      	orrs	r2, r3
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	4619      	mov	r1, r3
 800036c:	6878      	ldr	r0, [r7, #4]
 800036e:	f7ff ff35 	bl	80001dc <LL_ADC_REG_SetSequencerLength>
 8000372:	e001      	b.n	8000378 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8000374:	2301      	movs	r3, #1
 8000376:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000378:	7bfb      	ldrb	r3, [r7, #15]
}
 800037a:	4618      	mov	r0, r3
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	fff0c03c 	.word	0xfff0c03c

08000388 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000388:	b480      	push	{r7}
 800038a:	b089      	sub	sp, #36	; 0x24
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	fa93 f3a3 	rbit	r3, r3
 80003a2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80003a4:	693b      	ldr	r3, [r7, #16]
 80003a6:	fab3 f383 	clz	r3, r3
 80003aa:	005b      	lsls	r3, r3, #1
 80003ac:	2103      	movs	r1, #3
 80003ae:	fa01 f303 	lsl.w	r3, r1, r3
 80003b2:	43db      	mvns	r3, r3
 80003b4:	401a      	ands	r2, r3
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	fa93 f3a3 	rbit	r3, r3
 80003c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80003c2:	69bb      	ldr	r3, [r7, #24]
 80003c4:	fab3 f383 	clz	r3, r3
 80003c8:	005b      	lsls	r3, r3, #1
 80003ca:	6879      	ldr	r1, [r7, #4]
 80003cc:	fa01 f303 	lsl.w	r3, r1, r3
 80003d0:	431a      	orrs	r2, r3
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	601a      	str	r2, [r3, #0]
}
 80003d6:	bf00      	nop
 80003d8:	3724      	adds	r7, #36	; 0x24
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr

080003e2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80003e2:	b480      	push	{r7}
 80003e4:	b085      	sub	sp, #20
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	60f8      	str	r0, [r7, #12]
 80003ea:	60b9      	str	r1, [r7, #8]
 80003ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	685a      	ldr	r2, [r3, #4]
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	43db      	mvns	r3, r3
 80003f6:	401a      	ands	r2, r3
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	6879      	ldr	r1, [r7, #4]
 80003fc:	fb01 f303 	mul.w	r3, r1, r3
 8000400:	431a      	orrs	r2, r3
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	605a      	str	r2, [r3, #4]
}
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr

08000412 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000412:	b480      	push	{r7}
 8000414:	b089      	sub	sp, #36	; 0x24
 8000416:	af00      	add	r7, sp, #0
 8000418:	60f8      	str	r0, [r7, #12]
 800041a:	60b9      	str	r1, [r7, #8]
 800041c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	689a      	ldr	r2, [r3, #8]
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	fa93 f3a3 	rbit	r3, r3
 800042c:	613b      	str	r3, [r7, #16]
  return(result);
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	fab3 f383 	clz	r3, r3
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	2103      	movs	r1, #3
 8000438:	fa01 f303 	lsl.w	r3, r1, r3
 800043c:	43db      	mvns	r3, r3
 800043e:	401a      	ands	r2, r3
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000444:	69fb      	ldr	r3, [r7, #28]
 8000446:	fa93 f3a3 	rbit	r3, r3
 800044a:	61bb      	str	r3, [r7, #24]
  return(result);
 800044c:	69bb      	ldr	r3, [r7, #24]
 800044e:	fab3 f383 	clz	r3, r3
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	6879      	ldr	r1, [r7, #4]
 8000456:	fa01 f303 	lsl.w	r3, r1, r3
 800045a:	431a      	orrs	r2, r3
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000460:	bf00      	nop
 8000462:	3724      	adds	r7, #36	; 0x24
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr

0800046c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800046c:	b480      	push	{r7}
 800046e:	b089      	sub	sp, #36	; 0x24
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	68da      	ldr	r2, [r3, #12]
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	fa93 f3a3 	rbit	r3, r3
 8000486:	613b      	str	r3, [r7, #16]
  return(result);
 8000488:	693b      	ldr	r3, [r7, #16]
 800048a:	fab3 f383 	clz	r3, r3
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	2103      	movs	r1, #3
 8000492:	fa01 f303 	lsl.w	r3, r1, r3
 8000496:	43db      	mvns	r3, r3
 8000498:	401a      	ands	r2, r3
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800049e:	69fb      	ldr	r3, [r7, #28]
 80004a0:	fa93 f3a3 	rbit	r3, r3
 80004a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80004a6:	69bb      	ldr	r3, [r7, #24]
 80004a8:	fab3 f383 	clz	r3, r3
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	6879      	ldr	r1, [r7, #4]
 80004b0:	fa01 f303 	lsl.w	r3, r1, r3
 80004b4:	431a      	orrs	r2, r3
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	60da      	str	r2, [r3, #12]
}
 80004ba:	bf00      	nop
 80004bc:	3724      	adds	r7, #36	; 0x24
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80004c6:	b480      	push	{r7}
 80004c8:	b089      	sub	sp, #36	; 0x24
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	60f8      	str	r0, [r7, #12]
 80004ce:	60b9      	str	r1, [r7, #8]
 80004d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	6a1a      	ldr	r2, [r3, #32]
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	fa93 f3a3 	rbit	r3, r3
 80004e0:	613b      	str	r3, [r7, #16]
  return(result);
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	fab3 f383 	clz	r3, r3
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	210f      	movs	r1, #15
 80004ec:	fa01 f303 	lsl.w	r3, r1, r3
 80004f0:	43db      	mvns	r3, r3
 80004f2:	401a      	ands	r2, r3
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004f8:	69fb      	ldr	r3, [r7, #28]
 80004fa:	fa93 f3a3 	rbit	r3, r3
 80004fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8000500:	69bb      	ldr	r3, [r7, #24]
 8000502:	fab3 f383 	clz	r3, r3
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	6879      	ldr	r1, [r7, #4]
 800050a:	fa01 f303 	lsl.w	r3, r1, r3
 800050e:	431a      	orrs	r2, r3
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000514:	bf00      	nop
 8000516:	3724      	adds	r7, #36	; 0x24
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000520:	b480      	push	{r7}
 8000522:	b089      	sub	sp, #36	; 0x24
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	0a1b      	lsrs	r3, r3, #8
 8000534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	fa93 f3a3 	rbit	r3, r3
 800053c:	613b      	str	r3, [r7, #16]
  return(result);
 800053e:	693b      	ldr	r3, [r7, #16]
 8000540:	fab3 f383 	clz	r3, r3
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	210f      	movs	r1, #15
 8000548:	fa01 f303 	lsl.w	r3, r1, r3
 800054c:	43db      	mvns	r3, r3
 800054e:	401a      	ands	r2, r3
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	0a1b      	lsrs	r3, r3, #8
 8000554:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	fa93 f3a3 	rbit	r3, r3
 800055c:	61bb      	str	r3, [r7, #24]
  return(result);
 800055e:	69bb      	ldr	r3, [r7, #24]
 8000560:	fab3 f383 	clz	r3, r3
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	fa01 f303 	lsl.w	r3, r1, r3
 800056c:	431a      	orrs	r2, r3
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000572:	bf00      	nop
 8000574:	3724      	adds	r7, #36	; 0x24
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	b088      	sub	sp, #32
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
 8000586:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	fa93 f3a3 	rbit	r3, r3
 800059c:	613b      	str	r3, [r7, #16]
  return(result);
 800059e:	693b      	ldr	r3, [r7, #16]
 80005a0:	fab3 f383 	clz	r3, r3
 80005a4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80005a6:	e048      	b.n	800063a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	2101      	movs	r1, #1
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	fa01 f303 	lsl.w	r3, r1, r3
 80005b4:	4013      	ands	r3, r2
 80005b6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d03a      	beq.n	8000634 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	461a      	mov	r2, r3
 80005c4:	69b9      	ldr	r1, [r7, #24]
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f7ff fede 	bl	8000388 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d003      	beq.n	80005dc <LL_GPIO_Init+0x5e>
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d106      	bne.n	80005ea <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	461a      	mov	r2, r3
 80005e2:	69b9      	ldr	r1, [r7, #24]
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff ff14 	bl	8000412 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	691b      	ldr	r3, [r3, #16]
 80005ee:	461a      	mov	r2, r3
 80005f0:	69b9      	ldr	r1, [r7, #24]
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f7ff ff3a 	bl	800046c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d119      	bne.n	8000634 <LL_GPIO_Init+0xb6>
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	fa93 f3a3 	rbit	r3, r3
 800060a:	60bb      	str	r3, [r7, #8]
  return(result);
 800060c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800060e:	fab3 f383 	clz	r3, r3
 8000612:	2b07      	cmp	r3, #7
 8000614:	d807      	bhi.n	8000626 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	461a      	mov	r2, r3
 800061c:	69b9      	ldr	r1, [r7, #24]
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f7ff ff51 	bl	80004c6 <LL_GPIO_SetAFPin_0_7>
 8000624:	e006      	b.n	8000634 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	461a      	mov	r2, r3
 800062c:	69b9      	ldr	r1, [r7, #24]
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f7ff ff76 	bl	8000520 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	3301      	adds	r3, #1
 8000638:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	fa22 f303 	lsr.w	r3, r2, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1af      	bne.n	80005a8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d003      	beq.n	8000658 <LL_GPIO_Init+0xda>
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	2b02      	cmp	r3, #2
 8000656:	d107      	bne.n	8000668 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	6819      	ldr	r1, [r3, #0]
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	461a      	mov	r2, r3
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f7ff febd 	bl	80003e2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000668:	2300      	movs	r3, #0
}
 800066a:	4618      	mov	r0, r3
 800066c:	3720      	adds	r7, #32
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <LL_RCC_HSI_IsReady+0x20>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f003 0302 	and.w	r3, r3, #2
 8000680:	2b02      	cmp	r3, #2
 8000682:	bf0c      	ite	eq
 8000684:	2301      	moveq	r3, #1
 8000686:	2300      	movne	r3, #0
 8000688:	b2db      	uxtb	r3, r3
}
 800068a:	4618      	mov	r0, r3
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	40021000 	.word	0x40021000

08000698 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <LL_RCC_LSE_IsReady+0x20>)
 800069e:	6a1b      	ldr	r3, [r3, #32]
 80006a0:	f003 0302 	and.w	r3, r3, #2
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	bf0c      	ite	eq
 80006a8:	2301      	moveq	r3, #1
 80006aa:	2300      	movne	r3, #0
 80006ac:	b2db      	uxtb	r3, r3
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	40021000 	.word	0x40021000

080006bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <LL_RCC_GetSysClkSource+0x18>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	f003 030c 	and.w	r3, r3, #12
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000

080006d8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80006dc:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <LL_RCC_GetAHBPrescaler+0x18>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000

080006f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <LL_RCC_GetAPB1Prescaler+0x18>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40021000 	.word	0x40021000

08000710 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <LL_RCC_GetAPB2Prescaler+0x18>)
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <LL_RCC_GetUSARTClockSource+0x28>)
 8000736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000738:	2103      	movs	r1, #3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	fa01 f303 	lsl.w	r3, r1, r3
 8000740:	401a      	ands	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	061b      	lsls	r3, r3, #24
 8000746:	4313      	orrs	r3, r2
}
 8000748:	4618      	mov	r0, r3
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	40021000 	.word	0x40021000

08000758 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <LL_RCC_PLL_GetMainSource+0x18>)
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8000764:	4618      	mov	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000

08000774 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <LL_RCC_PLL_GetMultiplicator+0x18>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8000780:	4618      	mov	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <LL_RCC_PLL_GetPrediv+0x18>)
 8000796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000798:	f003 030f 	and.w	r3, r3, #15
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80007b4:	f000 f864 	bl	8000880 <RCC_GetSystemClockFreq>
 80007b8:	4602      	mov	r2, r0
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f882 	bl	80008cc <RCC_GetHCLKClockFreq>
 80007c8:	4602      	mov	r2, r0
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 f890 	bl	80008f8 <RCC_GetPCLK1ClockFreq>
 80007d8:	4602      	mov	r2, r0
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f89c 	bl	8000920 <RCC_GetPCLK2ClockFreq>
 80007e8:	4602      	mov	r2, r0
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	60da      	str	r2, [r3, #12]
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d12d      	bne.n	8000866 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ff8e 	bl	800072c <LL_RCC_GetUSARTClockSource>
 8000810:	4603      	mov	r3, r0
 8000812:	2b03      	cmp	r3, #3
 8000814:	d00a      	beq.n	800082c <LL_RCC_GetUSARTClockFreq+0x34>
 8000816:	2b03      	cmp	r3, #3
 8000818:	d819      	bhi.n	800084e <LL_RCC_GetUSARTClockFreq+0x56>
 800081a:	2b01      	cmp	r3, #1
 800081c:	d002      	beq.n	8000824 <LL_RCC_GetUSARTClockFreq+0x2c>
 800081e:	2b02      	cmp	r3, #2
 8000820:	d00c      	beq.n	800083c <LL_RCC_GetUSARTClockFreq+0x44>
 8000822:	e014      	b.n	800084e <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000824:	f000 f82c 	bl	8000880 <RCC_GetSystemClockFreq>
 8000828:	60f8      	str	r0, [r7, #12]
        break;
 800082a:	e021      	b.n	8000870 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800082c:	f7ff ff22 	bl	8000674 <LL_RCC_HSI_IsReady>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d019      	beq.n	800086a <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <LL_RCC_GetUSARTClockFreq+0x84>)
 8000838:	60fb      	str	r3, [r7, #12]
        }
        break;
 800083a:	e016      	b.n	800086a <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800083c:	f7ff ff2c 	bl	8000698 <LL_RCC_LSE_IsReady>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d013      	beq.n	800086e <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8000846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800084a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800084c:	e00f      	b.n	800086e <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800084e:	f000 f817 	bl	8000880 <RCC_GetSystemClockFreq>
 8000852:	4603      	mov	r3, r0
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f839 	bl	80008cc <RCC_GetHCLKClockFreq>
 800085a:	4603      	mov	r3, r0
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f84b 	bl	80008f8 <RCC_GetPCLK1ClockFreq>
 8000862:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8000864:	e004      	b.n	8000870 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8000866:	bf00      	nop
 8000868:	e002      	b.n	8000870 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 800086a:	bf00      	nop
 800086c:	e000      	b.n	8000870 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 800086e:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8000870:	68fb      	ldr	r3, [r7, #12]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	007a1200 	.word	0x007a1200

08000880 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800088a:	f7ff ff17 	bl	80006bc <LL_RCC_GetSysClkSource>
 800088e:	4603      	mov	r3, r0
 8000890:	2b08      	cmp	r3, #8
 8000892:	d00c      	beq.n	80008ae <RCC_GetSystemClockFreq+0x2e>
 8000894:	2b08      	cmp	r3, #8
 8000896:	d80e      	bhi.n	80008b6 <RCC_GetSystemClockFreq+0x36>
 8000898:	2b00      	cmp	r3, #0
 800089a:	d002      	beq.n	80008a2 <RCC_GetSystemClockFreq+0x22>
 800089c:	2b04      	cmp	r3, #4
 800089e:	d003      	beq.n	80008a8 <RCC_GetSystemClockFreq+0x28>
 80008a0:	e009      	b.n	80008b6 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <RCC_GetSystemClockFreq+0x48>)
 80008a4:	607b      	str	r3, [r7, #4]
      break;
 80008a6:	e009      	b.n	80008bc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <RCC_GetSystemClockFreq+0x48>)
 80008aa:	607b      	str	r3, [r7, #4]
      break;
 80008ac:	e006      	b.n	80008bc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80008ae:	f000 f84b 	bl	8000948 <RCC_PLL_GetFreqDomain_SYS>
 80008b2:	6078      	str	r0, [r7, #4]
      break;
 80008b4:	e002      	b.n	80008bc <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <RCC_GetSystemClockFreq+0x48>)
 80008b8:	607b      	str	r3, [r7, #4]
      break;
 80008ba:	bf00      	nop
  }

  return frequency;
 80008bc:	687b      	ldr	r3, [r7, #4]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	007a1200 	.word	0x007a1200

080008cc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80008d4:	f7ff ff00 	bl	80006d8 <LL_RCC_GetAHBPrescaler>
 80008d8:	4603      	mov	r3, r0
 80008da:	091b      	lsrs	r3, r3, #4
 80008dc:	f003 030f 	and.w	r3, r3, #15
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <RCC_GetHCLKClockFreq+0x28>)
 80008e2:	5cd3      	ldrb	r3, [r2, r3]
 80008e4:	461a      	mov	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	40d3      	lsrs	r3, r2
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	08003124 	.word	0x08003124

080008f8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000900:	f7ff fef8 	bl	80006f4 <LL_RCC_GetAPB1Prescaler>
 8000904:	4603      	mov	r3, r0
 8000906:	0a1b      	lsrs	r3, r3, #8
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <RCC_GetPCLK1ClockFreq+0x24>)
 800090a:	5cd3      	ldrb	r3, [r2, r3]
 800090c:	461a      	mov	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	40d3      	lsrs	r3, r2
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	08003134 	.word	0x08003134

08000920 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000928:	f7ff fef2 	bl	8000710 <LL_RCC_GetAPB2Prescaler>
 800092c:	4603      	mov	r3, r0
 800092e:	0adb      	lsrs	r3, r3, #11
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <RCC_GetPCLK2ClockFreq+0x24>)
 8000932:	5cd3      	ldrb	r3, [r2, r3]
 8000934:	461a      	mov	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	40d3      	lsrs	r3, r2
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	08003134 	.word	0x08003134

08000948 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000956:	f7ff feff 	bl	8000758 <LL_RCC_PLL_GetMainSource>
 800095a:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d004      	beq.n	800096c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000968:	d003      	beq.n	8000972 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800096a:	e005      	b.n	8000978 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800096e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8000970:	e005      	b.n	800097e <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8000974:	60fb      	str	r3, [r7, #12]
      break;
 8000976:	e002      	b.n	800097e <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800097a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800097c:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800097e:	f7ff ff07 	bl	8000790 <LL_RCC_PLL_GetPrediv>
 8000982:	4603      	mov	r3, r0
 8000984:	3301      	adds	r3, #1
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	fbb2 f4f3 	udiv	r4, r2, r3
 800098c:	f7ff fef2 	bl	8000774 <LL_RCC_PLL_GetMultiplicator>
 8000990:	4603      	mov	r3, r0
 8000992:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000996:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800099a:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	fa92 f2a2 	rbit	r2, r2
 80009a2:	603a      	str	r2, [r7, #0]
  return(result);
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	fab2 f282 	clz	r2, r2
 80009aa:	40d3      	lsrs	r3, r2
 80009ac:	3302      	adds	r3, #2
 80009ae:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd90      	pop	{r4, r7, pc}
 80009ba:	bf00      	nop
 80009bc:	003d0900 	.word	0x003d0900
 80009c0:	007a1200 	.word	0x007a1200

080009c4 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	683a      	ldr	r2, [r7, #0]
 8000a0a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	683a      	ldr	r2, [r7, #0]
 8000a26:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	683a      	ldr	r2, [r7, #0]
 8000a96:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	683a      	ldr	r2, [r7, #0]
 8000ab2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	f043 0201 	orr.w	r2, r3, #1
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	615a      	str	r2, [r3, #20]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a2f      	ldr	r2, [pc, #188]	; (8000bb4 <LL_TIM_Init+0xd4>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d007      	beq.n	8000b0c <LL_TIM_Init+0x2c>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b02:	d003      	beq.n	8000b0c <LL_TIM_Init+0x2c>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a2c      	ldr	r2, [pc, #176]	; (8000bb8 <LL_TIM_Init+0xd8>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d106      	bne.n	8000b1a <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a25      	ldr	r2, [pc, #148]	; (8000bb4 <LL_TIM_Init+0xd4>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d013      	beq.n	8000b4a <LL_TIM_Init+0x6a>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b28:	d00f      	beq.n	8000b4a <LL_TIM_Init+0x6a>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a22      	ldr	r2, [pc, #136]	; (8000bb8 <LL_TIM_Init+0xd8>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d00b      	beq.n	8000b4a <LL_TIM_Init+0x6a>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a21      	ldr	r2, [pc, #132]	; (8000bbc <LL_TIM_Init+0xdc>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d007      	beq.n	8000b4a <LL_TIM_Init+0x6a>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a20      	ldr	r2, [pc, #128]	; (8000bc0 <LL_TIM_Init+0xe0>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d003      	beq.n	8000b4a <LL_TIM_Init+0x6a>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a1f      	ldr	r2, [pc, #124]	; (8000bc4 <LL_TIM_Init+0xe4>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d106      	bne.n	8000b58 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	4619      	mov	r1, r3
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff ff3b 	bl	80009e0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff27 	bl	80009c4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <LL_TIM_Init+0xd4>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d00b      	beq.n	8000b96 <LL_TIM_Init+0xb6>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <LL_TIM_Init+0xdc>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d007      	beq.n	8000b96 <LL_TIM_Init+0xb6>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <LL_TIM_Init+0xe0>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d003      	beq.n	8000b96 <LL_TIM_Init+0xb6>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <LL_TIM_Init+0xe4>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d105      	bne.n	8000ba2 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	7c1b      	ldrb	r3, [r3, #16]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff2d 	bl	80009fc <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ff8c 	bl	8000ac0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40012c00 	.word	0x40012c00
 8000bb8:	40000400 	.word	0x40000400
 8000bbc:	40014000 	.word	0x40014000
 8000bc0:	40014400 	.word	0x40014400
 8000bc4:	40014800 	.word	0x40014800

08000bc8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000bde:	d045      	beq.n	8000c6c <LL_TIM_OC_Init+0xa4>
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000be6:	d848      	bhi.n	8000c7a <LL_TIM_OC_Init+0xb2>
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bee:	d036      	beq.n	8000c5e <LL_TIM_OC_Init+0x96>
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf6:	d840      	bhi.n	8000c7a <LL_TIM_OC_Init+0xb2>
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bfe:	d027      	beq.n	8000c50 <LL_TIM_OC_Init+0x88>
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c06:	d838      	bhi.n	8000c7a <LL_TIM_OC_Init+0xb2>
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c0e:	d018      	beq.n	8000c42 <LL_TIM_OC_Init+0x7a>
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c16:	d830      	bhi.n	8000c7a <LL_TIM_OC_Init+0xb2>
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d003      	beq.n	8000c26 <LL_TIM_OC_Init+0x5e>
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	2b10      	cmp	r3, #16
 8000c22:	d007      	beq.n	8000c34 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8000c24:	e029      	b.n	8000c7a <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f000 f82d 	bl	8000c88 <OC1Config>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	75fb      	strb	r3, [r7, #23]
      break;
 8000c32:	e023      	b.n	8000c7c <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	f000 f8a6 	bl	8000d88 <OC2Config>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8000c40:	e01c      	b.n	8000c7c <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f000 f923 	bl	8000e90 <OC3Config>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8000c4e:	e015      	b.n	8000c7c <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8000c50:	6879      	ldr	r1, [r7, #4]
 8000c52:	68f8      	ldr	r0, [r7, #12]
 8000c54:	f000 f9a0 	bl	8000f98 <OC4Config>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8000c5c:	e00e      	b.n	8000c7c <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	68f8      	ldr	r0, [r7, #12]
 8000c62:	f000 fa05 	bl	8001070 <OC5Config>
 8000c66:	4603      	mov	r3, r0
 8000c68:	75fb      	strb	r3, [r7, #23]
      break;
 8000c6a:	e007      	b.n	8000c7c <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8000c6c:	6879      	ldr	r1, [r7, #4]
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f000 fa60 	bl	8001134 <OC6Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	75fb      	strb	r3, [r7, #23]
      break;
 8000c78:	e000      	b.n	8000c7c <LL_TIM_OC_Init+0xb4>
      break;
 8000c7a:	bf00      	nop
  }

  return result;
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a1b      	ldr	r3, [r3, #32]
 8000ca2:	f023 0201 	bic.w	r2, r3, #1
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a1b      	ldr	r3, [r3, #32]
 8000cae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f023 0303 	bic.w	r3, r3, #3
 8000cc2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	6812      	ldr	r2, [r2, #0]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	f023 0202 	bic.w	r2, r3, #2
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	691b      	ldr	r3, [r3, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	f023 0201 	bic.w	r2, r3, #1
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a20      	ldr	r2, [pc, #128]	; (8000d78 <OC1Config+0xf0>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d00b      	beq.n	8000d12 <OC1Config+0x8a>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a1f      	ldr	r2, [pc, #124]	; (8000d7c <OC1Config+0xf4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d007      	beq.n	8000d12 <OC1Config+0x8a>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a1e      	ldr	r2, [pc, #120]	; (8000d80 <OC1Config+0xf8>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d003      	beq.n	8000d12 <OC1Config+0x8a>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a1d      	ldr	r2, [pc, #116]	; (8000d84 <OC1Config+0xfc>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d11e      	bne.n	8000d50 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	f023 0208 	bic.w	r2, r3, #8
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	f023 0204 	bic.w	r2, r3, #4
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	4619      	mov	r1, r3
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff fe58 	bl	8000a18 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40012c00 	.word	0x40012c00
 8000d7c:	40014000 	.word	0x40014000
 8000d80:	40014400 	.word	0x40014400
 8000d84:	40014800 	.word	0x40014800

08000d88 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a1b      	ldr	r3, [r3, #32]
 8000da2:	f023 0210 	bic.w	r2, r3, #16
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a1b      	ldr	r3, [r3, #32]
 8000dae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	6812      	ldr	r2, [r2, #0]
 8000dd2:	0212      	lsls	r2, r2, #8
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	f023 0220 	bic.w	r2, r3, #32
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	691b      	ldr	r3, [r3, #16]
 8000de2:	011b      	lsls	r3, r3, #4
 8000de4:	4313      	orrs	r3, r2
 8000de6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f023 0210 	bic.w	r2, r3, #16
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	011b      	lsls	r3, r3, #4
 8000df4:	4313      	orrs	r3, r2
 8000df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <OC2Config+0xf8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00b      	beq.n	8000e18 <OC2Config+0x90>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a20      	ldr	r2, [pc, #128]	; (8000e84 <OC2Config+0xfc>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d007      	beq.n	8000e18 <OC2Config+0x90>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <OC2Config+0x100>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d003      	beq.n	8000e18 <OC2Config+0x90>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <OC2Config+0x104>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d11f      	bne.n	8000e58 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	019b      	lsls	r3, r3, #6
 8000e24:	4313      	orrs	r3, r2
 8000e26:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	019b      	lsls	r3, r3, #6
 8000e34:	4313      	orrs	r3, r2
 8000e36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff fde2 	bl	8000a34 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40012c00 	.word	0x40012c00
 8000e84:	40014000 	.word	0x40014000
 8000e88:	40014400 	.word	0x40014400
 8000e8c:	40014800 	.word	0x40014800

08000e90 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a1b      	ldr	r3, [r3, #32]
 8000eb6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f023 0303 	bic.w	r3, r3, #3
 8000eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	6812      	ldr	r2, [r2, #0]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	691b      	ldr	r3, [r3, #16]
 8000ee8:	021b      	lsls	r3, r3, #8
 8000eea:	4313      	orrs	r3, r2
 8000eec:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	4313      	orrs	r3, r2
 8000efc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <OC3Config+0xf8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00b      	beq.n	8000f1e <OC3Config+0x8e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a20      	ldr	r2, [pc, #128]	; (8000f8c <OC3Config+0xfc>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <OC3Config+0x8e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <OC3Config+0x100>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d003      	beq.n	8000f1e <OC3Config+0x8e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a1e      	ldr	r2, [pc, #120]	; (8000f94 <OC3Config+0x104>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d11f      	bne.n	8000f5e <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	029b      	lsls	r3, r3, #10
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	029b      	lsls	r3, r3, #10
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	011b      	lsls	r3, r3, #4
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	69db      	ldr	r3, [r3, #28]
 8000f58:	015b      	lsls	r3, r3, #5
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff fd6d 	bl	8000a50 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40012c00 	.word	0x40012c00
 8000f8c:	40014000 	.word	0x40014000
 8000f90:	40014400 	.word	0x40014400
 8000f94:	40014800 	.word	0x40014800

08000f98 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fd2:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	0212      	lsls	r2, r2, #8
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	031b      	lsls	r3, r3, #12
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	031b      	lsls	r3, r3, #12
 8001004:	4313      	orrs	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a15      	ldr	r2, [pc, #84]	; (8001060 <OC4Config+0xc8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d00b      	beq.n	8001028 <OC4Config+0x90>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a14      	ldr	r2, [pc, #80]	; (8001064 <OC4Config+0xcc>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d007      	beq.n	8001028 <OC4Config+0x90>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a13      	ldr	r2, [pc, #76]	; (8001068 <OC4Config+0xd0>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d003      	beq.n	8001028 <OC4Config+0x90>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <OC4Config+0xd4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d107      	bne.n	8001038 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	019b      	lsls	r3, r3, #6
 8001034:	4313      	orrs	r3, r2
 8001036:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	4619      	mov	r1, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff fd0e 	bl	8000a6c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40012c00 	.word	0x40012c00
 8001064:	40014000 	.word	0x40014000
 8001068:	40014400 	.word	0x40014400
 800106c:	40014800 	.word	0x40014800

08001070 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a1b      	ldr	r3, [r3, #32]
 8001092:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001098:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	6812      	ldr	r2, [r2, #0]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	4313      	orrs	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	041b      	lsls	r3, r3, #16
 80010c8:	4313      	orrs	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a15      	ldr	r2, [pc, #84]	; (8001124 <OC5Config+0xb4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d00b      	beq.n	80010ec <OC5Config+0x7c>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a14      	ldr	r2, [pc, #80]	; (8001128 <OC5Config+0xb8>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d007      	beq.n	80010ec <OC5Config+0x7c>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a13      	ldr	r2, [pc, #76]	; (800112c <OC5Config+0xbc>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d003      	beq.n	80010ec <OC5Config+0x7c>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <OC5Config+0xc0>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d109      	bne.n	8001100 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	4619      	mov	r1, r3
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff fcbb 	bl	8000a88 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40012c00 	.word	0x40012c00
 8001128:	40014000 	.word	0x40014000
 800112c:	40014400 	.word	0x40014400
 8001130:	40014800 	.word	0x40014800

08001134 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800115c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	0212      	lsls	r2, r2, #8
 800116e:	4313      	orrs	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	051b      	lsls	r3, r3, #20
 800117e:	4313      	orrs	r3, r2
 8001180:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	051b      	lsls	r3, r3, #20
 800118e:	4313      	orrs	r3, r2
 8001190:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a14      	ldr	r2, [pc, #80]	; (80011e8 <OC6Config+0xb4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00b      	beq.n	80011b2 <OC6Config+0x7e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a13      	ldr	r2, [pc, #76]	; (80011ec <OC6Config+0xb8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d007      	beq.n	80011b2 <OC6Config+0x7e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <OC6Config+0xbc>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d003      	beq.n	80011b2 <OC6Config+0x7e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a11      	ldr	r2, [pc, #68]	; (80011f4 <OC6Config+0xc0>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d109      	bne.n	80011c6 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	029b      	lsls	r3, r3, #10
 80011c0:	431a      	orrs	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	4619      	mov	r1, r3
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff fc66 	bl	8000aa4 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40012c00 	.word	0x40012c00
 80011ec:	40014000 	.word	0x40014000
 80011f0:	40014400 	.word	0x40014400
 80011f4:	40014800 	.word	0x40014800

080011f8 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b01      	cmp	r3, #1
 800120a:	bf0c      	ite	eq
 800120c:	2301      	moveq	r3, #1
 800120e:	2300      	movne	r3, #0
 8001210:	b2db      	uxtb	r3, r3
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	431a      	orrs	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	605a      	str	r2, [r3, #4]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	609a      	str	r2, [r3, #8]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 800126a:	b4b0      	push	{r4, r5, r7}
 800126c:	b085      	sub	sp, #20
 800126e:	af00      	add	r7, sp, #0
 8001270:	60f8      	str	r0, [r7, #12]
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 8001278:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 800127a:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001282:	d114      	bne.n	80012ae <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	005a      	lsls	r2, r3, #1
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	085b      	lsrs	r3, r3, #1
 800128c:	441a      	add	r2, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	fbb2 f3f3 	udiv	r3, r2, r3
 8001294:	b29b      	uxth	r3, r3
 8001296:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8001298:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 800129c:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800129e:	086b      	lsrs	r3, r5, #1
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 80012ac:	e00a      	b.n	80012c4 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	085a      	lsrs	r2, r3, #1
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	441a      	add	r2, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012bc:	b29b      	uxth	r3, r3
 80012be:	461a      	mov	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	60da      	str	r2, [r3, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bcb0      	pop	{r4, r5, r7}
 80012cc:	4770      	bx	lr
	...

080012d0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ff88 	bl	80011f8 <LL_USART_IsEnabled>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d14e      	bne.n	800138c <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b29      	ldr	r3, [pc, #164]	; (8001398 <LL_USART_Init+0xc8>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	6851      	ldr	r1, [r2, #4]
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	68d2      	ldr	r2, [r2, #12]
 80012fe:	4311      	orrs	r1, r2
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	6912      	ldr	r2, [r2, #16]
 8001304:	4311      	orrs	r1, r2
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	6992      	ldr	r2, [r2, #24]
 800130a:	430a      	orrs	r2, r1
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	4619      	mov	r1, r3
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff80 	bl	800121e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	4619      	mov	r1, r3
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff8d 	bl	8001244 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a1b      	ldr	r2, [pc, #108]	; (800139c <LL_USART_Init+0xcc>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d104      	bne.n	800133c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff fa60 	bl	80007f8 <LL_RCC_GetUSARTClockFreq>
 8001338:	61b8      	str	r0, [r7, #24]
 800133a:	e016      	b.n	800136a <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a18      	ldr	r2, [pc, #96]	; (80013a0 <LL_USART_Init+0xd0>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d107      	bne.n	8001354 <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fa2f 	bl	80007ac <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	e00a      	b.n	800136a <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <LL_USART_Init+0xd4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d106      	bne.n	800136a <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fa23 	bl	80007ac <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00d      	beq.n	800138c <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d009      	beq.n	800138c <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8001378:	2300      	movs	r3, #0
 800137a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	699a      	ldr	r2, [r3, #24]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	69b9      	ldr	r1, [r7, #24]
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff6f 	bl	800126a <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800138c:	7ffb      	ldrb	r3, [r7, #31]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3720      	adds	r7, #32
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	efff69f3 	.word	0xefff69f3
 800139c:	40013800 	.word	0x40013800
 80013a0:	40004400 	.word	0x40004400
 80013a4:	40004800 	.word	0x40004800

080013a8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ba:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <LL_InitTick+0x30>)
 80013bc:	3b01      	subs	r3, #1
 80013be:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <LL_InitTick+0x30>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <LL_InitTick+0x30>)
 80013c8:	2205      	movs	r2, #5
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e010 	.word	0xe000e010

080013dc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80013e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ffdd 	bl	80013a8 <LL_InitTick>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <LL_mDelay+0x48>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001406:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800140e:	d00c      	beq.n	800142a <LL_mDelay+0x32>
  {
    Delay++;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3301      	adds	r3, #1
 8001414:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001416:	e008      	b.n	800142a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <LL_mDelay+0x48>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <LL_mDelay+0x32>
    {
      Delay--;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	607b      	str	r3, [r7, #4]
  while (Delay)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f3      	bne.n	8001418 <LL_mDelay+0x20>
    }
  }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000e010 	.word	0xe000e010

08001444 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <LL_SetSystemCoreClock+0x1c>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	2000000c 	.word	0x2000000c

08001464 <LL_ADC_REG_SetSequencerRanks>:
{
 8001464:	b490      	push	{r4, r7}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3330      	adds	r3, #48	; 0x30
 8001474:	4619      	mov	r1, r3
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800147c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001480:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	fa93 f3a3 	rbit	r3, r3
 8001488:	613b      	str	r3, [r7, #16]
  return(result);
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	fab3 f383 	clz	r3, r3
 8001490:	fa22 f303 	lsr.w	r3, r2, r3
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800149a:	6822      	ldr	r2, [r4, #0]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f003 031f 	and.w	r3, r3, #31
 80014a2:	211f      	movs	r1, #31
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	401a      	ands	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	f003 031f 	and.w	r3, r3, #31
 80014b8:	f1c3 031a 	rsb	r3, r3, #26
 80014bc:	fa21 f303 	lsr.w	r3, r1, r3
 80014c0:	4313      	orrs	r3, r2
 80014c2:	6023      	str	r3, [r4, #0]
}
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc90      	pop	{r4, r7}
 80014cc:	4770      	bx	lr

080014ce <LL_ADC_SetChannelSamplingTime>:
{
 80014ce:	b490      	push	{r4, r7}
 80014d0:	b08a      	sub	sp, #40	; 0x28
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3314      	adds	r3, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 80014e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa93 f3a3 	rbit	r3, r3
 80014f2:	613b      	str	r3, [r7, #16]
  return(result);
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	fab3 f383 	clz	r3, r3
 80014fa:	fa22 f303 	lsr.w	r3, r2, r3
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8001504:	6822      	ldr	r2, [r4, #0]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 800150c:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8001510:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa93 f3a3 	rbit	r3, r3
 8001518:	61bb      	str	r3, [r7, #24]
  return(result);
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	fab3 f383 	clz	r3, r3
 8001520:	fa21 f303 	lsr.w	r3, r1, r3
 8001524:	2107      	movs	r1, #7
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	401a      	ands	r2, r3
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 8001534:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	fa93 f3a3 	rbit	r3, r3
 8001540:	623b      	str	r3, [r7, #32]
  return(result);
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	fab3 f383 	clz	r3, r3
 8001548:	fa21 f303 	lsr.w	r3, r1, r3
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	6023      	str	r3, [r4, #0]
}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	; 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bc90      	pop	{r4, r7}
 800155e:	4770      	bx	lr

08001560 <LL_ADC_SetChannelSingleDiff>:
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001578:	43db      	mvns	r3, r3
 800157a:	401a      	ands	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0320 	and.w	r3, r3, #32
 8001582:	4908      	ldr	r1, [pc, #32]	; (80015a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001584:	4099      	lsls	r1, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	400b      	ands	r3, r1
 800158a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800158e:	431a      	orrs	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	0007ffff 	.word	0x0007ffff

080015a8 <LL_ADC_Enable>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015bc:	f043 0201 	orr.w	r2, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	609a      	str	r2, [r3, #8]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_ADC_IsEnabled>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	bf0c      	ite	eq
 80015e4:	2301      	moveq	r3, #1
 80015e6:	2300      	movne	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b02      	cmp	r3, #2
 8001608:	bf0c      	ite	eq
 800160a:	2301      	moveq	r3, #1
 800160c:	2300      	movne	r3, #0
 800160e:	b2db      	uxtb	r3, r3
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800162c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001630:	f043 0204 	orr.w	r2, r3, #4
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b04      	cmp	r3, #4
 8001656:	bf0c      	ite	eq
 8001658:	2301      	moveq	r3, #1
 800165a:	2300      	movne	r3, #0
 800165c:	b2db      	uxtb	r3, r3
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf0c      	ite	eq
 800167e:	2301      	moveq	r3, #1
 8001680:	2300      	movne	r3, #0
 8001682:	b2db      	uxtb	r3, r3
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2204      	movs	r2, #4
 800169c:	601a      	str	r2, [r3, #0]
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <LL_ADC_EnableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_EnableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f043 0204 	orr.w	r2, r3, #4
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	605a      	str	r2, [r3, #4]
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f023 0208 	bic.w	r2, r3, #8
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	605a      	str	r2, [r3, #4]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	4907      	ldr	r1, [pc, #28]	; (8001718 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4013      	ands	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000

0800171c <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b094      	sub	sp, #80	; 0x50
 8001720:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001722:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800172e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	611a      	str	r2, [r3, #16]
 800173e:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
 800175c:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 800175e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001762:	f7ff ffc3 	bl	80016ec <LL_AHB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001766:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800176a:	f7ff ffbf 	bl	80016ec <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration  
  PA0   ------> ADC1_IN1 
  */
  // pin na ktorom sa meria napatie - analogovy rezim - nie je pripojeny k rezistore
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800176e:	2301      	movs	r3, #1
 8001770:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001772:	2303      	movs	r3, #3
 8001774:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	4619      	mov	r1, r3
 800177e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001782:	f7fe fefc 	bl	800057e <LL_GPIO_Init>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001786:	2300      	movs	r3, #0
 8001788:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800178a:	2300      	movs	r3, #0
 800178c:	64bb      	str	r3, [r7, #72]	; 0x48
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800178e:	2300      	movs	r3, #0
 8001790:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001792:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001796:	4619      	mov	r1, r3
 8001798:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800179c:	f7fe fd84 	bl	80002a8 <LL_ADC_Init>

  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 80017b0:	2301      	movs	r3, #1
 80017b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 80017b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b8:	643b      	str	r3, [r7, #64]	; 0x40
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80017ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017be:	4619      	mov	r1, r3
 80017c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017c4:	f7fe fd96 	bl	80002f4 <LL_ADC_REG_Init>
  LL_ADC_EnableIT_EOC(ADC1);
 80017c8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017cc:	f7ff ff6d 	bl	80016aa <LL_ADC_EnableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 80017d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017d4:	f7ff ff79 	bl	80016ca <LL_ADC_DisableIT_EOS>

  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 80017d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017dc:	61fb      	str	r3, [r7, #28]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	4619      	mov	r1, r3
 80017e8:	480e      	ldr	r0, [pc, #56]	; (8001824 <MX_ADC1_Init+0x108>)
 80017ea:	f7fe fd1d 	bl	8000228 <LL_ADC_CommonInit>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80017ee:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <MX_ADC1_Init+0x10c>)
 80017f0:	2106      	movs	r1, #6
 80017f2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017f6:	f7ff fe35 	bl	8001464 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80017fa:	2200      	movs	r2, #0
 80017fc:	490a      	ldr	r1, [pc, #40]	; (8001828 <MX_ADC1_Init+0x10c>)
 80017fe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001802:	f7ff fe64 	bl	80014ce <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8001806:	227f      	movs	r2, #127	; 0x7f
 8001808:	4907      	ldr	r1, [pc, #28]	; (8001828 <MX_ADC1_Init+0x10c>)
 800180a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800180e:	f7ff fea7 	bl	8001560 <LL_ADC_SetChannelSingleDiff>

  LL_ADC_Enable(ADC1);
 8001812:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001816:	f7ff fec7 	bl	80015a8 <LL_ADC_Enable>
}
 800181a:	bf00      	nop
 800181c:	3750      	adds	r7, #80	; 0x50
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	50000300 	.word	0x50000300
 8001828:	04300002 	.word	0x04300002

0800182c <ADC_start_conversion>:

void ADC_start_conversion(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	if ((LL_ADC_IsEnabled(ADC1) == 1)             &&
 8001830:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001834:	f7ff fecc 	bl	80015d0 <LL_ADC_IsEnabled>
 8001838:	4603      	mov	r3, r0
 800183a:	2b01      	cmp	r3, #1
 800183c:	d111      	bne.n	8001862 <ADC_start_conversion+0x36>
	  (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 800183e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001842:	f7ff fed8 	bl	80015f6 <LL_ADC_IsDisableOngoing>
 8001846:	4603      	mov	r3, r0
	if ((LL_ADC_IsEnabled(ADC1) == 1)             &&
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10a      	bne.n	8001862 <ADC_start_conversion+0x36>
	  (LL_ADC_REG_IsConversionOngoing(ADC1) == 0)   )
 800184c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001850:	f7ff fef8 	bl	8001644 <LL_ADC_REG_IsConversionOngoing>
 8001854:	4603      	mov	r3, r0
	  (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 8001856:	2b00      	cmp	r3, #0
 8001858:	d103      	bne.n	8001862 <ADC_start_conversion+0x36>
	{
		LL_ADC_REG_StartConversion(ADC1);
 800185a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800185e:	f7ff fedd 	bl	800161c <LL_ADC_REG_StartConversion>
	else
	{
		/**/
	}

	while (LL_ADC_IsActiveFlag_EOC(ADC1) == 0){}
 8001862:	bf00      	nop
 8001864:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001868:	f7ff feff 	bl	800166a <LL_ADC_IsActiveFlag_EOC>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f8      	beq.n	8001864 <ADC_start_conversion+0x38>

	LL_ADC_ClearFlag_EOC(ADC1);
 8001872:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001876:	f7ff ff0b 	bl	8001690 <LL_ADC_ClearFlag_EOC>
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <ADC_convertedValue2float>:


float ADC_convertedValue2float(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
	return (ADC1->DR/4097.0f)*3.3f;
 8001884:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001892:	eddf 6a07 	vldr	s13, [pc, #28]	; 80018b0 <ADC_convertedValue2float+0x30>
 8001896:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800189a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80018b4 <ADC_convertedValue2float+0x34>
 800189e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80018a2:	eeb0 0a67 	vmov.f32	s0, s15
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	45800800 	.word	0x45800800
 80018b4:	40533333 	.word	0x40533333

080018b8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4907      	ldr	r1, [pc, #28]	; (80018e8 <NVIC_EnableIRQ+0x30>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2001      	movs	r0, #1
 80018d2:	fa00 f202 	lsl.w	r2, r0, r2
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000e100 	.word	0xe000e100

080018ec <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	da0b      	bge.n	8001918 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	490c      	ldr	r1, [pc, #48]	; (8001938 <NVIC_SetPriority+0x4c>)
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	f003 030f 	and.w	r3, r3, #15
 800190c:	3b04      	subs	r3, #4
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001916:	e009      	b.n	800192c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	4907      	ldr	r1, [pc, #28]	; (800193c <NVIC_SetPriority+0x50>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	440b      	add	r3, r1
 8001928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00
 800193c:	e000e100 	.word	0xe000e100

08001940 <LL_AHB1_GRP1_EnableClock>:
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	4907      	ldr	r1, [pc, #28]	; (800196c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4313      	orrs	r3, r2
 8001952:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4013      	ands	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800195e:	68fb      	ldr	r3, [r7, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	40021000 	.word	0x40021000

08001970 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff ffe3 	bl	8001940 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 800197a:	2100      	movs	r1, #0
 800197c:	2010      	movs	r0, #16
 800197e:	f7ff ffb5 	bl	80018ec <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001982:	2010      	movs	r0, #16
 8001984:	f7ff ff98 	bl	80018b8 <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 8001988:	2100      	movs	r1, #0
 800198a:	2011      	movs	r0, #17
 800198c:	f7ff ffae 	bl	80018ec <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001990:	2011      	movs	r0, #17
 8001992:	f7ff ff91 	bl	80018b8 <NVIC_EnableIRQ>

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <LL_AHB1_GRP1_EnableClock>:
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	4907      	ldr	r1, [pc, #28]	; (80019c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019b2:	695a      	ldr	r2, [r3, #20]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4013      	ands	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ba:	68fb      	ldr	r3, [r7, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40021000 	.word	0x40021000

080019cc <LL_GPIO_SetPinMode>:
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	613b      	str	r3, [r7, #16]
  return(result);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	fab3 f383 	clz	r3, r3
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	2103      	movs	r1, #3
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	401a      	ands	r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	61bb      	str	r3, [r7, #24]
  return(result);
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	fab3 f383 	clz	r3, r3
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	431a      	orrs	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	601a      	str	r2, [r3, #0]
}
 8001a1a:	bf00      	nop
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <LL_GPIO_SetPinOutputType>:
{
 8001a26:	b480      	push	{r7}
 8001a28:	b085      	sub	sp, #20
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	fb01 f303 	mul.w	r3, r1, r3
 8001a44:	431a      	orrs	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	605a      	str	r2, [r3, #4]
}
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
 8001a88:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001a8a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a8e:	f7ff ff85 	bl	800199c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001a92:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001a96:	f7ff ff81 	bl	800199c <LL_AHB1_GRP1_EnableClock>

  //GPIO PIN 5 AS OUTPUT - LED
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_OUTPUT);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	2120      	movs	r1, #32
 8001a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa2:	f7ff ff93 	bl	80019cc <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_5, LL_GPIO_OUTPUT_PUSHPULL);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2120      	movs	r1, #32
 8001aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aae:	f7ff ffba 	bl	8001a26 <LL_GPIO_SetPinOutputType>
  //SET INITIAL STATE - RESET
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8001ab2:	2120      	movs	r1, #32
 8001ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab8:	f7ff ffcd 	bl	8001a56 <LL_GPIO_ResetOutputPin>

  /*Nie som si isty ci to je spravne*/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001abc:	2308      	movs	r3, #8
 8001abe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001acc:	2300      	movs	r3, #0
 8001ace:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <MX_GPIO_Init+0x70>)
 8001ad6:	f7fe fd52 	bl	800057e <LL_GPIO_Init>

}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	48000400 	.word	0x48000400

08001ae8 <NVIC_SetPriorityGrouping>:
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <NVIC_SetPriorityGrouping+0x44>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <NVIC_SetPriorityGrouping+0x44>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <LL_RCC_HSI_Enable>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <LL_RCC_HSI_Enable+0x1c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <LL_RCC_HSI_Enable+0x1c>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000

08001b50 <LL_RCC_HSI_IsReady>:
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <LL_RCC_HSI_IsReady+0x20>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	40021000 	.word	0x40021000

08001b74 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4904      	ldr	r1, [pc, #16]	; (8001b9c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <LL_RCC_SetSysClkSource>:
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <LL_RCC_SetSysClkSource+0x24>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f023 0203 	bic.w	r2, r3, #3
 8001bb0:	4904      	ldr	r1, [pc, #16]	; (8001bc4 <LL_RCC_SetSysClkSource+0x24>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <LL_RCC_GetSysClkSource>:
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <LL_RCC_GetSysClkSource+0x18>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000

08001be4 <LL_RCC_SetAHBPrescaler>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <LL_RCC_SetAHBPrescaler+0x24>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf4:	4904      	ldr	r1, [pc, #16]	; (8001c08 <LL_RCC_SetAHBPrescaler+0x24>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	40021000 	.word	0x40021000

08001c0c <LL_RCC_SetAPB1Prescaler>:
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c1c:	4904      	ldr	r1, [pc, #16]	; (8001c30 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	40021000 	.word	0x40021000

08001c34 <LL_RCC_SetAPB2Prescaler>:
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c44:	4904      	ldr	r1, [pc, #16]	; (8001c58 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40021000 	.word	0x40021000

08001c5c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c66:	69da      	ldr	r2, [r3, #28]
 8001c68:	4907      	ldr	r1, [pc, #28]	; (8001c88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c72:	69da      	ldr	r2, [r3, #28]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4013      	ands	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	40021000 	.word	0x40021000

08001c8c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c96:	699a      	ldr	r2, [r3, #24]
 8001c98:	4907      	ldr	r1, [pc, #28]	; (8001cb8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ca2:	699a      	ldr	r2, [r3, #24]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	40021000 	.word	0x40021000

08001cbc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <LL_FLASH_SetLatency+0x24>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 0207 	bic.w	r2, r3, #7
 8001ccc:	4904      	ldr	r1, [pc, #16]	; (8001ce0 <LL_FLASH_SetLatency+0x24>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	40022000 	.word	0x40022000

08001ce4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <LL_FLASH_GetLatency+0x18>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0307 	and.w	r3, r3, #7
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40022000 	.word	0x40022000

08001d00 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d106      	bne.n	8001d1c <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <LL_SYSTICK_SetClkSource+0x34>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <LL_SYSTICK_SetClkSource+0x34>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001d1a:	e005      	b.n	8001d28 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <LL_SYSTICK_SetClkSource+0x34>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <LL_SYSTICK_SetClkSource+0x34>)
 8001d22:	f023 0304 	bic.w	r3, r3, #4
 8001d26:	6013      	str	r3, [r2, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f7ff ffa4 	bl	8001c8c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001d44:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001d48:	f7ff ff88 	bl	8001c5c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	f7ff fecb 	bl	8001ae8 <NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d52:	f000 f823 	bl	8001d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d56:	f7ff fe8d 	bl	8001a74 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d5a:	f7ff fe09 	bl	8001970 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001d5e:	f001 f819 	bl	8002d94 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001d62:	f7ff fcdb 	bl	800171c <MX_ADC1_Init>
  MX_TIM2_Init();
 8001d66:	f000 fc6d 	bl	8002644 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // vyberanie funkcii
  USART2_RegisterCallback(processDmaData);
 8001d6a:	480a      	ldr	r0, [pc, #40]	; (8001d94 <main+0x5c>)
 8001d6c:	f001 f800 	bl	8002d70 <USART2_RegisterCallback>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int deley_count = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]
#if POLLING
	//Polling for new data, no interrupts
	USART2_CheckDmaReception();
	LL_mDelay(10);
#else
	if(deley_count == 30)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b1e      	cmp	r3, #30
 8001d78:	d105      	bne.n	8001d86 <main+0x4e>
	{
		USART2_PutBuffer(rx_data, sizeof(rx_data));
 8001d7a:	210a      	movs	r1, #10
 8001d7c:	4806      	ldr	r0, [pc, #24]	; (8001d98 <main+0x60>)
 8001d7e:	f001 f8eb 	bl	8002f58 <USART2_PutBuffer>
		deley_count = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
	}
	LL_mDelay(100);
 8001d86:	2064      	movs	r0, #100	; 0x64
 8001d88:	f7ff fb36 	bl	80013f8 <LL_mDelay>
	deley_count++;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	607b      	str	r3, [r7, #4]
	if(deley_count == 30)
 8001d92:	e7ef      	b.n	8001d74 <main+0x3c>
 8001d94:	08001e09 	.word	0x08001e09
 8001d98:	20000000 	.word	0x20000000

08001d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001da0:	2000      	movs	r0, #0
 8001da2:	f7ff ff8b 	bl	8001cbc <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001da6:	f7ff ff9d 	bl	8001ce4 <LL_FLASH_GetLatency>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8001db0:	f000 f8ee 	bl	8001f90 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001db4:	f7ff febc 	bl	8001b30 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001db8:	bf00      	nop
 8001dba:	f7ff fec9 	bl	8001b50 <LL_RCC_HSI_IsReady>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d1fa      	bne.n	8001dba <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001dc4:	2010      	movs	r0, #16
 8001dc6:	f7ff fed5 	bl	8001b74 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f7ff ff0a 	bl	8001be4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7ff ff1b 	bl	8001c0c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f7ff ff2c 	bl	8001c34 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7ff fedf 	bl	8001ba0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001de2:	bf00      	nop
 8001de4:	f7ff fef0 	bl	8001bc8 <LL_RCC_GetSysClkSource>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1fa      	bne.n	8001de4 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8001dee:	4805      	ldr	r0, [pc, #20]	; (8001e04 <SystemClock_Config+0x68>)
 8001df0:	f7ff faf4 	bl	80013dc <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001df4:	2004      	movs	r0, #4
 8001df6:	f7ff ff83 	bl	8001d00 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8001dfa:	4802      	ldr	r0, [pc, #8]	; (8001e04 <SystemClock_Config+0x68>)
 8001dfc:	f7ff fb22 	bl	8001444 <LL_SetSystemCoreClock>
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	007a1200 	.word	0x007a1200

08001e08 <processDmaData>:
}

static uint8_t rezim = 0;

void processDmaData(const uint8_t* data, uint16_t len)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08c      	sub	sp, #48	; 0x30
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
	char manual[6] = "manual";
 8001e14:	4a59      	ldr	r2, [pc, #356]	; (8001f7c <processDmaData+0x174>)
 8001e16:	f107 0320 	add.w	r3, r7, #32
 8001e1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e1e:	6018      	str	r0, [r3, #0]
 8001e20:	3304      	adds	r3, #4
 8001e22:	8019      	strh	r1, [r3, #0]
	char automat[4] = "auto";
 8001e24:	4b56      	ldr	r3, [pc, #344]	; (8001f80 <processDmaData+0x178>)
 8001e26:	61fb      	str	r3, [r7, #28]
	char pwm[5] = "pwm  ";
 8001e28:	4a56      	ldr	r2, [pc, #344]	; (8001f84 <processDmaData+0x17c>)
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e32:	6018      	str	r0, [r3, #0]
 8001e34:	3304      	adds	r3, #4
 8001e36:	7019      	strb	r1, [r3, #0]
	char aux[6];
	int xx;

	if(*(data) == '$')
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b24      	cmp	r3, #36	; 0x24
 8001e3e:	f040 8099 	bne.w	8001f74 <processDmaData+0x16c>
	{
		for(uint8_t i = 0; (i <= 7); i++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001e48:	e01b      	b.n	8001e82 <processDmaData+0x7a>
		{
			if(*(data+i) == '$')
 8001e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b24      	cmp	r3, #36	; 0x24
 8001e56:	d108      	bne.n	8001e6a <processDmaData+0x62>
			{
				listen = 1;
 8001e58:	4b4b      	ldr	r3, [pc, #300]	; (8001f88 <processDmaData+0x180>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
				len = i - 1; // ulozi na akej pozicii bol najdeny druhy $
 8001e5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	807b      	strh	r3, [r7, #2]
				break;
 8001e68:	e00f      	b.n	8001e8a <processDmaData+0x82>
			}
			if(i == 7) // najdlhsi mozny signal ma 7 znakov aj s ukoncovacim $
 8001e6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e6e:	2b07      	cmp	r3, #7
 8001e70:	d102      	bne.n	8001e78 <processDmaData+0x70>
			{
				listen = 0;
 8001e72:	4b45      	ldr	r3, [pc, #276]	; (8001f88 <processDmaData+0x180>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; (i <= 7); i++)
 8001e78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001e82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e86:	2b07      	cmp	r3, #7
 8001e88:	d9df      	bls.n	8001e4a <processDmaData+0x42>
			}
		}

		if(listen) // pocuva iba ak prijalo prikaz zacinajuci a konciaci $
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <processDmaData+0x180>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d070      	beq.n	8001f74 <processDmaData+0x16c>
		{
			for(uint8_t i = 1; i < len; i++)
 8001e92:	2301      	movs	r3, #1
 8001e94:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001e98:	e011      	b.n	8001ebe <processDmaData+0xb6>
			{
				aux[i-1] = *(data+i);
 8001e9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	441a      	add	r2, r3
 8001ea2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	7812      	ldrb	r2, [r2, #0]
 8001eaa:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001eae:	440b      	add	r3, r1
 8001eb0:	f803 2c24 	strb.w	r2, [r3, #-36]
			for(uint8_t i = 1; i < len; i++)
 8001eb4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001ebe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	887a      	ldrh	r2, [r7, #2]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d8e7      	bhi.n	8001e9a <processDmaData+0x92>
			}

			if(len == 6) // porovnava s "manual"
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	2b06      	cmp	r3, #6
 8001ece:	d10e      	bne.n	8001eee <processDmaData+0xe6>
			{
				if(strcmp(aux, manual) == 0) {
 8001ed0:	f107 0220 	add.w	r2, r7, #32
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe f974 	bl	80001c8 <strcmp>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d146      	bne.n	8001f74 <processDmaData+0x16c>
					rezim = 1; // nastavi rezim
 8001ee6:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <processDmaData+0x184>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 8001eec:	e042      	b.n	8001f74 <processDmaData+0x16c>
			else if(len == 4) // porovnava s "auto"
 8001eee:	887b      	ldrh	r3, [r7, #2]
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d10e      	bne.n	8001f12 <processDmaData+0x10a>
				if(strcmp(aux, automat) == 0) {
 8001ef4:	f107 021c 	add.w	r2, r7, #28
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe f962 	bl	80001c8 <strcmp>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d134      	bne.n	8001f74 <processDmaData+0x16c>
					rezim = 0;	// nastavi rezim
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <processDmaData+0x184>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
}
 8001f10:	e030      	b.n	8001f74 <processDmaData+0x16c>
			else if((len == 5) && (rezim == 1))
 8001f12:	887b      	ldrh	r3, [r7, #2]
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d12d      	bne.n	8001f74 <processDmaData+0x16c>
 8001f18:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <processDmaData+0x184>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d129      	bne.n	8001f74 <processDmaData+0x16c>
				if((aux[3] >= '0' && aux[3] <= '9') && (aux[4] >= '0' && aux[4] <= '9')) // skontroluje ci ide o cisla
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	2b2f      	cmp	r3, #47	; 0x2f
 8001f24:	d926      	bls.n	8001f74 <processDmaData+0x16c>
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	2b39      	cmp	r3, #57	; 0x39
 8001f2a:	d823      	bhi.n	8001f74 <processDmaData+0x16c>
 8001f2c:	7c3b      	ldrb	r3, [r7, #16]
 8001f2e:	2b2f      	cmp	r3, #47	; 0x2f
 8001f30:	d920      	bls.n	8001f74 <processDmaData+0x16c>
 8001f32:	7c3b      	ldrb	r3, [r7, #16]
 8001f34:	2b39      	cmp	r3, #57	; 0x39
 8001f36:	d81d      	bhi.n	8001f74 <processDmaData+0x16c>
					xx = 10*(aux[3] - '0') + (aux[4] - '0'); // do premennej ulozi cislo z prikazu
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	461a      	mov	r2, r3
 8001f48:	7c3b      	ldrb	r3, [r7, #16]
 8001f4a:	3b30      	subs	r3, #48	; 0x30
 8001f4c:	4413      	add	r3, r2
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
					aux[3] = ' '; // na miesto cisel vlozi medzery pre porovnanie ci sedi prikaz
 8001f50:	2320      	movs	r3, #32
 8001f52:	73fb      	strb	r3, [r7, #15]
					aux[4] = ' ';
 8001f54:	2320      	movs	r3, #32
 8001f56:	743b      	strb	r3, [r7, #16]
					if(strcmp(aux, pwm) == 0) {
 8001f58:	f107 0214 	add.w	r2, r7, #20
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe f930 	bl	80001c8 <strcmp>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <processDmaData+0x16c>
						rezim = 2;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <processDmaData+0x184>)
 8001f70:	2202      	movs	r2, #2
 8001f72:	701a      	strb	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	3730      	adds	r7, #48	; 0x30
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	0800310c 	.word	0x0800310c
 8001f80:	6f747561 	.word	0x6f747561
 8001f84:	08003114 	.word	0x08003114
 8001f88:	2000002c 	.word	0x2000002c
 8001f8c:	20000034 	.word	0x20000034

08001f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	4a0b      	ldr	r2, [pc, #44]	; (8001fdc <LL_DMA_DisableChannel+0x3c>)
 8001fb0:	5cd3      	ldrb	r3, [r2, r3]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	3a01      	subs	r2, #1
 8001fbe:	4907      	ldr	r1, [pc, #28]	; (8001fdc <LL_DMA_DisableChannel+0x3c>)
 8001fc0:	5c8a      	ldrb	r2, [r1, r2]
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	440a      	add	r2, r1
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	6013      	str	r3, [r2, #0]
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	0800311c 	.word	0x0800311c

08001fe0 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ff4:	bf0c      	ite	eq
 8001ff6:	2301      	moveq	r3, #1
 8001ff8:	2300      	movne	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002018:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800201c:	bf0c      	ite	eq
 800201e:	2301      	moveq	r3, #1
 8002020:	2300      	movne	r3, #0
 8002022:	b2db      	uxtb	r3, r3
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002044:	bf0c      	ite	eq
 8002046:	2301      	moveq	r3, #1
 8002048:	2300      	movne	r3, #0
 800204a:	b2db      	uxtb	r3, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002066:	605a      	str	r2, [r3, #4]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002082:	605a      	str	r2, [r3, #4]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800209e:	605a      	str	r2, [r3, #4]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_TIM_ClearFlag_UPDATE>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f06f 0201 	mvn.w	r2, #1
 80020ba:	611a      	str	r2, [r3, #16]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b01      	cmp	r3, #1
 80020da:	bf0c      	ite	eq
 80020dc:	2301      	moveq	r3, #1
 80020de:	2300      	movne	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	2b10      	cmp	r3, #16
 8002100:	bf0c      	ite	eq
 8002102:	2301      	moveq	r3, #1
 8002104:	2300      	movne	r3, #0
 8002106:	b2db      	uxtb	r3, r3
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002124:	2b40      	cmp	r3, #64	; 0x40
 8002126:	bf0c      	ite	eq
 8002128:	2301      	moveq	r3, #1
 800212a:	2300      	movne	r3, #0
 800212c:	b2db      	uxtb	r3, r3
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2210      	movs	r2, #16
 8002146:	621a      	str	r2, [r3, #32]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_GPIO_IsOutputPinSet>:
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	4013      	ands	r3, r2
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_GPIO_SetOutputPin>:
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	619a      	str	r2, [r3, #24]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_GPIO_ResetOutputPin>:
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <HardFault_Handler+0x4>

080021ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <MemManage_Handler+0x4>

080021d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <BusFault_Handler+0x4>

080021d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021da:	e7fe      	b.n	80021da <UsageFault_Handler+0x4>

080021dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2))
 8002218:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800221c:	f7ff ff54 	bl	80020c8 <LL_TIM_IsActiveFlag_UPDATE>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d01b      	beq.n	800225e <TIM2_IRQHandler+0x4a>
	{
		if(LL_GPIO_IsOutputPinSet(GPIOA, LL_GPIO_PIN_5))
 8002226:	2120      	movs	r1, #32
 8002228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800222c:	f7ff ff92 	bl	8002154 <LL_GPIO_IsOutputPinSet>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <TIM2_IRQHandler+0x2e>
		{
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8002236:	2120      	movs	r1, #32
 8002238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800223c:	f7ff ffad 	bl	800219a <LL_GPIO_ResetOutputPin>
 8002240:	e004      	b.n	800224c <TIM2_IRQHandler+0x38>
		}
		else
		{
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8002242:	2120      	movs	r1, #32
 8002244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002248:	f7ff ff99 	bl	800217e <LL_GPIO_SetOutputPin>
		}

		ADC_start_conversion();
 800224c:	f7ff faee 	bl	800182c <ADC_start_conversion>
		voltage = ADC_convertedValue2float();
 8002250:	f7ff fb16 	bl	8001880 <ADC_convertedValue2float>
 8002254:	eef0 7a40 	vmov.f32	s15, s0
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <TIM2_IRQHandler+0x58>)
 800225a:	edc3 7a00 	vstr	s15, [r3]
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 800225e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002262:	f7ff ff23 	bl	80020ac <LL_TIM_ClearFlag_UPDATE>
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000030 	.word	0x20000030

08002270 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8002274:	480c      	ldr	r0, [pc, #48]	; (80022a8 <DMA1_Channel6_IRQHandler+0x38>)
 8002276:	f7ff feb3 	bl	8001fe0 <LL_DMA_IsActiveFlag_TC6>
 800227a:	4603      	mov	r3, r0
 800227c:	2b01      	cmp	r3, #1
 800227e:	d105      	bne.n	800228c <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8002280:	f000 fe8a 	bl	8002f98 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8002284:	4808      	ldr	r0, [pc, #32]	; (80022a8 <DMA1_Channel6_IRQHandler+0x38>)
 8002286:	f7ff fee7 	bl	8002058 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 800228a:	e00a      	b.n	80022a2 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 800228c:	4806      	ldr	r0, [pc, #24]	; (80022a8 <DMA1_Channel6_IRQHandler+0x38>)
 800228e:	f7ff fecf 	bl	8002030 <LL_DMA_IsActiveFlag_HT6>
 8002292:	4603      	mov	r3, r0
 8002294:	2b01      	cmp	r3, #1
 8002296:	d104      	bne.n	80022a2 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8002298:	f000 fe7e 	bl	8002f98 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <DMA1_Channel6_IRQHandler+0x38>)
 800229e:	f7ff fef7 	bl	8002090 <LL_DMA_ClearFlag_HT6>
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40020000 	.word	0x40020000

080022ac <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 80022b0:	480a      	ldr	r0, [pc, #40]	; (80022dc <DMA1_Channel7_IRQHandler+0x30>)
 80022b2:	f7ff fea9 	bl	8002008 <LL_DMA_IsActiveFlag_TC7>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d10d      	bne.n	80022d8 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 80022bc:	4807      	ldr	r0, [pc, #28]	; (80022dc <DMA1_Channel7_IRQHandler+0x30>)
 80022be:	f7ff fed9 	bl	8002074 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 80022c2:	bf00      	nop
 80022c4:	4806      	ldr	r0, [pc, #24]	; (80022e0 <DMA1_Channel7_IRQHandler+0x34>)
 80022c6:	f7ff ff25 	bl	8002114 <LL_USART_IsActiveFlag_TC>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f9      	beq.n	80022c4 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 80022d0:	2107      	movs	r1, #7
 80022d2:	4802      	ldr	r0, [pc, #8]	; (80022dc <DMA1_Channel7_IRQHandler+0x30>)
 80022d4:	f7ff fe64 	bl	8001fa0 <LL_DMA_DisableChannel>
	}
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40004400 	.word	0x40004400

080022e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 80022e8:	4806      	ldr	r0, [pc, #24]	; (8002304 <USART2_IRQHandler+0x20>)
 80022ea:	f7ff ff00 	bl	80020ee <LL_USART_IsActiveFlag_IDLE>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d004      	beq.n	80022fe <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 80022f4:	f000 fe50 	bl	8002f98 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <USART2_IRQHandler+0x20>)
 80022fa:	f7ff ff1e 	bl	800213a <LL_USART_ClearFlag_IDLE>
	}
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40004400 	.word	0x40004400

08002308 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800230c:	4b1f      	ldr	r3, [pc, #124]	; (800238c <SystemInit+0x84>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002312:	4a1e      	ldr	r2, [pc, #120]	; (800238c <SystemInit+0x84>)
 8002314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <SystemInit+0x88>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a1b      	ldr	r2, [pc, #108]	; (8002390 <SystemInit+0x88>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <SystemInit+0x88>)
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	4918      	ldr	r1, [pc, #96]	; (8002390 <SystemInit+0x88>)
 800232e:	4b19      	ldr	r3, [pc, #100]	; (8002394 <SystemInit+0x8c>)
 8002330:	4013      	ands	r3, r2
 8002332:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002334:	4b16      	ldr	r3, [pc, #88]	; (8002390 <SystemInit+0x88>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a15      	ldr	r2, [pc, #84]	; (8002390 <SystemInit+0x88>)
 800233a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800233e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002342:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <SystemInit+0x88>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a11      	ldr	r2, [pc, #68]	; (8002390 <SystemInit+0x88>)
 800234a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <SystemInit+0x88>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <SystemInit+0x88>)
 8002356:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800235a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <SystemInit+0x88>)
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <SystemInit+0x88>)
 8002362:	f023 030f 	bic.w	r3, r3, #15
 8002366:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <SystemInit+0x88>)
 800236a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800236c:	4908      	ldr	r1, [pc, #32]	; (8002390 <SystemInit+0x88>)
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <SystemInit+0x90>)
 8002370:	4013      	ands	r3, r2
 8002372:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <SystemInit+0x88>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800237a:	4b04      	ldr	r3, [pc, #16]	; (800238c <SystemInit+0x84>)
 800237c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002380:	609a      	str	r2, [r3, #8]
#endif
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00
 8002390:	40021000 	.word	0x40021000
 8002394:	f87fc00c 	.word	0xf87fc00c
 8002398:	ff00fccc 	.word	0xff00fccc

0800239c <NVIC_GetPriorityGrouping>:
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <NVIC_GetPriorityGrouping+0x18>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	f003 0307 	and.w	r3, r3, #7
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <NVIC_EnableIRQ>:
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	f003 021f 	and.w	r2, r3, #31
 80023c8:	4907      	ldr	r1, [pc, #28]	; (80023e8 <NVIC_EnableIRQ+0x30>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	2001      	movs	r0, #1
 80023d2:	fa00 f202 	lsl.w	r2, r0, r2
 80023d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000e100 	.word	0xe000e100

080023ec <NVIC_SetPriority>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	da0b      	bge.n	8002418 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	490c      	ldr	r1, [pc, #48]	; (8002438 <NVIC_SetPriority+0x4c>)
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	3b04      	subs	r3, #4
 800240e:	0112      	lsls	r2, r2, #4
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	440b      	add	r3, r1
 8002414:	761a      	strb	r2, [r3, #24]
}
 8002416:	e009      	b.n	800242c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4907      	ldr	r1, [pc, #28]	; (800243c <NVIC_SetPriority+0x50>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00
 800243c:	e000e100 	.word	0xe000e100

08002440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f1c3 0307 	rsb	r3, r3, #7
 800245a:	2b04      	cmp	r3, #4
 800245c:	bf28      	it	cs
 800245e:	2304      	movcs	r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3304      	adds	r3, #4
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <NVIC_EncodePriority+0x30>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b03      	subs	r3, #3
 800246e:	e000      	b.n	8002472 <NVIC_EncodePriority+0x32>
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	f04f 32ff 	mov.w	r2, #4294967295
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002488:	f04f 31ff 	mov.w	r1, #4294967295
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	43d9      	mvns	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	4313      	orrs	r3, r2
         );
}
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <LL_APB1_GRP1_EnableClock>:
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024b2:	69da      	ldr	r2, [r3, #28]
 80024b4:	4907      	ldr	r1, [pc, #28]	; (80024d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024be:	69da      	ldr	r2, [r3, #28]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4013      	ands	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024c6:	68fb      	ldr	r3, [r7, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	40021000 	.word	0x40021000

080024d8 <LL_TIM_EnableCounter>:
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f043 0201 	orr.w	r2, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	601a      	str	r2, [r3, #0]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_TIM_EnableARRPreload>:
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	601a      	str	r2, [r3, #0]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_TIM_OC_DisableFast>:
{
 8002518:	b4b0      	push	{r4, r5, r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d028      	beq.n	800257a <LL_TIM_OC_DisableFast+0x62>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b04      	cmp	r3, #4
 800252c:	d023      	beq.n	8002576 <LL_TIM_OC_DisableFast+0x5e>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b10      	cmp	r3, #16
 8002532:	d01e      	beq.n	8002572 <LL_TIM_OC_DisableFast+0x5a>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2b40      	cmp	r3, #64	; 0x40
 8002538:	d019      	beq.n	800256e <LL_TIM_OC_DisableFast+0x56>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002540:	d013      	beq.n	800256a <LL_TIM_OC_DisableFast+0x52>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002548:	d00d      	beq.n	8002566 <LL_TIM_OC_DisableFast+0x4e>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002550:	d007      	beq.n	8002562 <LL_TIM_OC_DisableFast+0x4a>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002558:	d101      	bne.n	800255e <LL_TIM_OC_DisableFast+0x46>
 800255a:	2307      	movs	r3, #7
 800255c:	e00e      	b.n	800257c <LL_TIM_OC_DisableFast+0x64>
 800255e:	2308      	movs	r3, #8
 8002560:	e00c      	b.n	800257c <LL_TIM_OC_DisableFast+0x64>
 8002562:	2306      	movs	r3, #6
 8002564:	e00a      	b.n	800257c <LL_TIM_OC_DisableFast+0x64>
 8002566:	2305      	movs	r3, #5
 8002568:	e008      	b.n	800257c <LL_TIM_OC_DisableFast+0x64>
 800256a:	2304      	movs	r3, #4
 800256c:	e006      	b.n	800257c <LL_TIM_OC_DisableFast+0x64>
 800256e:	2303      	movs	r3, #3
 8002570:	e004      	b.n	800257c <LL_TIM_OC_DisableFast+0x64>
 8002572:	2302      	movs	r3, #2
 8002574:	e002      	b.n	800257c <LL_TIM_OC_DisableFast+0x64>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <LL_TIM_OC_DisableFast+0x64>
 800257a:	2300      	movs	r3, #0
 800257c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3318      	adds	r3, #24
 8002582:	461a      	mov	r2, r3
 8002584:	4629      	mov	r1, r5
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <LL_TIM_OC_DisableFast+0x94>)
 8002588:	5c5b      	ldrb	r3, [r3, r1]
 800258a:	4413      	add	r3, r2
 800258c:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800258e:	6822      	ldr	r2, [r4, #0]
 8002590:	4629      	mov	r1, r5
 8002592:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <LL_TIM_OC_DisableFast+0x98>)
 8002594:	5c5b      	ldrb	r3, [r3, r1]
 8002596:	4619      	mov	r1, r3
 8002598:	2304      	movs	r3, #4
 800259a:	408b      	lsls	r3, r1
 800259c:	43db      	mvns	r3, r3
 800259e:	4013      	ands	r3, r2
 80025a0:	6023      	str	r3, [r4, #0]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bcb0      	pop	{r4, r5, r7}
 80025aa:	4770      	bx	lr
 80025ac:	0800313c 	.word	0x0800313c
 80025b0:	08003148 	.word	0x08003148

080025b4 <LL_TIM_SetClockSource>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80025c6:	f023 0307 	bic.w	r3, r3, #7
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	609a      	str	r2, [r3, #8]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_TIM_SetTriggerOutput>:
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	605a      	str	r2, [r3, #4]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_TIM_DisableMasterSlaveMode>:
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	609a      	str	r2, [r3, #8]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_TIM_EnableIT_UPDATE>:
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f043 0201 	orr.w	r2, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	60da      	str	r2, [r3, #12]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08e      	sub	sp, #56	; 0x38
 8002648:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800264a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]
 8002658:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	2220      	movs	r2, #32
 800265e:	2100      	movs	r1, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f000 fd3f 	bl	80030e4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002666:	2001      	movs	r0, #1
 8002668:	f7ff ff1e 	bl	80024a8 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800266c:	f7ff fe96 	bl	800239c <NVIC_GetPriorityGrouping>
 8002670:	4603      	mov	r3, r0
 8002672:	2200      	movs	r2, #0
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fee2 	bl	8002440 <NVIC_EncodePriority>
 800267c:	4603      	mov	r3, r0
 800267e:	4619      	mov	r1, r3
 8002680:	201c      	movs	r0, #28
 8002682:	f7ff feb3 	bl	80023ec <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002686:	201c      	movs	r0, #28
 8002688:	f7ff fe96 	bl	80023b8 <NVIC_EnableIRQ>

  //TIM2 clock = 8MHz
  TIM_InitStruct.Prescaler = 7999; 								//100Hz
 800268c:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8002690:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002692:	2300      	movs	r3, #0
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 499;								//500ms
 8002696:	f240 13f3 	movw	r3, #499	; 0x1f3
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800269c:	2300      	movs	r3, #0
 800269e:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80026a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a4:	4619      	mov	r1, r3
 80026a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80026aa:	f7fe fa19 	bl	8000ae0 <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM2);
  LL_TIM_EnableARRPreload(TIM2);
 80026ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80026b2:	f7ff ff21 	bl	80024f8 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80026b6:	2100      	movs	r1, #0
 80026b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80026bc:	f7ff ff7a 	bl	80025b4 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 80026c0:	2310      	movs	r3, #16
 80026c2:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	461a      	mov	r2, r3
 80026d8:	2101      	movs	r1, #1
 80026da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80026de:	f7fe fa73 	bl	8000bc8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80026e2:	2101      	movs	r1, #1
 80026e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80026e8:	f7ff ff16 	bl	8002518 <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80026ec:	2100      	movs	r1, #0
 80026ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80026f2:	f7ff ff74 	bl	80025de <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80026f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80026fa:	f7ff ff83 	bl	8002604 <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM2);
 80026fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002702:	f7ff ff8f 	bl	8002624 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 8002706:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800270a:	f7ff fee5 	bl	80024d8 <LL_TIM_EnableCounter>

}
 800270e:	bf00      	nop
 8002710:	3738      	adds	r7, #56	; 0x38
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <NVIC_EnableIRQ>:
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	f003 021f 	and.w	r2, r3, #31
 8002728:	4907      	ldr	r1, [pc, #28]	; (8002748 <NVIC_EnableIRQ+0x30>)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	2001      	movs	r0, #1
 8002732:	fa00 f202 	lsl.w	r2, r0, r2
 8002736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	e000e100 	.word	0xe000e100

0800274c <NVIC_SetPriority>:
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	6039      	str	r1, [r7, #0]
 8002756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	2b00      	cmp	r3, #0
 800275e:	da0b      	bge.n	8002778 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	b2da      	uxtb	r2, r3
 8002764:	490c      	ldr	r1, [pc, #48]	; (8002798 <NVIC_SetPriority+0x4c>)
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	3b04      	subs	r3, #4
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	440b      	add	r3, r1
 8002774:	761a      	strb	r2, [r3, #24]
}
 8002776:	e009      	b.n	800278c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	4907      	ldr	r1, [pc, #28]	; (800279c <NVIC_SetPriority+0x50>)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	0112      	lsls	r2, r2, #4
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	440b      	add	r3, r1
 8002788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000ed00 	.word	0xe000ed00
 800279c:	e000e100 	.word	0xe000e100

080027a0 <LL_AHB1_GRP1_EnableClock>:
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	4907      	ldr	r1, [pc, #28]	; (80027cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4013      	ands	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027be:	68fb      	ldr	r3, [r7, #12]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	40021000 	.word	0x40021000

080027d0 <LL_APB1_GRP1_EnableClock>:
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80027da:	69da      	ldr	r2, [r3, #28]
 80027dc:	4907      	ldr	r1, [pc, #28]	; (80027fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80027e6:	69da      	ldr	r2, [r3, #28]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4013      	ands	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027ee:	68fb      	ldr	r3, [r7, #12]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	40021000 	.word	0x40021000

08002800 <LL_DMA_EnableChannel>:
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	3b01      	subs	r3, #1
 800280e:	4a0b      	ldr	r2, [pc, #44]	; (800283c <LL_DMA_EnableChannel+0x3c>)
 8002810:	5cd3      	ldrb	r3, [r2, r3]
 8002812:	461a      	mov	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4413      	add	r3, r2
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	3a01      	subs	r2, #1
 800281e:	4907      	ldr	r1, [pc, #28]	; (800283c <LL_DMA_EnableChannel+0x3c>)
 8002820:	5c8a      	ldrb	r2, [r1, r2]
 8002822:	4611      	mov	r1, r2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	440a      	add	r2, r1
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6013      	str	r3, [r2, #0]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	08003154 	.word	0x08003154

08002840 <LL_DMA_SetDataTransferDirection>:
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	3b01      	subs	r3, #1
 8002850:	4a0d      	ldr	r2, [pc, #52]	; (8002888 <LL_DMA_SetDataTransferDirection+0x48>)
 8002852:	5cd3      	ldrb	r3, [r2, r3]
 8002854:	461a      	mov	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4413      	add	r3, r2
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002860:	f023 0310 	bic.w	r3, r3, #16
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	3a01      	subs	r2, #1
 8002868:	4907      	ldr	r1, [pc, #28]	; (8002888 <LL_DMA_SetDataTransferDirection+0x48>)
 800286a:	5c8a      	ldrb	r2, [r1, r2]
 800286c:	4611      	mov	r1, r2
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	440a      	add	r2, r1
 8002872:	4611      	mov	r1, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	08003154 	.word	0x08003154

0800288c <LL_DMA_GetDataTransferDirection>:
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	3b01      	subs	r3, #1
 800289a:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <LL_DMA_GetDataTransferDirection+0x2c>)
 800289c:	5cd3      	ldrb	r3, [r2, r3]
 800289e:	461a      	mov	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4413      	add	r3, r2
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	f244 0310 	movw	r3, #16400	; 0x4010
 80028aa:	4013      	ands	r3, r2
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	08003154 	.word	0x08003154

080028bc <LL_DMA_SetMode>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <LL_DMA_SetMode+0x44>)
 80028ce:	5cd3      	ldrb	r3, [r2, r3]
 80028d0:	461a      	mov	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4413      	add	r3, r2
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f023 0220 	bic.w	r2, r3, #32
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	3b01      	subs	r3, #1
 80028e0:	4907      	ldr	r1, [pc, #28]	; (8002900 <LL_DMA_SetMode+0x44>)
 80028e2:	5ccb      	ldrb	r3, [r1, r3]
 80028e4:	4619      	mov	r1, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	440b      	add	r3, r1
 80028ea:	4619      	mov	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
}
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	08003154 	.word	0x08003154

08002904 <LL_DMA_SetPeriphIncMode>:
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	3b01      	subs	r3, #1
 8002914:	4a0c      	ldr	r2, [pc, #48]	; (8002948 <LL_DMA_SetPeriphIncMode+0x44>)
 8002916:	5cd3      	ldrb	r3, [r2, r3]
 8002918:	461a      	mov	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4413      	add	r3, r2
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	3b01      	subs	r3, #1
 8002928:	4907      	ldr	r1, [pc, #28]	; (8002948 <LL_DMA_SetPeriphIncMode+0x44>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	4619      	mov	r1, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	440b      	add	r3, r1
 8002932:	4619      	mov	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	08003154 	.word	0x08003154

0800294c <LL_DMA_SetMemoryIncMode>:
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	3b01      	subs	r3, #1
 800295c:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <LL_DMA_SetMemoryIncMode+0x44>)
 800295e:	5cd3      	ldrb	r3, [r2, r3]
 8002960:	461a      	mov	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4413      	add	r3, r2
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	3b01      	subs	r3, #1
 8002970:	4907      	ldr	r1, [pc, #28]	; (8002990 <LL_DMA_SetMemoryIncMode+0x44>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	4619      	mov	r1, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	440b      	add	r3, r1
 800297a:	4619      	mov	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	08003154 	.word	0x08003154

08002994 <LL_DMA_SetPeriphSize>:
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	4a0c      	ldr	r2, [pc, #48]	; (80029d8 <LL_DMA_SetPeriphSize+0x44>)
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	461a      	mov	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4413      	add	r3, r2
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	4907      	ldr	r1, [pc, #28]	; (80029d8 <LL_DMA_SetPeriphSize+0x44>)
 80029ba:	5ccb      	ldrb	r3, [r1, r3]
 80029bc:	4619      	mov	r1, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	440b      	add	r3, r1
 80029c2:	4619      	mov	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	600b      	str	r3, [r1, #0]
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	08003154 	.word	0x08003154

080029dc <LL_DMA_SetMemorySize>:
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	4a0c      	ldr	r2, [pc, #48]	; (8002a20 <LL_DMA_SetMemorySize+0x44>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	461a      	mov	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4413      	add	r3, r2
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	4907      	ldr	r1, [pc, #28]	; (8002a20 <LL_DMA_SetMemorySize+0x44>)
 8002a02:	5ccb      	ldrb	r3, [r1, r3]
 8002a04:	4619      	mov	r1, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	440b      	add	r3, r1
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]
}
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	08003154 	.word	0x08003154

08002a24 <LL_DMA_SetChannelPriorityLevel>:
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	4a0c      	ldr	r2, [pc, #48]	; (8002a68 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002a36:	5cd3      	ldrb	r3, [r2, r3]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	4907      	ldr	r1, [pc, #28]	; (8002a68 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002a4a:	5ccb      	ldrb	r3, [r1, r3]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	440b      	add	r3, r1
 8002a52:	4619      	mov	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	08003154 	.word	0x08003154

08002a6c <LL_DMA_SetDataLength>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	4a0c      	ldr	r2, [pc, #48]	; (8002ab0 <LL_DMA_SetDataLength+0x44>)
 8002a7e:	5cd3      	ldrb	r3, [r2, r3]
 8002a80:	461a      	mov	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4413      	add	r3, r2
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	0c1b      	lsrs	r3, r3, #16
 8002a8a:	041b      	lsls	r3, r3, #16
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	3a01      	subs	r2, #1
 8002a90:	4907      	ldr	r1, [pc, #28]	; (8002ab0 <LL_DMA_SetDataLength+0x44>)
 8002a92:	5c8a      	ldrb	r2, [r1, r2]
 8002a94:	4611      	mov	r1, r2
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	440a      	add	r2, r1
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	08003154 	.word	0x08003154

08002ab4 <LL_DMA_GetDataLength>:
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	4a06      	ldr	r2, [pc, #24]	; (8002adc <LL_DMA_GetDataLength+0x28>)
 8002ac4:	5cd3      	ldrb	r3, [r2, r3]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4413      	add	r3, r2
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	b29b      	uxth	r3, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	08003154 	.word	0x08003154

08002ae0 <LL_DMA_ConfigAddresses>:
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	2b10      	cmp	r3, #16
 8002af2:	d114      	bne.n	8002b1e <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	4a16      	ldr	r2, [pc, #88]	; (8002b54 <LL_DMA_ConfigAddresses+0x74>)
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	461a      	mov	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4413      	add	r3, r2
 8002b02:	461a      	mov	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	4a11      	ldr	r2, [pc, #68]	; (8002b54 <LL_DMA_ConfigAddresses+0x74>)
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	461a      	mov	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4413      	add	r3, r2
 8002b16:	461a      	mov	r2, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	6093      	str	r3, [r2, #8]
}
 8002b1c:	e013      	b.n	8002b46 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	4a0c      	ldr	r2, [pc, #48]	; (8002b54 <LL_DMA_ConfigAddresses+0x74>)
 8002b24:	5cd3      	ldrb	r3, [r2, r3]
 8002b26:	461a      	mov	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <LL_DMA_ConfigAddresses+0x74>)
 8002b38:	5cd3      	ldrb	r3, [r2, r3]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	461a      	mov	r2, r3
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	60d3      	str	r3, [r2, #12]
}
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	08003154 	.word	0x08003154

08002b58 <LL_DMA_SetMemoryAddress>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	4a06      	ldr	r2, [pc, #24]	; (8002b84 <LL_DMA_SetMemoryAddress+0x2c>)
 8002b6a:	5cd3      	ldrb	r3, [r2, r3]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4413      	add	r3, r2
 8002b72:	461a      	mov	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	60d3      	str	r3, [r2, #12]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	08003154 	.word	0x08003154

08002b88 <LL_DMA_SetPeriphAddress>:
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	4a06      	ldr	r2, [pc, #24]	; (8002bb4 <LL_DMA_SetPeriphAddress+0x2c>)
 8002b9a:	5cd3      	ldrb	r3, [r2, r3]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6093      	str	r3, [r2, #8]
}
 8002ba8:	bf00      	nop
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	08003154 	.word	0x08003154

08002bb8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	4a0b      	ldr	r2, [pc, #44]	; (8002bf4 <LL_DMA_EnableIT_TC+0x3c>)
 8002bc8:	5cd3      	ldrb	r3, [r2, r3]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4413      	add	r3, r2
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	3a01      	subs	r2, #1
 8002bd6:	4907      	ldr	r1, [pc, #28]	; (8002bf4 <LL_DMA_EnableIT_TC+0x3c>)
 8002bd8:	5c8a      	ldrb	r2, [r1, r2]
 8002bda:	4611      	mov	r1, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	440a      	add	r2, r1
 8002be0:	f043 0302 	orr.w	r3, r3, #2
 8002be4:	6013      	str	r3, [r2, #0]
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	08003154 	.word	0x08003154

08002bf8 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	4a0b      	ldr	r2, [pc, #44]	; (8002c34 <LL_DMA_EnableIT_HT+0x3c>)
 8002c08:	5cd3      	ldrb	r3, [r2, r3]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4413      	add	r3, r2
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	3a01      	subs	r2, #1
 8002c16:	4907      	ldr	r1, [pc, #28]	; (8002c34 <LL_DMA_EnableIT_HT+0x3c>)
 8002c18:	5c8a      	ldrb	r2, [r1, r2]
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	440a      	add	r2, r1
 8002c20:	f043 0304 	orr.w	r3, r3, #4
 8002c24:	6013      	str	r3, [r2, #0]
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	08003154 	.word	0x08003154

08002c38 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	4a0b      	ldr	r2, [pc, #44]	; (8002c74 <LL_DMA_EnableIT_TE+0x3c>)
 8002c48:	5cd3      	ldrb	r3, [r2, r3]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4413      	add	r3, r2
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	3a01      	subs	r2, #1
 8002c56:	4907      	ldr	r1, [pc, #28]	; (8002c74 <LL_DMA_EnableIT_TE+0x3c>)
 8002c58:	5c8a      	ldrb	r2, [r1, r2]
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	440a      	add	r2, r1
 8002c60:	f043 0308 	orr.w	r3, r3, #8
 8002c64:	6013      	str	r3, [r2, #0]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	08003154 	.word	0x08003154

08002c78 <LL_USART_Enable>:
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f043 0201 	orr.w	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	601a      	str	r2, [r3, #0]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_USART_ConfigAsyncMode>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f043 0210 	orr.w	r2, r3, #16
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	601a      	str	r2, [r3, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	609a      	str	r2, [r3, #8]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	609a      	str	r2, [r3, #8]
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8002d44:	b490      	push	{r4, r7}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 8002d4e:	2400      	movs	r4, #0

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d103      	bne.n	8002d5e <LL_USART_DMA_GetRegAddr+0x1a>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3328      	adds	r3, #40	; 0x28
 8002d5a:	461c      	mov	r4, r3
 8002d5c:	e002      	b.n	8002d64 <LL_USART_DMA_GetRegAddr+0x20>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3324      	adds	r3, #36	; 0x24
 8002d62:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 8002d64:	4623      	mov	r3, r4
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc90      	pop	{r4, r7}
 8002d6e:	4770      	bx	lr

08002d70 <USART2_RegisterCallback>:
uint8_t bufferUSART2dma[DMA_USART2_BUFFER_SIZE];

static void (* USART2_ProcessData)(const uint8_t* data, uint16_t len) = 0;

void USART2_RegisterCallback(void *callback)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a03      	ldr	r2, [pc, #12]	; (8002d90 <USART2_RegisterCallback+0x20>)
 8002d82:	6013      	str	r3, [r2, #0]
	}
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	20000038 	.word	0x20000038

08002d94 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b090      	sub	sp, #64	; 0x40
 8002d98:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002d9a:	f107 031c 	add.w	r3, r7, #28
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	60da      	str	r2, [r3, #12]
 8002da8:	611a      	str	r2, [r3, #16]
 8002daa:	615a      	str	r2, [r3, #20]
 8002dac:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dae:	1d3b      	adds	r3, r7, #4
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
 8002dbc:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002dbe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002dc2:	f7ff fd05 	bl	80027d0 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002dc6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002dca:	f7ff fce9 	bl	80027a0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002dce:	f248 0304 	movw	r3, #32772	; 0x8004
 8002dd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002de4:	2307      	movs	r3, #7
 8002de6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	4619      	mov	r1, r3
 8002dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002df0:	f7fd fbc5 	bl	800057e <LL_GPIO_Init>

  /* USART2 DMA Init */
  
  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002df4:	2200      	movs	r2, #0
 8002df6:	2106      	movs	r1, #6
 8002df8:	4854      	ldr	r0, [pc, #336]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002dfa:	f7ff fd21 	bl	8002840 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8002dfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e02:	2106      	movs	r1, #6
 8002e04:	4851      	ldr	r0, [pc, #324]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002e06:	f7ff fe0d 	bl	8002a24 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2106      	movs	r1, #6
 8002e0e:	484f      	ldr	r0, [pc, #316]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002e10:	f7ff fd54 	bl	80028bc <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002e14:	2200      	movs	r2, #0
 8002e16:	2106      	movs	r1, #6
 8002e18:	484c      	ldr	r0, [pc, #304]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002e1a:	f7ff fd73 	bl	8002904 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8002e1e:	2280      	movs	r2, #128	; 0x80
 8002e20:	2106      	movs	r1, #6
 8002e22:	484a      	ldr	r0, [pc, #296]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002e24:	f7ff fd92 	bl	800294c <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2106      	movs	r1, #6
 8002e2c:	4847      	ldr	r0, [pc, #284]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002e2e:	f7ff fdb1 	bl	8002994 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002e32:	2200      	movs	r2, #0
 8002e34:	2106      	movs	r1, #6
 8002e36:	4845      	ldr	r0, [pc, #276]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002e38:	f7ff fdd0 	bl	80029dc <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	4844      	ldr	r0, [pc, #272]	; (8002f50 <MX_USART2_UART_Init+0x1bc>)
 8002e40:	f7ff ff80 	bl	8002d44 <LL_USART_DMA_GetRegAddr>
 8002e44:	4604      	mov	r4, r0
 8002e46:	4d43      	ldr	r5, [pc, #268]	; (8002f54 <MX_USART2_UART_Init+0x1c0>)
 8002e48:	2106      	movs	r1, #6
 8002e4a:	4840      	ldr	r0, [pc, #256]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002e4c:	f7ff fd1e 	bl	800288c <LL_DMA_GetDataTransferDirection>
 8002e50:	4603      	mov	r3, r0
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	462b      	mov	r3, r5
 8002e56:	4622      	mov	r2, r4
 8002e58:	2106      	movs	r1, #6
 8002e5a:	483c      	ldr	r0, [pc, #240]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002e5c:	f7ff fe40 	bl	8002ae0 <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART2dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002e60:	2214      	movs	r2, #20
 8002e62:	2106      	movs	r1, #6
 8002e64:	4839      	ldr	r0, [pc, #228]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002e66:	f7ff fe01 	bl	8002a6c <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002e6a:	2106      	movs	r1, #6
 8002e6c:	4837      	ldr	r0, [pc, #220]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002e6e:	f7ff fcc7 	bl	8002800 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8002e72:	4837      	ldr	r0, [pc, #220]	; (8002f50 <MX_USART2_UART_Init+0x1bc>)
 8002e74:	f7ff ff46 	bl	8002d04 <LL_USART_EnableDMAReq_RX>

#if !POLLING
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8002e78:	2106      	movs	r1, #6
 8002e7a:	4834      	ldr	r0, [pc, #208]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002e7c:	f7ff fe9c 	bl	8002bb8 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8002e80:	2106      	movs	r1, #6
 8002e82:	4832      	ldr	r0, [pc, #200]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002e84:	f7ff feb8 	bl	8002bf8 <LL_DMA_EnableIT_HT>
#endif

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002e88:	2210      	movs	r2, #16
 8002e8a:	2107      	movs	r1, #7
 8002e8c:	482f      	ldr	r0, [pc, #188]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002e8e:	f7ff fcd7 	bl	8002840 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8002e92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e96:	2107      	movs	r1, #7
 8002e98:	482c      	ldr	r0, [pc, #176]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002e9a:	f7ff fdc3 	bl	8002a24 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2107      	movs	r1, #7
 8002ea2:	482a      	ldr	r0, [pc, #168]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002ea4:	f7ff fd0a 	bl	80028bc <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2107      	movs	r1, #7
 8002eac:	4827      	ldr	r0, [pc, #156]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002eae:	f7ff fd29 	bl	8002904 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8002eb2:	2280      	movs	r2, #128	; 0x80
 8002eb4:	2107      	movs	r1, #7
 8002eb6:	4825      	ldr	r0, [pc, #148]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002eb8:	f7ff fd48 	bl	800294c <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2107      	movs	r1, #7
 8002ec0:	4822      	ldr	r0, [pc, #136]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002ec2:	f7ff fd67 	bl	8002994 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2107      	movs	r1, #7
 8002eca:	4820      	ldr	r0, [pc, #128]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002ecc:	f7ff fd86 	bl	80029dc <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	481f      	ldr	r0, [pc, #124]	; (8002f50 <MX_USART2_UART_Init+0x1bc>)
 8002ed4:	f7ff ff36 	bl	8002d44 <LL_USART_DMA_GetRegAddr>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	461a      	mov	r2, r3
 8002edc:	2107      	movs	r1, #7
 8002ede:	481b      	ldr	r0, [pc, #108]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002ee0:	f7ff fe52 	bl	8002b88 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8002ee4:	481a      	ldr	r0, [pc, #104]	; (8002f50 <MX_USART2_UART_Init+0x1bc>)
 8002ee6:	f7ff ff1d 	bl	8002d24 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8002eea:	2107      	movs	r1, #7
 8002eec:	4817      	ldr	r0, [pc, #92]	; (8002f4c <MX_USART2_UART_Init+0x1b8>)
 8002eee:	f7ff fea3 	bl	8002c38 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	2026      	movs	r0, #38	; 0x26
 8002ef6:	f7ff fc29 	bl	800274c <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002efa:	2026      	movs	r0, #38	; 0x26
 8002efc:	f7ff fc0c 	bl	8002718 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8002f00:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002f04:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002f06:	2300      	movs	r3, #0
 8002f08:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002f12:	230c      	movs	r3, #12
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002f1e:	f107 031c 	add.w	r3, r7, #28
 8002f22:	4619      	mov	r1, r3
 8002f24:	480a      	ldr	r0, [pc, #40]	; (8002f50 <MX_USART2_UART_Init+0x1bc>)
 8002f26:	f7fe f9d3 	bl	80012d0 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8002f2a:	4809      	ldr	r0, [pc, #36]	; (8002f50 <MX_USART2_UART_Init+0x1bc>)
 8002f2c:	f7ff feda 	bl	8002ce4 <LL_USART_DisableIT_CTS>
#if !POLLING
  LL_USART_EnableIT_IDLE(USART2);
 8002f30:	4807      	ldr	r0, [pc, #28]	; (8002f50 <MX_USART2_UART_Init+0x1bc>)
 8002f32:	f7ff fec7 	bl	8002cc4 <LL_USART_EnableIT_IDLE>
#endif
  LL_USART_ConfigAsyncMode(USART2);
 8002f36:	4806      	ldr	r0, [pc, #24]	; (8002f50 <MX_USART2_UART_Init+0x1bc>)
 8002f38:	f7ff feae 	bl	8002c98 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002f3c:	4804      	ldr	r0, [pc, #16]	; (8002f50 <MX_USART2_UART_Init+0x1bc>)
 8002f3e:	f7ff fe9b 	bl	8002c78 <LL_USART_Enable>
}
 8002f42:	bf00      	nop
 8002f44:	3738      	adds	r7, #56	; 0x38
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bdb0      	pop	{r4, r5, r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40020000 	.word	0x40020000
 8002f50:	40004400 	.word	0x40004400
 8002f54:	20000040 	.word	0x20000040

08002f58 <USART2_PutBuffer>:


void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	461a      	mov	r2, r3
 8002f68:	2107      	movs	r1, #7
 8002f6a:	480a      	ldr	r0, [pc, #40]	; (8002f94 <USART2_PutBuffer+0x3c>)
 8002f6c:	f7ff fdf4 	bl	8002b58 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	461a      	mov	r2, r3
 8002f74:	2107      	movs	r1, #7
 8002f76:	4807      	ldr	r0, [pc, #28]	; (8002f94 <USART2_PutBuffer+0x3c>)
 8002f78:	f7ff fd78 	bl	8002a6c <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8002f7c:	2107      	movs	r1, #7
 8002f7e:	4805      	ldr	r0, [pc, #20]	; (8002f94 <USART2_PutBuffer+0x3c>)
 8002f80:	f7ff fe1a 	bl	8002bb8 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002f84:	2107      	movs	r1, #7
 8002f86:	4803      	ldr	r0, [pc, #12]	; (8002f94 <USART2_PutBuffer+0x3c>)
 8002f88:	f7ff fc3a 	bl	8002800 <LL_DMA_EnableChannel>
}
 8002f8c:	bf00      	nop
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40020000 	.word	0x40020000

08002f98 <USART2_CheckDmaReception>:


void USART2_CheckDmaReception(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
	if(USART2_ProcessData == 0) return;
 8002f9e:	4b26      	ldr	r3, [pc, #152]	; (8003038 <USART2_CheckDmaReception+0xa0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d043      	beq.n	800302e <USART2_CheckDmaReception+0x96>

	static uint16_t old_pos = 0;

	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8002fa6:	2106      	movs	r1, #6
 8002fa8:	4824      	ldr	r0, [pc, #144]	; (800303c <USART2_CheckDmaReception+0xa4>)
 8002faa:	f7ff fd83 	bl	8002ab4 <LL_DMA_GetDataLength>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f1c3 0314 	rsb	r3, r3, #20
 8002fb6:	80fb      	strh	r3, [r7, #6]

	if (pos != old_pos)
 8002fb8:	4b21      	ldr	r3, [pc, #132]	; (8003040 <USART2_CheckDmaReception+0xa8>)
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	88fa      	ldrh	r2, [r7, #6]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d02a      	beq.n	8003018 <USART2_CheckDmaReception+0x80>
	{
		if (pos > old_pos)
 8002fc2:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <USART2_CheckDmaReception+0xa8>)
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	88fa      	ldrh	r2, [r7, #6]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d90e      	bls.n	8002fea <USART2_CheckDmaReception+0x52>
		{
			USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <USART2_CheckDmaReception+0xa0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <USART2_CheckDmaReception+0xa8>)
 8002fd2:	8812      	ldrh	r2, [r2, #0]
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4a1b      	ldr	r2, [pc, #108]	; (8003044 <USART2_CheckDmaReception+0xac>)
 8002fd8:	1888      	adds	r0, r1, r2
 8002fda:	4a19      	ldr	r2, [pc, #100]	; (8003040 <USART2_CheckDmaReception+0xa8>)
 8002fdc:	8812      	ldrh	r2, [r2, #0]
 8002fde:	88f9      	ldrh	r1, [r7, #6]
 8002fe0:	1a8a      	subs	r2, r1, r2
 8002fe2:	b292      	uxth	r2, r2
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4798      	blx	r3
 8002fe8:	e016      	b.n	8003018 <USART2_CheckDmaReception+0x80>
		}
		else
		{
			USART2_ProcessData(&bufferUSART2dma[old_pos], DMA_USART2_BUFFER_SIZE - old_pos);
 8002fea:	4b13      	ldr	r3, [pc, #76]	; (8003038 <USART2_CheckDmaReception+0xa0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a14      	ldr	r2, [pc, #80]	; (8003040 <USART2_CheckDmaReception+0xa8>)
 8002ff0:	8812      	ldrh	r2, [r2, #0]
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4a13      	ldr	r2, [pc, #76]	; (8003044 <USART2_CheckDmaReception+0xac>)
 8002ff6:	1888      	adds	r0, r1, r2
 8002ff8:	4a11      	ldr	r2, [pc, #68]	; (8003040 <USART2_CheckDmaReception+0xa8>)
 8002ffa:	8812      	ldrh	r2, [r2, #0]
 8002ffc:	f1c2 0214 	rsb	r2, r2, #20
 8003000:	b292      	uxth	r2, r2
 8003002:	4611      	mov	r1, r2
 8003004:	4798      	blx	r3

			if (pos > 0)
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <USART2_CheckDmaReception+0x80>
			{
				USART2_ProcessData(&bufferUSART2dma[0], pos);
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <USART2_CheckDmaReception+0xa0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	88fa      	ldrh	r2, [r7, #6]
 8003012:	4611      	mov	r1, r2
 8003014:	480b      	ldr	r0, [pc, #44]	; (8003044 <USART2_CheckDmaReception+0xac>)
 8003016:	4798      	blx	r3
			}
		}
	}

	old_pos = pos;
 8003018:	4a09      	ldr	r2, [pc, #36]	; (8003040 <USART2_CheckDmaReception+0xa8>)
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	8013      	strh	r3, [r2, #0]

	if (old_pos == DMA_USART2_BUFFER_SIZE)
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <USART2_CheckDmaReception+0xa8>)
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	2b14      	cmp	r3, #20
 8003024:	d104      	bne.n	8003030 <USART2_CheckDmaReception+0x98>
	{
		old_pos = 0;
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <USART2_CheckDmaReception+0xa8>)
 8003028:	2200      	movs	r2, #0
 800302a:	801a      	strh	r2, [r3, #0]
 800302c:	e000      	b.n	8003030 <USART2_CheckDmaReception+0x98>
	if(USART2_ProcessData == 0) return;
 800302e:	bf00      	nop
	}
}
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000038 	.word	0x20000038
 800303c:	40020000 	.word	0x40020000
 8003040:	2000003c 	.word	0x2000003c
 8003044:	20000040 	.word	0x20000040

08003048 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003080 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800304c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800304e:	e003      	b.n	8003058 <LoopCopyDataInit>

08003050 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003052:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003054:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003056:	3104      	adds	r1, #4

08003058 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003058:	480b      	ldr	r0, [pc, #44]	; (8003088 <LoopForever+0xa>)
	ldr	r3, =_edata
 800305a:	4b0c      	ldr	r3, [pc, #48]	; (800308c <LoopForever+0xe>)
	adds	r2, r0, r1
 800305c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800305e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003060:	d3f6      	bcc.n	8003050 <CopyDataInit>
	ldr	r2, =_sbss
 8003062:	4a0b      	ldr	r2, [pc, #44]	; (8003090 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003064:	e002      	b.n	800306c <LoopFillZerobss>

08003066 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003066:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003068:	f842 3b04 	str.w	r3, [r2], #4

0800306c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <LoopForever+0x16>)
	cmp	r2, r3
 800306e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003070:	d3f9      	bcc.n	8003066 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003072:	f7ff f949 	bl	8002308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003076:	f000 f811 	bl	800309c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800307a:	f7fe fe5d 	bl	8001d38 <main>

0800307e <LoopForever>:

LoopForever:
    b LoopForever
 800307e:	e7fe      	b.n	800307e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003080:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003084:	08003164 	.word	0x08003164
	ldr	r0, =_sdata
 8003088:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800308c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8003090:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8003094:	20000054 	.word	0x20000054

08003098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003098:	e7fe      	b.n	8003098 <ADC1_2_IRQHandler>
	...

0800309c <__libc_init_array>:
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	4d0d      	ldr	r5, [pc, #52]	; (80030d4 <__libc_init_array+0x38>)
 80030a0:	4c0d      	ldr	r4, [pc, #52]	; (80030d8 <__libc_init_array+0x3c>)
 80030a2:	1b64      	subs	r4, r4, r5
 80030a4:	10a4      	asrs	r4, r4, #2
 80030a6:	2600      	movs	r6, #0
 80030a8:	42a6      	cmp	r6, r4
 80030aa:	d109      	bne.n	80030c0 <__libc_init_array+0x24>
 80030ac:	4d0b      	ldr	r5, [pc, #44]	; (80030dc <__libc_init_array+0x40>)
 80030ae:	4c0c      	ldr	r4, [pc, #48]	; (80030e0 <__libc_init_array+0x44>)
 80030b0:	f000 f820 	bl	80030f4 <_init>
 80030b4:	1b64      	subs	r4, r4, r5
 80030b6:	10a4      	asrs	r4, r4, #2
 80030b8:	2600      	movs	r6, #0
 80030ba:	42a6      	cmp	r6, r4
 80030bc:	d105      	bne.n	80030ca <__libc_init_array+0x2e>
 80030be:	bd70      	pop	{r4, r5, r6, pc}
 80030c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c4:	4798      	blx	r3
 80030c6:	3601      	adds	r6, #1
 80030c8:	e7ee      	b.n	80030a8 <__libc_init_array+0xc>
 80030ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ce:	4798      	blx	r3
 80030d0:	3601      	adds	r6, #1
 80030d2:	e7f2      	b.n	80030ba <__libc_init_array+0x1e>
 80030d4:	0800315c 	.word	0x0800315c
 80030d8:	0800315c 	.word	0x0800315c
 80030dc:	0800315c 	.word	0x0800315c
 80030e0:	08003160 	.word	0x08003160

080030e4 <memset>:
 80030e4:	4402      	add	r2, r0
 80030e6:	4603      	mov	r3, r0
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d100      	bne.n	80030ee <memset+0xa>
 80030ec:	4770      	bx	lr
 80030ee:	f803 1b01 	strb.w	r1, [r3], #1
 80030f2:	e7f9      	b.n	80030e8 <memset+0x4>

080030f4 <_init>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	bf00      	nop
 80030f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fa:	bc08      	pop	{r3}
 80030fc:	469e      	mov	lr, r3
 80030fe:	4770      	bx	lr

08003100 <_fini>:
 8003100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003102:	bf00      	nop
 8003104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003106:	bc08      	pop	{r3}
 8003108:	469e      	mov	lr, r3
 800310a:	4770      	bx	lr
