
vrs_cv4_interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001328  08001328  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001328  08001328  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001328  08001328  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001328  08001328  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001328  08001328  00011328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800132c  0800132c  0001132c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000367a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ea4  00000000  00000000  000236ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000400  00000000  00000000  00024558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000388  00000000  00000000  00024958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000143b7  00000000  00000000  00024ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003404  00000000  00000000  00039097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006dddb  00000000  00000000  0003c49b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000aa276  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f20  00000000  00000000  000aa2cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001310 	.word	0x08001310

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001310 	.word	0x08001310

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000316:	4a13      	ldr	r2, [pc, #76]	; (8000364 <LL_SYSCFG_SetEXTISource+0x58>)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	3302      	adds	r3, #2
 800031e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	0c1b      	lsrs	r3, r3, #16
 8000326:	43db      	mvns	r3, r3
 8000328:	ea02 0103 	and.w	r1, r2, r3
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	fa93 f3a3 	rbit	r3, r3
 8000338:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	fab3 f383 	clz	r3, r3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	fa03 f202 	lsl.w	r2, r3, r2
 800034a:	4806      	ldr	r0, [pc, #24]	; (8000364 <LL_SYSCFG_SetEXTISource+0x58>)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	430a      	orrs	r2, r1
 8000352:	3302      	adds	r3, #2
 8000354:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000358:	bf00      	nop
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	40010000 	.word	0x40010000

08000368 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000368:	b480      	push	{r7}
 800036a:	b089      	sub	sp, #36	; 0x24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	fa93 f3a3 	rbit	r3, r3
 8000382:	613b      	str	r3, [r7, #16]
  return result;
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	fab3 f383 	clz	r3, r3
 800038a:	b2db      	uxtb	r3, r3
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	2103      	movs	r1, #3
 8000390:	fa01 f303 	lsl.w	r3, r1, r3
 8000394:	43db      	mvns	r3, r3
 8000396:	401a      	ands	r2, r3
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800039c:	69fb      	ldr	r3, [r7, #28]
 800039e:	fa93 f3a3 	rbit	r3, r3
 80003a2:	61bb      	str	r3, [r7, #24]
  return result;
 80003a4:	69bb      	ldr	r3, [r7, #24]
 80003a6:	fab3 f383 	clz	r3, r3
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	6879      	ldr	r1, [r7, #4]
 80003b0:	fa01 f303 	lsl.w	r3, r1, r3
 80003b4:	431a      	orrs	r2, r3
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	601a      	str	r2, [r3, #0]
}
 80003ba:	bf00      	nop
 80003bc:	3724      	adds	r7, #36	; 0x24
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b089      	sub	sp, #36	; 0x24
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	60f8      	str	r0, [r7, #12]
 80003ce:	60b9      	str	r1, [r7, #8]
 80003d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	68da      	ldr	r2, [r3, #12]
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	fa93 f3a3 	rbit	r3, r3
 80003e0:	613b      	str	r3, [r7, #16]
  return result;
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	fab3 f383 	clz	r3, r3
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	2103      	movs	r1, #3
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	43db      	mvns	r3, r3
 80003f4:	401a      	ands	r2, r3
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003fa:	69fb      	ldr	r3, [r7, #28]
 80003fc:	fa93 f3a3 	rbit	r3, r3
 8000400:	61bb      	str	r3, [r7, #24]
  return result;
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	fab3 f383 	clz	r3, r3
 8000408:	b2db      	uxtb	r3, r3
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	6879      	ldr	r1, [r7, #4]
 800040e:	fa01 f303 	lsl.w	r3, r1, r3
 8000412:	431a      	orrs	r2, r3
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	60da      	str	r2, [r3, #12]
}
 8000418:	bf00      	nop
 800041a:	3724      	adds	r7, #36	; 0x24
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	683a      	ldr	r2, [r7, #0]
 8000432:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08a      	sub	sp, #40	; 0x28
 8000444:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000446:	f107 031c 	add.w	r3, r7, #28
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
 8000460:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000462:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000466:	f7ff ff39 	bl	80002dc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 800046a:	2110      	movs	r1, #16
 800046c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000470:	f7ff ffd8 	bl	8000424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE3);
 8000474:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff ff47 	bl	800030c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_3, LL_GPIO_PULL_NO);
 800047e:	2200      	movs	r2, #0
 8000480:	2108      	movs	r1, #8
 8000482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000486:	f7ff ff9e 	bl	80003c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 800048a:	2200      	movs	r2, #0
 800048c:	2108      	movs	r1, #8
 800048e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000492:	f7ff ff69 	bl	8000368 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000496:	2308      	movs	r3, #8
 8000498:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800049a:	2300      	movs	r3, #0
 800049c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800049e:	2301      	movs	r3, #1
 80004a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80004a4:	2300      	movs	r3, #0
 80004a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80004aa:	2301      	movs	r3, #1
 80004ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80004b0:	f107 031c 	add.w	r3, r7, #28
 80004b4:	4618      	mov	r0, r3
 80004b6:	f000 fc41 	bl	8000d3c <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80004ba:	2310      	movs	r3, #16
 80004bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004be:	2301      	movs	r3, #1
 80004c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	4619      	mov	r1, r3
 80004d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d6:	f000 fe29 	bl	800112c <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80004da:	f7ff fe75 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 80004de:	4603      	mov	r3, r0
 80004e0:	2200      	movs	r2, #0
 80004e2:	2100      	movs	r1, #0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff fec5 	bl	8000274 <NVIC_EncodePriority>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4619      	mov	r1, r3
 80004ee:	2009      	movs	r0, #9
 80004f0:	f7ff fe96 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80004f4:	2009      	movs	r0, #9
 80004f6:	f7ff fe75 	bl	80001e4 <__NVIC_EnableIRQ>

}
 80004fa:	bf00      	nop
 80004fc:	3728      	adds	r7, #40	; 0x28
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <__NVIC_SetPriorityGrouping>:
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f003 0307 	and.w	r3, r3, #7
 8000512:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <__NVIC_SetPriorityGrouping+0x44>)
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800051a:	68ba      	ldr	r2, [r7, #8]
 800051c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000520:	4013      	ands	r3, r2
 8000522:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800052c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000536:	4a04      	ldr	r2, [pc, #16]	; (8000548 <__NVIC_SetPriorityGrouping+0x44>)
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	60d3      	str	r3, [r2, #12]
}
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <__NVIC_GetPriorityGrouping>:
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <__NVIC_GetPriorityGrouping+0x18>)
 8000552:	68db      	ldr	r3, [r3, #12]
 8000554:	0a1b      	lsrs	r3, r3, #8
 8000556:	f003 0307 	and.w	r3, r3, #7
}
 800055a:	4618      	mov	r0, r3
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	e000ed00 	.word	0xe000ed00

08000568 <__NVIC_SetPriority>:
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	6039      	str	r1, [r7, #0]
 8000572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000578:	2b00      	cmp	r3, #0
 800057a:	db0a      	blt.n	8000592 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	b2da      	uxtb	r2, r3
 8000580:	490c      	ldr	r1, [pc, #48]	; (80005b4 <__NVIC_SetPriority+0x4c>)
 8000582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000586:	0112      	lsls	r2, r2, #4
 8000588:	b2d2      	uxtb	r2, r2
 800058a:	440b      	add	r3, r1
 800058c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000590:	e00a      	b.n	80005a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4908      	ldr	r1, [pc, #32]	; (80005b8 <__NVIC_SetPriority+0x50>)
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	f003 030f 	and.w	r3, r3, #15
 800059e:	3b04      	subs	r3, #4
 80005a0:	0112      	lsls	r2, r2, #4
 80005a2:	b2d2      	uxtb	r2, r2
 80005a4:	440b      	add	r3, r1
 80005a6:	761a      	strb	r2, [r3, #24]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	e000e100 	.word	0xe000e100
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <NVIC_EncodePriority>:
{
 80005bc:	b480      	push	{r7}
 80005be:	b089      	sub	sp, #36	; 0x24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f003 0307 	and.w	r3, r3, #7
 80005ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	f1c3 0307 	rsb	r3, r3, #7
 80005d6:	2b04      	cmp	r3, #4
 80005d8:	bf28      	it	cs
 80005da:	2304      	movcs	r3, #4
 80005dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	3304      	adds	r3, #4
 80005e2:	2b06      	cmp	r3, #6
 80005e4:	d902      	bls.n	80005ec <NVIC_EncodePriority+0x30>
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	3b03      	subs	r3, #3
 80005ea:	e000      	b.n	80005ee <NVIC_EncodePriority+0x32>
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f0:	f04f 32ff 	mov.w	r2, #4294967295
 80005f4:	69bb      	ldr	r3, [r7, #24]
 80005f6:	fa02 f303 	lsl.w	r3, r2, r3
 80005fa:	43da      	mvns	r2, r3
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	401a      	ands	r2, r3
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000604:	f04f 31ff 	mov.w	r1, #4294967295
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	fa01 f303 	lsl.w	r3, r1, r3
 800060e:	43d9      	mvns	r1, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000614:	4313      	orrs	r3, r2
}
 8000616:	4618      	mov	r0, r3
 8000618:	3724      	adds	r7, #36	; 0x24
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <LL_RCC_HSI_Enable+0x1c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a04      	ldr	r2, [pc, #16]	; (8000640 <LL_RCC_HSI_Enable+0x1c>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40021000 	.word	0x40021000

08000644 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <LL_RCC_HSI_IsReady+0x20>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f003 0302 	and.w	r3, r3, #2
 8000650:	2b02      	cmp	r3, #2
 8000652:	bf0c      	ite	eq
 8000654:	2301      	moveq	r3, #1
 8000656:	2300      	movne	r3, #0
 8000658:	b2db      	uxtb	r3, r3
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	40021000 	.word	0x40021000

08000668 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	4904      	ldr	r1, [pc, #16]	; (8000690 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800067e:	4313      	orrs	r3, r2
 8000680:	600b      	str	r3, [r1, #0]
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <LL_RCC_SetSysClkSource+0x24>)
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	f023 0203 	bic.w	r2, r3, #3
 80006a4:	4904      	ldr	r1, [pc, #16]	; (80006b8 <LL_RCC_SetSysClkSource+0x24>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	604b      	str	r3, [r1, #4]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	40021000 	.word	0x40021000

080006bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <LL_RCC_GetSysClkSource+0x18>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	f003 030c 	and.w	r3, r3, #12
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000

080006d8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <LL_RCC_SetAHBPrescaler+0x24>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80006e8:	4904      	ldr	r1, [pc, #16]	; (80006fc <LL_RCC_SetAHBPrescaler+0x24>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	604b      	str	r3, [r1, #4]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	40021000 	.word	0x40021000

08000700 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <LL_RCC_SetAPB1Prescaler+0x24>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000710:	4904      	ldr	r1, [pc, #16]	; (8000724 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4313      	orrs	r3, r2
 8000716:	604b      	str	r3, [r1, #4]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	40021000 	.word	0x40021000

08000728 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000738:	4904      	ldr	r1, [pc, #16]	; (800074c <LL_RCC_SetAPB2Prescaler+0x24>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4313      	orrs	r3, r2
 800073e:	604b      	str	r3, [r1, #4]
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	40021000 	.word	0x40021000

08000750 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <LL_APB1_GRP1_EnableClock+0x2c>)
 800075a:	69da      	ldr	r2, [r3, #28]
 800075c:	4907      	ldr	r1, [pc, #28]	; (800077c <LL_APB1_GRP1_EnableClock+0x2c>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4313      	orrs	r3, r2
 8000762:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000766:	69da      	ldr	r2, [r3, #28]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4013      	ands	r3, r2
 800076c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800076e:	68fb      	ldr	r3, [r7, #12]
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	40021000 	.word	0x40021000

08000780 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800078a:	699a      	ldr	r2, [r3, #24]
 800078c:	4907      	ldr	r1, [pc, #28]	; (80007ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4313      	orrs	r3, r2
 8000792:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8000796:	699a      	ldr	r2, [r3, #24]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4013      	ands	r3, r2
 800079c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800079e:	68fb      	ldr	r3, [r7, #12]
}
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	40021000 	.word	0x40021000

080007b0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <LL_FLASH_SetLatency+0x24>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f023 0207 	bic.w	r2, r3, #7
 80007c0:	4904      	ldr	r1, [pc, #16]	; (80007d4 <LL_FLASH_SetLatency+0x24>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	600b      	str	r3, [r1, #0]
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	40022000 	.word	0x40022000

080007d8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <LL_FLASH_GetLatency+0x18>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f003 0307 	and.w	r3, r3, #7
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40022000 	.word	0x40022000

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f7ff ffc0 	bl	8000780 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000800:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000804:	f7ff ffa4 	bl	8000750 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000808:	2003      	movs	r0, #3
 800080a:	f7ff fe7b 	bl	8000504 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800080e:	f7ff fe9d 	bl	800054c <__NVIC_GetPriorityGrouping>
 8000812:	4603      	mov	r3, r0
 8000814:	2200      	movs	r2, #0
 8000816:	210f      	movs	r1, #15
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fecf 	bl	80005bc <NVIC_EncodePriority>
 800081e:	4603      	mov	r3, r0
 8000820:	4619      	mov	r1, r3
 8000822:	f04f 30ff 	mov.w	r0, #4294967295
 8000826:	f7ff fe9f 	bl	8000568 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082a:	f000 f837 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082e:	f7ff fe07 	bl	8000440 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(switchState)
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <main+0xa4>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d024      	beq.n	8000884 <main+0x90>
	  {
		  GPIOA->BSRR |= GPIO_BSRR_BS_4;
 800083a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000844:	f043 0310 	orr.w	r3, r3, #16
 8000848:	6193      	str	r3, [r2, #24]
		  for(uint16_t i=0; i<0xFF0; i++){}
 800084a:	2300      	movs	r3, #0
 800084c:	80fb      	strh	r3, [r7, #6]
 800084e:	e002      	b.n	8000856 <main+0x62>
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	3301      	adds	r3, #1
 8000854:	80fb      	strh	r3, [r7, #6]
 8000856:	88fb      	ldrh	r3, [r7, #6]
 8000858:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 800085c:	d3f8      	bcc.n	8000850 <main+0x5c>
		  GPIOA->BRR |= GPIO_BRR_BR_4;
 800085e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000864:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000868:	f043 0310 	orr.w	r3, r3, #16
 800086c:	6293      	str	r3, [r2, #40]	; 0x28
		  for(uint16_t i=0; i<0xFF0; i++){}
 800086e:	2300      	movs	r3, #0
 8000870:	80bb      	strh	r3, [r7, #4]
 8000872:	e002      	b.n	800087a <main+0x86>
 8000874:	88bb      	ldrh	r3, [r7, #4]
 8000876:	3301      	adds	r3, #1
 8000878:	80bb      	strh	r3, [r7, #4]
 800087a:	88bb      	ldrh	r3, [r7, #4]
 800087c:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8000880:	d3f8      	bcc.n	8000874 <main+0x80>
 8000882:	e7d6      	b.n	8000832 <main+0x3e>
	   }
	   else
	   {
		   GPIOA->BRR |= GPIO_BRR_BR_4;
 8000884:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800088a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6293      	str	r3, [r2, #40]	; 0x28
	  if(switchState)
 8000894:	e7cd      	b.n	8000832 <main+0x3e>
 8000896:	bf00      	nop
 8000898:	20000020 	.word	0x20000020

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff ff85 	bl	80007b0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80008a6:	bf00      	nop
 80008a8:	f7ff ff96 	bl	80007d8 <LL_FLASH_GetLatency>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1fa      	bne.n	80008a8 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80008b2:	f7ff feb7 	bl	8000624 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80008b6:	bf00      	nop
 80008b8:	f7ff fec4 	bl	8000644 <LL_RCC_HSI_IsReady>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d1fa      	bne.n	80008b8 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80008c2:	2010      	movs	r0, #16
 80008c4:	f7ff fed0 	bl	8000668 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff ff05 	bl	80006d8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80008ce:	2000      	movs	r0, #0
 80008d0:	f7ff ff16 	bl	8000700 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff ff27 	bl	8000728 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff feda 	bl	8000694 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80008e0:	bf00      	nop
 80008e2:	f7ff feeb 	bl	80006bc <LL_RCC_GetSysClkSource>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1fa      	bne.n	80008e2 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <SystemClock_Config+0x60>)
 80008ee:	f000 fca7 	bl	8001240 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80008f2:	4802      	ldr	r0, [pc, #8]	; (80008fc <SystemClock_Config+0x60>)
 80008f4:	f000 fcd8 	bl	80012a8 <LL_SetSystemCoreClock>
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	007a1200 	.word	0x007a1200

08000900 <check_button_state>:

/* USER CODE BEGIN 4 */
uint8_t check_button_state(GPIO_TypeDef* PORT, uint8_t PIN)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	70fb      	strb	r3, [r7, #3]
	uint8_t button_state = 0, timeout = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	2300      	movs	r3, #0
 8000912:	73bb      	strb	r3, [r7, #14]

	while(button_state < 20 && timeout < 50)
 8000914:	e014      	b.n	8000940 <check_button_state+0x40>
	{
		if(!(PORT->IDR & (1 << PIN))/*LL_GPIO_IsInputPinSet(PORT, PIN)*/)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	78fa      	ldrb	r2, [r7, #3]
 800091c:	2101      	movs	r1, #1
 800091e:	fa01 f202 	lsl.w	r2, r1, r2
 8000922:	4013      	ands	r3, r2
 8000924:	2b00      	cmp	r3, #0
 8000926:	d103      	bne.n	8000930 <check_button_state+0x30>
		{
			button_state += 1;
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	3301      	adds	r3, #1
 800092c:	73fb      	strb	r3, [r7, #15]
 800092e:	e001      	b.n	8000934 <check_button_state+0x34>
		}
		else
		{
			button_state = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	73fb      	strb	r3, [r7, #15]
		}

		timeout += 1;
 8000934:	7bbb      	ldrb	r3, [r7, #14]
 8000936:	3301      	adds	r3, #1
 8000938:	73bb      	strb	r3, [r7, #14]
		LL_mDelay(1);
 800093a:	2001      	movs	r0, #1
 800093c:	f000 fc8e 	bl	800125c <LL_mDelay>
	while(button_state < 20 && timeout < 50)
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	2b13      	cmp	r3, #19
 8000944:	d802      	bhi.n	800094c <check_button_state+0x4c>
 8000946:	7bbb      	ldrb	r3, [r7, #14]
 8000948:	2b31      	cmp	r3, #49	; 0x31
 800094a:	d9e4      	bls.n	8000916 <check_button_state+0x16>
	}

	if((button_state >= 20) && (timeout <= 50))
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	2b13      	cmp	r3, #19
 8000950:	d904      	bls.n	800095c <check_button_state+0x5c>
 8000952:	7bbb      	ldrb	r3, [r7, #14]
 8000954:	2b32      	cmp	r3, #50	; 0x32
 8000956:	d801      	bhi.n	800095c <check_button_state+0x5c>
	{
		return 1;
 8000958:	2301      	movs	r3, #1
 800095a:	e000      	b.n	800095e <check_button_state+0x5e>
	}
	else
	{
		return 0;
 800095c:	2300      	movs	r3, #0
	}
}
 800095e:	4618      	mov	r0, r3
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <interrupt_callback>:

void interrupt_callback()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	if(check_button_state(GPIOA, 3))
 800096c:	2103      	movs	r1, #3
 800096e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000972:	f7ff ffc5 	bl	8000900 <check_button_state>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d006      	beq.n	800098a <interrupt_callback+0x22>
		{
			switchState ^= 1;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <interrupt_callback+0x34>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f083 0301 	eor.w	r3, r3, #1
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <interrupt_callback+0x34>)
 8000988:	701a      	strb	r2, [r3, #0]
		}

		//Clear pending register flag
		EXTI->PR |= (EXTI_PR_PIF3);
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <interrupt_callback+0x38>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <interrupt_callback+0x38>)
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	6153      	str	r3, [r2, #20]
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000020 	.word	0x20000020
 80009a0:	40010400 	.word	0x40010400

080009a4 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80009ae:	695a      	ldr	r2, [r3, #20]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4013      	ands	r3, r2
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	bf0c      	ite	eq
 80009ba:	2301      	moveq	r3, #1
 80009bc:	2300      	movne	r3, #0
 80009be:	b2db      	uxtb	r3, r3
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	40010400 	.word	0x40010400

080009d0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <LL_EXTI_ClearFlag_0_31+0x1c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6153      	str	r3, [r2, #20]
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40010400 	.word	0x40010400

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <NMI_Handler+0x4>

080009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <MemManage_Handler+0x4>

08000a02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	interrupt_callback();
 8000a4a:	f7ff ff8d 	bl	8000968 <interrupt_callback>
  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8000a4e:	2008      	movs	r0, #8
 8000a50:	f7ff ffa8 	bl	80009a4 <LL_EXTI_IsActiveFlag_0_31>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d002      	beq.n	8000a60 <EXTI3_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8000a5a:	2008      	movs	r0, #8
 8000a5c:	f7ff ffb8 	bl	80009d0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8e:	490e      	ldr	r1, [pc, #56]	; (8000ac8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a90:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <LoopForever+0xe>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa4:	4c0b      	ldr	r4, [pc, #44]	; (8000ad4 <LoopForever+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ab2:	f7ff ffd7 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab6:	f000 fc07 	bl	80012c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aba:	f7ff fe9b 	bl	80007f4 <main>

08000abe <LoopForever>:

LoopForever:
    b LoopForever
 8000abe:	e7fe      	b.n	8000abe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ac0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000acc:	08001330 	.word	0x08001330
  ldr r2, =_sbss
 8000ad0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000ad4:	20000024 	.word	0x20000024

08000ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC1_2_IRQHandler>
	...

08000adc <LL_EXTI_EnableIT_0_31>:
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <LL_EXTI_EnableIT_0_31+0x20>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4904      	ldr	r1, [pc, #16]	; (8000afc <LL_EXTI_EnableIT_0_31+0x20>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	600b      	str	r3, [r1, #0]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	40010400 	.word	0x40010400

08000b00 <LL_EXTI_EnableIT_32_63>:
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <LL_EXTI_EnableIT_32_63+0x20>)
 8000b0a:	6a1a      	ldr	r2, [r3, #32]
 8000b0c:	4904      	ldr	r1, [pc, #16]	; (8000b20 <LL_EXTI_EnableIT_32_63+0x20>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	620b      	str	r3, [r1, #32]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	40010400 	.word	0x40010400

08000b24 <LL_EXTI_DisableIT_0_31>:
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <LL_EXTI_DisableIT_0_31+0x24>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	43db      	mvns	r3, r3
 8000b34:	4904      	ldr	r1, [pc, #16]	; (8000b48 <LL_EXTI_DisableIT_0_31+0x24>)
 8000b36:	4013      	ands	r3, r2
 8000b38:	600b      	str	r3, [r1, #0]
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40010400 	.word	0x40010400

08000b4c <LL_EXTI_DisableIT_32_63>:
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <LL_EXTI_DisableIT_32_63+0x24>)
 8000b56:	6a1a      	ldr	r2, [r3, #32]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	4904      	ldr	r1, [pc, #16]	; (8000b70 <LL_EXTI_DisableIT_32_63+0x24>)
 8000b5e:	4013      	ands	r3, r2
 8000b60:	620b      	str	r3, [r1, #32]
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40010400 	.word	0x40010400

08000b74 <LL_EXTI_EnableEvent_0_31>:
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	4904      	ldr	r1, [pc, #16]	; (8000b94 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	604b      	str	r3, [r1, #4]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	40010400 	.word	0x40010400

08000b98 <LL_EXTI_EnableEvent_32_63>:
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ba4:	4904      	ldr	r1, [pc, #16]	; (8000bb8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	40010400 	.word	0x40010400

08000bbc <LL_EXTI_DisableEvent_0_31>:
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	4904      	ldr	r1, [pc, #16]	; (8000be0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000bce:	4013      	ands	r3, r2
 8000bd0:	604b      	str	r3, [r1, #4]
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40010400 	.word	0x40010400

08000be4 <LL_EXTI_DisableEvent_32_63>:
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	4904      	ldr	r1, [pc, #16]	; (8000c08 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40010400 	.word	0x40010400

08000c0c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	4904      	ldr	r1, [pc, #16]	; (8000c2c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	608b      	str	r3, [r1, #8]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	40010400 	.word	0x40010400

08000c30 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000c3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c3c:	4904      	ldr	r1, [pc, #16]	; (8000c50 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	40010400 	.word	0x40010400

08000c54 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	43db      	mvns	r3, r3
 8000c64:	4904      	ldr	r1, [pc, #16]	; (8000c78 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000c66:	4013      	ands	r3, r2
 8000c68:	608b      	str	r3, [r1, #8]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40010400 	.word	0x40010400

08000c7c <LL_EXTI_DisableRisingTrig_32_63>:
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000c86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	4904      	ldr	r1, [pc, #16]	; (8000ca0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000c8e:	4013      	ands	r3, r2
 8000c90:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40010400 	.word	0x40010400

08000ca4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	4904      	ldr	r1, [pc, #16]	; (8000cc4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	60cb      	str	r3, [r1, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	40010400 	.word	0x40010400

08000cc8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd4:	4904      	ldr	r1, [pc, #16]	; (8000ce8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	40010400 	.word	0x40010400

08000cec <LL_EXTI_DisableFallingTrig_0_31>:
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	4904      	ldr	r1, [pc, #16]	; (8000d10 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000cfe:	4013      	ands	r3, r2
 8000d00:	60cb      	str	r3, [r1, #12]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40010400 	.word	0x40010400

08000d14 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	43db      	mvns	r3, r3
 8000d24:	4904      	ldr	r1, [pc, #16]	; (8000d38 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000d26:	4013      	ands	r3, r2
 8000d28:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40010400 	.word	0x40010400

08000d3c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7a1b      	ldrb	r3, [r3, #8]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f000 80cd 	beq.w	8000eec <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d061      	beq.n	8000e1e <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7a5b      	ldrb	r3, [r3, #9]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d01c      	beq.n	8000d9c <LL_EXTI_Init+0x60>
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	dc25      	bgt.n	8000db2 <LL_EXTI_Init+0x76>
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <LL_EXTI_Init+0x34>
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d00b      	beq.n	8000d86 <LL_EXTI_Init+0x4a>
 8000d6e:	e020      	b.n	8000db2 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff21 	bl	8000bbc <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff feac 	bl	8000adc <LL_EXTI_EnableIT_0_31>
          break;
 8000d84:	e018      	b.n	8000db8 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff feca 	bl	8000b24 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff feed 	bl	8000b74 <LL_EXTI_EnableEvent_0_31>
          break;
 8000d9a:	e00d      	b.n	8000db8 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fe9b 	bl	8000adc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fee2 	bl	8000b74 <LL_EXTI_EnableEvent_0_31>
          break;
 8000db0:	e002      	b.n	8000db8 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
          break;
 8000db6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	7a9b      	ldrb	r3, [r3, #10]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d02e      	beq.n	8000e1e <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7a9b      	ldrb	r3, [r3, #10]
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d01c      	beq.n	8000e02 <LL_EXTI_Init+0xc6>
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	dc25      	bgt.n	8000e18 <LL_EXTI_Init+0xdc>
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d002      	beq.n	8000dd6 <LL_EXTI_Init+0x9a>
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d00b      	beq.n	8000dec <LL_EXTI_Init+0xb0>
 8000dd4:	e020      	b.n	8000e18 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff86 	bl	8000cec <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff11 	bl	8000c0c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000dea:	e019      	b.n	8000e20 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff2f 	bl	8000c54 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff52 	bl	8000ca4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000e00:	e00e      	b.n	8000e20 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff00 	bl	8000c0c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff47 	bl	8000ca4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000e16:	e003      	b.n	8000e20 <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	73fb      	strb	r3, [r7, #15]
            break;
 8000e1c:	e000      	b.n	8000e20 <LL_EXTI_Init+0xe4>
        }
      }
 8000e1e:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d076      	beq.n	8000f16 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	7a5b      	ldrb	r3, [r3, #9]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d01c      	beq.n	8000e6a <LL_EXTI_Init+0x12e>
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	dc25      	bgt.n	8000e80 <LL_EXTI_Init+0x144>
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d002      	beq.n	8000e3e <LL_EXTI_Init+0x102>
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d00b      	beq.n	8000e54 <LL_EXTI_Init+0x118>
 8000e3c:	e020      	b.n	8000e80 <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fece 	bl	8000be4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fe57 	bl	8000b00 <LL_EXTI_EnableIT_32_63>
          break;
 8000e52:	e018      	b.n	8000e86 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fe77 	bl	8000b4c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fe98 	bl	8000b98 <LL_EXTI_EnableEvent_32_63>
          break;
 8000e68:	e00d      	b.n	8000e86 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fe46 	bl	8000b00 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fe8d 	bl	8000b98 <LL_EXTI_EnableEvent_32_63>
          break;
 8000e7e:	e002      	b.n	8000e86 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
          break;
 8000e84:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	7a9b      	ldrb	r3, [r3, #10]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d043      	beq.n	8000f16 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7a9b      	ldrb	r3, [r3, #10]
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d01c      	beq.n	8000ed0 <LL_EXTI_Init+0x194>
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	dc25      	bgt.n	8000ee6 <LL_EXTI_Init+0x1aa>
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d002      	beq.n	8000ea4 <LL_EXTI_Init+0x168>
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d00b      	beq.n	8000eba <LL_EXTI_Init+0x17e>
 8000ea2:	e020      	b.n	8000ee6 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff33 	bl	8000d14 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff febc 	bl	8000c30 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8000eb8:	e02e      	b.n	8000f18 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fedc 	bl	8000c7c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fefd 	bl	8000cc8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000ece:	e023      	b.n	8000f18 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff feab 	bl	8000c30 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fef2 	bl	8000cc8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000ee4:	e018      	b.n	8000f18 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
            break;
 8000eea:	e015      	b.n	8000f18 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fe17 	bl	8000b24 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fe5e 	bl	8000bbc <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fe21 	bl	8000b4c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fe68 	bl	8000be4 <LL_EXTI_DisableEvent_32_63>
 8000f14:	e000      	b.n	8000f18 <LL_EXTI_Init+0x1dc>
      }
 8000f16:	bf00      	nop
#endif
  }
  return status;
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <LL_GPIO_SetPinMode>:
{
 8000f22:	b480      	push	{r7}
 8000f24:	b089      	sub	sp, #36	; 0x24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	fa93 f3a3 	rbit	r3, r3
 8000f3c:	613b      	str	r3, [r7, #16]
  return result;
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	fab3 f383 	clz	r3, r3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2103      	movs	r1, #3
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	401a      	ands	r2, r3
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa93 f3a3 	rbit	r3, r3
 8000f5c:	61bb      	str	r3, [r7, #24]
  return result;
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	fab3 f383 	clz	r3, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	601a      	str	r2, [r3, #0]
}
 8000f74:	bf00      	nop
 8000f76:	3724      	adds	r7, #36	; 0x24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_GPIO_SetPinOutputType>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	401a      	ands	r2, r3
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	fb01 f303 	mul.w	r3, r1, r3
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	605a      	str	r2, [r3, #4]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_GPIO_SetPinSpeed>:
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa93 f3a3 	rbit	r3, r3
 8000fca:	613b      	str	r3, [r7, #16]
  return result;
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	fab3 f383 	clz	r3, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2103      	movs	r1, #3
 8000fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	401a      	ands	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	fa93 f3a3 	rbit	r3, r3
 8000fea:	61bb      	str	r3, [r7, #24]
  return result;
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fab3 f383 	clz	r3, r3
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	609a      	str	r2, [r3, #8]
}
 8001002:	bf00      	nop
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_GPIO_SetPinPull>:
{
 800100e:	b480      	push	{r7}
 8001010:	b089      	sub	sp, #36	; 0x24
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	fa93 f3a3 	rbit	r3, r3
 8001028:	613b      	str	r3, [r7, #16]
  return result;
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	fab3 f383 	clz	r3, r3
 8001030:	b2db      	uxtb	r3, r3
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2103      	movs	r1, #3
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	401a      	ands	r2, r3
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa93 f3a3 	rbit	r3, r3
 8001048:	61bb      	str	r3, [r7, #24]
  return result;
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	fab3 f383 	clz	r3, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	431a      	orrs	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	60da      	str	r2, [r3, #12]
}
 8001060:	bf00      	nop
 8001062:	3724      	adds	r7, #36	; 0x24
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_GPIO_SetAFPin_0_7>:
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	6a1a      	ldr	r2, [r3, #32]
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa93 f3a3 	rbit	r3, r3
 8001086:	613b      	str	r3, [r7, #16]
  return result;
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	fab3 f383 	clz	r3, r3
 800108e:	b2db      	uxtb	r3, r3
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	210f      	movs	r1, #15
 8001094:	fa01 f303 	lsl.w	r3, r1, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	401a      	ands	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	fa93 f3a3 	rbit	r3, r3
 80010a6:	61bb      	str	r3, [r7, #24]
  return result;
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fab3 f383 	clz	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	431a      	orrs	r2, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	621a      	str	r2, [r3, #32]
}
 80010be:	bf00      	nop
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <LL_GPIO_SetAFPin_8_15>:
{
 80010ca:	b480      	push	{r7}
 80010cc:	b089      	sub	sp, #36	; 0x24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa93 f3a3 	rbit	r3, r3
 80010e6:	613b      	str	r3, [r7, #16]
  return result;
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	fab3 f383 	clz	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	210f      	movs	r1, #15
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	401a      	ands	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	0a1b      	lsrs	r3, r3, #8
 8001100:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa93 f3a3 	rbit	r3, r3
 8001108:	61bb      	str	r3, [r7, #24]
  return result;
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	fab3 f383 	clz	r3, r3
 8001110:	b2db      	uxtb	r3, r3
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	431a      	orrs	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001120:	bf00      	nop
 8001122:	3724      	adds	r7, #36	; 0x24
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa93 f3a3 	rbit	r3, r3
 8001142:	613b      	str	r3, [r7, #16]
  return result;
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	fab3 f383 	clz	r3, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800114e:	e051      	b.n	80011f4 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2101      	movs	r1, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d043      	beq.n	80011ee <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d003      	beq.n	8001176 <LL_GPIO_Init+0x4a>
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d10e      	bne.n	8001194 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	461a      	mov	r2, r3
 800117c:	69b9      	ldr	r1, [r7, #24]
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff16 	bl	8000fb0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	6819      	ldr	r1, [r3, #0]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	461a      	mov	r2, r3
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff fef6 	bl	8000f80 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	461a      	mov	r2, r3
 800119a:	69b9      	ldr	r1, [r7, #24]
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff36 	bl	800100e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d11a      	bne.n	80011e0 <LL_GPIO_Init+0xb4>
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	fa93 f3a3 	rbit	r3, r3
 80011b4:	60bb      	str	r3, [r7, #8]
  return result;
 80011b6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80011b8:	fab3 f383 	clz	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b07      	cmp	r3, #7
 80011c0:	d807      	bhi.n	80011d2 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	461a      	mov	r2, r3
 80011c8:	69b9      	ldr	r1, [r7, #24]
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff4e 	bl	800106c <LL_GPIO_SetAFPin_0_7>
 80011d0:	e006      	b.n	80011e0 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	461a      	mov	r2, r3
 80011d8:	69b9      	ldr	r1, [r7, #24]
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ff75 	bl	80010ca <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	461a      	mov	r2, r3
 80011e6:	69b9      	ldr	r1, [r7, #24]
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff fe9a 	bl	8000f22 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3301      	adds	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	fa22 f303 	lsr.w	r3, r2, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1a6      	bne.n	8001150 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3720      	adds	r7, #32
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4a07      	ldr	r2, [pc, #28]	; (800123c <LL_InitTick+0x30>)
 8001220:	3b01      	subs	r3, #1
 8001222:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <LL_InitTick+0x30>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <LL_InitTick+0x30>)
 800122c:	2205      	movs	r2, #5
 800122e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000e010 	.word	0xe000e010

08001240 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001248:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ffdd 	bl	800120c <LL_InitTick>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <LL_mDelay+0x48>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800126a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001272:	d00c      	beq.n	800128e <LL_mDelay+0x32>
  {
    Delay++;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3301      	adds	r3, #1
 8001278:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800127a:	e008      	b.n	800128e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <LL_mDelay+0x48>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d002      	beq.n	800128e <LL_mDelay+0x32>
    {
      Delay--;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1f3      	bne.n	800127c <LL_mDelay+0x20>
    }
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000e010 	.word	0xe000e010

080012a8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <LL_SetSystemCoreClock+0x1c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000000 	.word	0x20000000

080012c8 <__libc_init_array>:
 80012c8:	b570      	push	{r4, r5, r6, lr}
 80012ca:	4d0d      	ldr	r5, [pc, #52]	; (8001300 <__libc_init_array+0x38>)
 80012cc:	4c0d      	ldr	r4, [pc, #52]	; (8001304 <__libc_init_array+0x3c>)
 80012ce:	1b64      	subs	r4, r4, r5
 80012d0:	10a4      	asrs	r4, r4, #2
 80012d2:	2600      	movs	r6, #0
 80012d4:	42a6      	cmp	r6, r4
 80012d6:	d109      	bne.n	80012ec <__libc_init_array+0x24>
 80012d8:	4d0b      	ldr	r5, [pc, #44]	; (8001308 <__libc_init_array+0x40>)
 80012da:	4c0c      	ldr	r4, [pc, #48]	; (800130c <__libc_init_array+0x44>)
 80012dc:	f000 f818 	bl	8001310 <_init>
 80012e0:	1b64      	subs	r4, r4, r5
 80012e2:	10a4      	asrs	r4, r4, #2
 80012e4:	2600      	movs	r6, #0
 80012e6:	42a6      	cmp	r6, r4
 80012e8:	d105      	bne.n	80012f6 <__libc_init_array+0x2e>
 80012ea:	bd70      	pop	{r4, r5, r6, pc}
 80012ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80012f0:	4798      	blx	r3
 80012f2:	3601      	adds	r6, #1
 80012f4:	e7ee      	b.n	80012d4 <__libc_init_array+0xc>
 80012f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80012fa:	4798      	blx	r3
 80012fc:	3601      	adds	r6, #1
 80012fe:	e7f2      	b.n	80012e6 <__libc_init_array+0x1e>
 8001300:	08001328 	.word	0x08001328
 8001304:	08001328 	.word	0x08001328
 8001308:	08001328 	.word	0x08001328
 800130c:	0800132c 	.word	0x0800132c

08001310 <_init>:
 8001310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001312:	bf00      	nop
 8001314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001316:	bc08      	pop	{r3}
 8001318:	469e      	mov	lr, r3
 800131a:	4770      	bx	lr

0800131c <_fini>:
 800131c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800131e:	bf00      	nop
 8001320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001322:	bc08      	pop	{r3}
 8001324:	469e      	mov	lr, r3
 8001326:	4770      	bx	lr
