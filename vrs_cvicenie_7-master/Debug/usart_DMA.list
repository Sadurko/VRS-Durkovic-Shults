
usart_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08001b78  08001b78  00011b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ca0  08001ca0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001ca0  08001ca0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ca0  08001ca0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ca0  08001ca0  00011ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ca4  08001ca4  00011ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000004  08001cac  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08001cac  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004cbe  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001392  00000000  00000000  00024cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000620  00000000  00000000  00026088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000578  00000000  00000000  000266a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000029b5  00000000  00000000  00026c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004c54  00000000  00000000  000295d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006fc38  00000000  00000000  0002e229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009de61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001800  00000000  00000000  0009deb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001b60 	.word	0x08001b60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001b60 	.word	0x08001b60

080001c8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b089      	sub	sp, #36	; 0x24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	681a      	ldr	r2, [r3, #0]
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001dc:	697b      	ldr	r3, [r7, #20]
 80001de:	fa93 f3a3 	rbit	r3, r3
 80001e2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80001e4:	693b      	ldr	r3, [r7, #16]
 80001e6:	fab3 f383 	clz	r3, r3
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	2103      	movs	r1, #3
 80001ee:	fa01 f303 	lsl.w	r3, r1, r3
 80001f2:	43db      	mvns	r3, r3
 80001f4:	401a      	ands	r2, r3
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001fa:	69fb      	ldr	r3, [r7, #28]
 80001fc:	fa93 f3a3 	rbit	r3, r3
 8000200:	61bb      	str	r3, [r7, #24]
  return(result);
 8000202:	69bb      	ldr	r3, [r7, #24]
 8000204:	fab3 f383 	clz	r3, r3
 8000208:	005b      	lsls	r3, r3, #1
 800020a:	6879      	ldr	r1, [r7, #4]
 800020c:	fa01 f303 	lsl.w	r3, r1, r3
 8000210:	431a      	orrs	r2, r3
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	601a      	str	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	3724      	adds	r7, #36	; 0x24
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr

08000222 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000222:	b480      	push	{r7}
 8000224:	b085      	sub	sp, #20
 8000226:	af00      	add	r7, sp, #0
 8000228:	60f8      	str	r0, [r7, #12]
 800022a:	60b9      	str	r1, [r7, #8]
 800022c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	685a      	ldr	r2, [r3, #4]
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	43db      	mvns	r3, r3
 8000236:	401a      	ands	r2, r3
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	6879      	ldr	r1, [r7, #4]
 800023c:	fb01 f303 	mul.w	r3, r1, r3
 8000240:	431a      	orrs	r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	605a      	str	r2, [r3, #4]
}
 8000246:	bf00      	nop
 8000248:	3714      	adds	r7, #20
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr

08000252 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000252:	b480      	push	{r7}
 8000254:	b089      	sub	sp, #36	; 0x24
 8000256:	af00      	add	r7, sp, #0
 8000258:	60f8      	str	r0, [r7, #12]
 800025a:	60b9      	str	r1, [r7, #8]
 800025c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	689a      	ldr	r2, [r3, #8]
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	fa93 f3a3 	rbit	r3, r3
 800026c:	613b      	str	r3, [r7, #16]
  return(result);
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	fab3 f383 	clz	r3, r3
 8000274:	005b      	lsls	r3, r3, #1
 8000276:	2103      	movs	r1, #3
 8000278:	fa01 f303 	lsl.w	r3, r1, r3
 800027c:	43db      	mvns	r3, r3
 800027e:	401a      	ands	r2, r3
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000284:	69fb      	ldr	r3, [r7, #28]
 8000286:	fa93 f3a3 	rbit	r3, r3
 800028a:	61bb      	str	r3, [r7, #24]
  return(result);
 800028c:	69bb      	ldr	r3, [r7, #24]
 800028e:	fab3 f383 	clz	r3, r3
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	fa01 f303 	lsl.w	r3, r1, r3
 800029a:	431a      	orrs	r2, r3
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80002a0:	bf00      	nop
 80002a2:	3724      	adds	r7, #36	; 0x24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b089      	sub	sp, #36	; 0x24
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	68da      	ldr	r2, [r3, #12]
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa93 f3a3 	rbit	r3, r3
 80002c6:	613b      	str	r3, [r7, #16]
  return(result);
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	fab3 f383 	clz	r3, r3
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	2103      	movs	r1, #3
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	43db      	mvns	r3, r3
 80002d8:	401a      	ands	r2, r3
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002de:	69fb      	ldr	r3, [r7, #28]
 80002e0:	fa93 f3a3 	rbit	r3, r3
 80002e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	fab3 f383 	clz	r3, r3
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	6879      	ldr	r1, [r7, #4]
 80002f0:	fa01 f303 	lsl.w	r3, r1, r3
 80002f4:	431a      	orrs	r2, r3
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	60da      	str	r2, [r3, #12]
}
 80002fa:	bf00      	nop
 80002fc:	3724      	adds	r7, #36	; 0x24
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000306:	b480      	push	{r7}
 8000308:	b089      	sub	sp, #36	; 0x24
 800030a:	af00      	add	r7, sp, #0
 800030c:	60f8      	str	r0, [r7, #12]
 800030e:	60b9      	str	r1, [r7, #8]
 8000310:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	6a1a      	ldr	r2, [r3, #32]
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	fa93 f3a3 	rbit	r3, r3
 8000320:	613b      	str	r3, [r7, #16]
  return(result);
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	fab3 f383 	clz	r3, r3
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	210f      	movs	r1, #15
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	401a      	ands	r2, r3
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000338:	69fb      	ldr	r3, [r7, #28]
 800033a:	fa93 f3a3 	rbit	r3, r3
 800033e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000340:	69bb      	ldr	r3, [r7, #24]
 8000342:	fab3 f383 	clz	r3, r3
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	6879      	ldr	r1, [r7, #4]
 800034a:	fa01 f303 	lsl.w	r3, r1, r3
 800034e:	431a      	orrs	r2, r3
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000354:	bf00      	nop
 8000356:	3724      	adds	r7, #36	; 0x24
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000360:	b480      	push	{r7}
 8000362:	b089      	sub	sp, #36	; 0x24
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	0a1b      	lsrs	r3, r3, #8
 8000374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	fa93 f3a3 	rbit	r3, r3
 800037c:	613b      	str	r3, [r7, #16]
  return(result);
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	fab3 f383 	clz	r3, r3
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	210f      	movs	r1, #15
 8000388:	fa01 f303 	lsl.w	r3, r1, r3
 800038c:	43db      	mvns	r3, r3
 800038e:	401a      	ands	r2, r3
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	0a1b      	lsrs	r3, r3, #8
 8000394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	fa93 f3a3 	rbit	r3, r3
 800039c:	61bb      	str	r3, [r7, #24]
  return(result);
 800039e:	69bb      	ldr	r3, [r7, #24]
 80003a0:	fab3 f383 	clz	r3, r3
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	6879      	ldr	r1, [r7, #4]
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	431a      	orrs	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80003b2:	bf00      	nop
 80003b4:	3724      	adds	r7, #36	; 0x24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b088      	sub	sp, #32
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	fa93 f3a3 	rbit	r3, r3
 80003dc:	613b      	str	r3, [r7, #16]
  return(result);
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	fab3 f383 	clz	r3, r3
 80003e4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80003e6:	e048      	b.n	800047a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	2101      	movs	r1, #1
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	4013      	ands	r3, r2
 80003f6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80003f8:	69bb      	ldr	r3, [r7, #24]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d03a      	beq.n	8000474 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	461a      	mov	r2, r3
 8000404:	69b9      	ldr	r1, [r7, #24]
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f7ff fede 	bl	80001c8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d003      	beq.n	800041c <LL_GPIO_Init+0x5e>
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	2b02      	cmp	r3, #2
 800041a:	d106      	bne.n	800042a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	461a      	mov	r2, r3
 8000422:	69b9      	ldr	r1, [r7, #24]
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f7ff ff14 	bl	8000252 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	691b      	ldr	r3, [r3, #16]
 800042e:	461a      	mov	r2, r3
 8000430:	69b9      	ldr	r1, [r7, #24]
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f7ff ff3a 	bl	80002ac <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	2b02      	cmp	r3, #2
 800043e:	d119      	bne.n	8000474 <LL_GPIO_Init+0xb6>
 8000440:	69bb      	ldr	r3, [r7, #24]
 8000442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	fa93 f3a3 	rbit	r3, r3
 800044a:	60bb      	str	r3, [r7, #8]
  return(result);
 800044c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800044e:	fab3 f383 	clz	r3, r3
 8000452:	2b07      	cmp	r3, #7
 8000454:	d807      	bhi.n	8000466 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	461a      	mov	r2, r3
 800045c:	69b9      	ldr	r1, [r7, #24]
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ff51 	bl	8000306 <LL_GPIO_SetAFPin_0_7>
 8000464:	e006      	b.n	8000474 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	461a      	mov	r2, r3
 800046c:	69b9      	ldr	r1, [r7, #24]
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff ff76 	bl	8000360 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000474:	69fb      	ldr	r3, [r7, #28]
 8000476:	3301      	adds	r3, #1
 8000478:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	69fb      	ldr	r3, [r7, #28]
 8000480:	fa22 f303 	lsr.w	r3, r2, r3
 8000484:	2b00      	cmp	r3, #0
 8000486:	d1af      	bne.n	80003e8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d003      	beq.n	8000498 <LL_GPIO_Init+0xda>
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d107      	bne.n	80004a8 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	6819      	ldr	r1, [r3, #0]
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	461a      	mov	r2, r3
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f7ff febd 	bl	8000222 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3720      	adds	r7, #32
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <LL_RCC_HSI_IsReady+0x20>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	f003 0302 	and.w	r3, r3, #2
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	bf0c      	ite	eq
 80004c4:	2301      	moveq	r3, #1
 80004c6:	2300      	movne	r3, #0
 80004c8:	b2db      	uxtb	r3, r3
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	40021000 	.word	0x40021000

080004d8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <LL_RCC_LSE_IsReady+0x20>)
 80004de:	6a1b      	ldr	r3, [r3, #32]
 80004e0:	f003 0302 	and.w	r3, r3, #2
 80004e4:	2b02      	cmp	r3, #2
 80004e6:	bf0c      	ite	eq
 80004e8:	2301      	moveq	r3, #1
 80004ea:	2300      	movne	r3, #0
 80004ec:	b2db      	uxtb	r3, r3
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	40021000 	.word	0x40021000

080004fc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <LL_RCC_GetSysClkSource+0x18>)
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	f003 030c 	and.w	r3, r3, #12
}
 8000508:	4618      	mov	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000

08000518 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <LL_RCC_GetAHBPrescaler+0x18>)
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000524:	4618      	mov	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000

08000534 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000538:	4b04      	ldr	r3, [pc, #16]	; (800054c <LL_RCC_GetAPB1Prescaler+0x18>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000540:	4618      	mov	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000

08000550 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <LL_RCC_GetAPB2Prescaler+0x18>)
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800055c:	4618      	mov	r0, r3
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000

0800056c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <LL_RCC_GetUSARTClockSource+0x28>)
 8000576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000578:	2103      	movs	r1, #3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	401a      	ands	r2, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	061b      	lsls	r3, r3, #24
 8000586:	4313      	orrs	r3, r2
}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40021000 	.word	0x40021000

08000598 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <LL_RCC_PLL_GetMainSource+0x18>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40021000 	.word	0x40021000

080005b4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <LL_RCC_PLL_GetMultiplicator+0x18>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000

080005d0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <LL_RCC_PLL_GetPrediv+0x18>)
 80005d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005d8:	f003 030f 	and.w	r3, r3, #15
}
 80005dc:	4618      	mov	r0, r3
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000

080005ec <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80005f4:	f000 f864 	bl	80006c0 <RCC_GetSystemClockFreq>
 80005f8:	4602      	mov	r2, r0
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f882 	bl	800070c <RCC_GetHCLKClockFreq>
 8000608:	4602      	mov	r2, r0
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f890 	bl	8000738 <RCC_GetPCLK1ClockFreq>
 8000618:	4602      	mov	r2, r0
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f89c 	bl	8000760 <RCC_GetPCLK2ClockFreq>
 8000628:	4602      	mov	r2, r0
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	60da      	str	r2, [r3, #12]
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d12d      	bne.n	80006a6 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f7ff ff8e 	bl	800056c <LL_RCC_GetUSARTClockSource>
 8000650:	4603      	mov	r3, r0
 8000652:	2b03      	cmp	r3, #3
 8000654:	d00a      	beq.n	800066c <LL_RCC_GetUSARTClockFreq+0x34>
 8000656:	2b03      	cmp	r3, #3
 8000658:	d819      	bhi.n	800068e <LL_RCC_GetUSARTClockFreq+0x56>
 800065a:	2b01      	cmp	r3, #1
 800065c:	d002      	beq.n	8000664 <LL_RCC_GetUSARTClockFreq+0x2c>
 800065e:	2b02      	cmp	r3, #2
 8000660:	d00c      	beq.n	800067c <LL_RCC_GetUSARTClockFreq+0x44>
 8000662:	e014      	b.n	800068e <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000664:	f000 f82c 	bl	80006c0 <RCC_GetSystemClockFreq>
 8000668:	60f8      	str	r0, [r7, #12]
        break;
 800066a:	e021      	b.n	80006b0 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800066c:	f7ff ff22 	bl	80004b4 <LL_RCC_HSI_IsReady>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d019      	beq.n	80006aa <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <LL_RCC_GetUSARTClockFreq+0x84>)
 8000678:	60fb      	str	r3, [r7, #12]
        }
        break;
 800067a:	e016      	b.n	80006aa <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800067c:	f7ff ff2c 	bl	80004d8 <LL_RCC_LSE_IsReady>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d013      	beq.n	80006ae <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8000686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800068a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800068c:	e00f      	b.n	80006ae <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800068e:	f000 f817 	bl	80006c0 <RCC_GetSystemClockFreq>
 8000692:	4603      	mov	r3, r0
 8000694:	4618      	mov	r0, r3
 8000696:	f000 f839 	bl	800070c <RCC_GetHCLKClockFreq>
 800069a:	4603      	mov	r3, r0
 800069c:	4618      	mov	r0, r3
 800069e:	f000 f84b 	bl	8000738 <RCC_GetPCLK1ClockFreq>
 80006a2:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80006a4:	e004      	b.n	80006b0 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 80006a6:	bf00      	nop
 80006a8:	e002      	b.n	80006b0 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80006aa:	bf00      	nop
 80006ac:	e000      	b.n	80006b0 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80006ae:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80006b0:	68fb      	ldr	r3, [r7, #12]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	007a1200 	.word	0x007a1200

080006c0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80006ca:	f7ff ff17 	bl	80004fc <LL_RCC_GetSysClkSource>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b08      	cmp	r3, #8
 80006d2:	d00c      	beq.n	80006ee <RCC_GetSystemClockFreq+0x2e>
 80006d4:	2b08      	cmp	r3, #8
 80006d6:	d80e      	bhi.n	80006f6 <RCC_GetSystemClockFreq+0x36>
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d002      	beq.n	80006e2 <RCC_GetSystemClockFreq+0x22>
 80006dc:	2b04      	cmp	r3, #4
 80006de:	d003      	beq.n	80006e8 <RCC_GetSystemClockFreq+0x28>
 80006e0:	e009      	b.n	80006f6 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <RCC_GetSystemClockFreq+0x48>)
 80006e4:	607b      	str	r3, [r7, #4]
      break;
 80006e6:	e009      	b.n	80006fc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <RCC_GetSystemClockFreq+0x48>)
 80006ea:	607b      	str	r3, [r7, #4]
      break;
 80006ec:	e006      	b.n	80006fc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80006ee:	f000 f84b 	bl	8000788 <RCC_PLL_GetFreqDomain_SYS>
 80006f2:	6078      	str	r0, [r7, #4]
      break;
 80006f4:	e002      	b.n	80006fc <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <RCC_GetSystemClockFreq+0x48>)
 80006f8:	607b      	str	r3, [r7, #4]
      break;
 80006fa:	bf00      	nop
  }

  return frequency;
 80006fc:	687b      	ldr	r3, [r7, #4]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	007a1200 	.word	0x007a1200

0800070c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000714:	f7ff ff00 	bl	8000518 <LL_RCC_GetAHBPrescaler>
 8000718:	4603      	mov	r3, r0
 800071a:	091b      	lsrs	r3, r3, #4
 800071c:	f003 030f 	and.w	r3, r3, #15
 8000720:	4a04      	ldr	r2, [pc, #16]	; (8000734 <RCC_GetHCLKClockFreq+0x28>)
 8000722:	5cd3      	ldrb	r3, [r2, r3]
 8000724:	461a      	mov	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	40d3      	lsrs	r3, r2
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	08001b80 	.word	0x08001b80

08000738 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000740:	f7ff fef8 	bl	8000534 <LL_RCC_GetAPB1Prescaler>
 8000744:	4603      	mov	r3, r0
 8000746:	0a1b      	lsrs	r3, r3, #8
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <RCC_GetPCLK1ClockFreq+0x24>)
 800074a:	5cd3      	ldrb	r3, [r2, r3]
 800074c:	461a      	mov	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	40d3      	lsrs	r3, r2
}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	08001b90 	.word	0x08001b90

08000760 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000768:	f7ff fef2 	bl	8000550 <LL_RCC_GetAPB2Prescaler>
 800076c:	4603      	mov	r3, r0
 800076e:	0adb      	lsrs	r3, r3, #11
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <RCC_GetPCLK2ClockFreq+0x24>)
 8000772:	5cd3      	ldrb	r3, [r2, r3]
 8000774:	461a      	mov	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	40d3      	lsrs	r3, r2
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	08001b90 	.word	0x08001b90

08000788 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000796:	f7ff feff 	bl	8000598 <LL_RCC_PLL_GetMainSource>
 800079a:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d004      	beq.n	80007ac <RCC_PLL_GetFreqDomain_SYS+0x24>
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007a8:	d003      	beq.n	80007b2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80007aa:	e005      	b.n	80007b8 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80007ae:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80007b0:	e005      	b.n	80007be <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80007b4:	60fb      	str	r3, [r7, #12]
      break;
 80007b6:	e002      	b.n	80007be <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80007ba:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80007bc:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80007be:	f7ff ff07 	bl	80005d0 <LL_RCC_PLL_GetPrediv>
 80007c2:	4603      	mov	r3, r0
 80007c4:	3301      	adds	r3, #1
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	fbb2 f4f3 	udiv	r4, r2, r3
 80007cc:	f7ff fef2 	bl	80005b4 <LL_RCC_PLL_GetMultiplicator>
 80007d0:	4603      	mov	r3, r0
 80007d2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80007d6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80007da:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	fa92 f2a2 	rbit	r2, r2
 80007e2:	603a      	str	r2, [r7, #0]
  return(result);
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	fab2 f282 	clz	r2, r2
 80007ea:	40d3      	lsrs	r3, r2
 80007ec:	3302      	adds	r3, #2
 80007ee:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd90      	pop	{r4, r7, pc}
 80007fa:	bf00      	nop
 80007fc:	003d0900 	.word	0x003d0900
 8000800:	007a1200 	.word	0x007a1200

08000804 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	2b01      	cmp	r3, #1
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
 8000832:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	431a      	orrs	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	605a      	str	r2, [r3, #4]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	431a      	orrs	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	609a      	str	r2, [r3, #8]
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8000876:	b4b0      	push	{r4, r5, r7}
 8000878:	b085      	sub	sp, #20
 800087a:	af00      	add	r7, sp, #0
 800087c:	60f8      	str	r0, [r7, #12]
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 8000884:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 8000886:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800088e:	d114      	bne.n	80008ba <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	005a      	lsls	r2, r3, #1
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	085b      	lsrs	r3, r3, #1
 8000898:	441a      	add	r2, r3
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 80008a4:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80008a8:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80008aa:	086b      	lsrs	r3, r5, #1
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 80008b8:	e00a      	b.n	80008d0 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	085a      	lsrs	r2, r3, #1
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	441a      	add	r2, r3
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	461a      	mov	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	60da      	str	r2, [r3, #12]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bcb0      	pop	{r4, r5, r7}
 80008d8:	4770      	bx	lr
	...

080008dc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ff88 	bl	8000804 <LL_USART_IsEnabled>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d14e      	bne.n	8000998 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <LL_USART_Init+0xc8>)
 8000900:	4013      	ands	r3, r2
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	6851      	ldr	r1, [r2, #4]
 8000906:	683a      	ldr	r2, [r7, #0]
 8000908:	68d2      	ldr	r2, [r2, #12]
 800090a:	4311      	orrs	r1, r2
 800090c:	683a      	ldr	r2, [r7, #0]
 800090e:	6912      	ldr	r2, [r2, #16]
 8000910:	4311      	orrs	r1, r2
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	6992      	ldr	r2, [r2, #24]
 8000916:	430a      	orrs	r2, r1
 8000918:	431a      	orrs	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	4619      	mov	r1, r3
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ff80 	bl	800082a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4619      	mov	r1, r3
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff ff8d 	bl	8000850 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a1b      	ldr	r2, [pc, #108]	; (80009a8 <LL_USART_Init+0xcc>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d104      	bne.n	8000948 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800093e:	2000      	movs	r0, #0
 8000940:	f7ff fe7a 	bl	8000638 <LL_RCC_GetUSARTClockFreq>
 8000944:	61b8      	str	r0, [r7, #24]
 8000946:	e016      	b.n	8000976 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a18      	ldr	r2, [pc, #96]	; (80009ac <LL_USART_Init+0xd0>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d107      	bne.n	8000960 <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fe49 	bl	80005ec <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	e00a      	b.n	8000976 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <LL_USART_Init+0xd4>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d106      	bne.n	8000976 <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fe3d 	bl	80005ec <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d00d      	beq.n	8000998 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d009      	beq.n	8000998 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8000984:	2300      	movs	r3, #0
 8000986:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	699a      	ldr	r2, [r3, #24]
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	69b9      	ldr	r1, [r7, #24]
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff ff6f 	bl	8000876 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8000998:	7ffb      	ldrb	r3, [r7, #31]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	efff69f3 	.word	0xefff69f3
 80009a8:	40013800 	.word	0x40013800
 80009ac:	40004400 	.word	0x40004400
 80009b0:	40004800 	.word	0x40004800

080009b4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <LL_InitTick+0x30>)
 80009c8:	3b01      	subs	r3, #1
 80009ca:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <LL_InitTick+0x30>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <LL_InitTick+0x30>)
 80009d4:	2205      	movs	r2, #5
 80009d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000e010 	.word	0xe000e010

080009e8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80009f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff ffdd 	bl	80009b4 <LL_InitTick>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <LL_mDelay+0x48>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000a12:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a1a:	d00c      	beq.n	8000a36 <LL_mDelay+0x32>
  {
    Delay++;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000a22:	e008      	b.n	8000a36 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <LL_mDelay+0x48>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d002      	beq.n	8000a36 <LL_mDelay+0x32>
    {
      Delay--;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1f3      	bne.n	8000a24 <LL_mDelay+0x20>
    }
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000a58:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <LL_SetSystemCoreClock+0x1c>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000000 	.word	0x20000000

08000a70 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 021f 	and.w	r2, r3, #31
 8000a80:	4907      	ldr	r1, [pc, #28]	; (8000aa0 <NVIC_EnableIRQ+0x30>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	2001      	movs	r0, #1
 8000a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000e100 	.word	0xe000e100

08000aa4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	da0b      	bge.n	8000ad0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	490c      	ldr	r1, [pc, #48]	; (8000af0 <NVIC_SetPriority+0x4c>)
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	f003 030f 	and.w	r3, r3, #15
 8000ac4:	3b04      	subs	r3, #4
 8000ac6:	0112      	lsls	r2, r2, #4
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	440b      	add	r3, r1
 8000acc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ace:	e009      	b.n	8000ae4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	4907      	ldr	r1, [pc, #28]	; (8000af4 <NVIC_SetPriority+0x50>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	440b      	add	r3, r1
 8000ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00
 8000af4:	e000e100 	.word	0xe000e100

08000af8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b02:	695a      	ldr	r2, [r3, #20]
 8000b04:	4907      	ldr	r1, [pc, #28]	; (8000b24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b0e:	695a      	ldr	r2, [r3, #20]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4013      	ands	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	40021000 	.word	0x40021000

08000b28 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f7ff ffe3 	bl	8000af8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 8000b32:	2100      	movs	r1, #0
 8000b34:	2010      	movs	r0, #16
 8000b36:	f7ff ffb5 	bl	8000aa4 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000b3a:	2010      	movs	r0, #16
 8000b3c:	f7ff ff98 	bl	8000a70 <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 8000b40:	2100      	movs	r1, #0
 8000b42:	2011      	movs	r0, #17
 8000b44:	f7ff ffae 	bl	8000aa4 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000b48:	2011      	movs	r0, #17
 8000b4a:	f7ff ff91 	bl	8000a70 <NVIC_EnableIRQ>

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <LL_AHB1_GRP1_EnableClock>:
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b5e:	695a      	ldr	r2, [r3, #20]
 8000b60:	4907      	ldr	r1, [pc, #28]	; (8000b80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b6a:	695a      	ldr	r2, [r3, #20]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40021000 	.word	0x40021000

08000b84 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000bb6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bba:	f7ff ffcb 	bl	8000b54 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000bbe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000bc2:	f7ff ffc7 	bl	8000b54 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8000bc6:	2108      	movs	r1, #8
 8000bc8:	480a      	ldr	r0, [pc, #40]	; (8000bf4 <MX_GPIO_Init+0x54>)
 8000bca:	f7ff ffdb 	bl	8000b84 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000bce:	2308      	movs	r3, #8
 8000bd0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	463b      	mov	r3, r7
 8000be4:	4619      	mov	r1, r3
 8000be6:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <MX_GPIO_Init+0x54>)
 8000be8:	f7ff fbe9 	bl	80003be <LL_GPIO_Init>

}
 8000bec:	bf00      	nop
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	48000400 	.word	0x48000400

08000bf8 <NVIC_SetPriorityGrouping>:
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <NVIC_SetPriorityGrouping+0x44>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <NVIC_SetPriorityGrouping+0x44>)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	60d3      	str	r3, [r2, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <LL_RCC_HSI_Enable>:
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <LL_RCC_HSI_Enable+0x1c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <LL_RCC_HSI_Enable+0x1c>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40021000 	.word	0x40021000

08000c60 <LL_RCC_HSI_IsReady>:
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <LL_RCC_HSI_IsReady+0x20>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f003 0302 	and.w	r3, r3, #2
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	bf0c      	ite	eq
 8000c70:	2301      	moveq	r3, #1
 8000c72:	2300      	movne	r3, #0
 8000c74:	b2db      	uxtb	r3, r3
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	40021000 	.word	0x40021000

08000c84 <LL_RCC_HSI_SetCalibTrimming>:
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	4904      	ldr	r1, [pc, #16]	; (8000cac <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	600b      	str	r3, [r1, #0]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000

08000cb0 <LL_RCC_SetSysClkSource>:
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <LL_RCC_SetSysClkSource+0x24>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f023 0203 	bic.w	r2, r3, #3
 8000cc0:	4904      	ldr	r1, [pc, #16]	; (8000cd4 <LL_RCC_SetSysClkSource+0x24>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	604b      	str	r3, [r1, #4]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <LL_RCC_GetSysClkSource>:
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <LL_RCC_GetSysClkSource+0x18>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 030c 	and.w	r3, r3, #12
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <LL_RCC_SetAHBPrescaler>:
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <LL_RCC_SetAHBPrescaler+0x24>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d04:	4904      	ldr	r1, [pc, #16]	; (8000d18 <LL_RCC_SetAHBPrescaler+0x24>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	604b      	str	r3, [r1, #4]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	40021000 	.word	0x40021000

08000d1c <LL_RCC_SetAPB1Prescaler>:
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d2c:	4904      	ldr	r1, [pc, #16]	; (8000d40 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	604b      	str	r3, [r1, #4]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	40021000 	.word	0x40021000

08000d44 <LL_RCC_SetAPB2Prescaler>:
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000d54:	4904      	ldr	r1, [pc, #16]	; (8000d68 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	604b      	str	r3, [r1, #4]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	40021000 	.word	0x40021000

08000d6c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d76:	69da      	ldr	r2, [r3, #28]
 8000d78:	4907      	ldr	r1, [pc, #28]	; (8000d98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d82:	69da      	ldr	r2, [r3, #28]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4013      	ands	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	40021000 	.word	0x40021000

08000d9c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000da6:	699a      	ldr	r2, [r3, #24]
 8000da8:	4907      	ldr	r1, [pc, #28]	; (8000dc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000db2:	699a      	ldr	r2, [r3, #24]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4013      	ands	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40021000 	.word	0x40021000

08000dcc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <LL_FLASH_SetLatency+0x24>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 0207 	bic.w	r2, r3, #7
 8000ddc:	4904      	ldr	r1, [pc, #16]	; (8000df0 <LL_FLASH_SetLatency+0x24>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	600b      	str	r3, [r1, #0]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40022000 	.word	0x40022000

08000df4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <LL_FLASH_GetLatency+0x18>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40022000 	.word	0x40022000

08000e10 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	d106      	bne.n	8000e2c <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <LL_SYSTICK_SetClkSource+0x34>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <LL_SYSTICK_SetClkSource+0x34>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8000e2a:	e005      	b.n	8000e38 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <LL_SYSTICK_SetClkSource+0x34>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <LL_SYSTICK_SetClkSource+0x34>)
 8000e32:	f023 0304 	bic.w	r3, r3, #4
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e010 	.word	0xe000e010

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff ffa5 	bl	8000d9c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000e52:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000e56:	f7ff ff89 	bl	8000d6c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f7ff fecc 	bl	8000bf8 <NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e60:	f000 f812 	bl	8000e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e64:	f7ff fe9c 	bl	8000ba0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e68:	f7ff fe5e 	bl	8000b28 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e6c:	f000 fcfc 	bl	8001868 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // vyberanie funkcii
  USART2_RegisterCallback(processDmaData);
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <main+0x3c>)
 8000e72:	f000 fce7 	bl	8001844 <USART2_RegisterCallback>
  while (1)
  {
    /* USER CODE END WHILE */
#if POLLING
	//Polling for new data, no interrupts
	USART2_CheckDmaReception();
 8000e76:	f000 fdcd 	bl	8001a14 <USART2_CheckDmaReception>
	LL_mDelay(10);
 8000e7a:	200a      	movs	r0, #10
 8000e7c:	f7ff fdc2 	bl	8000a04 <LL_mDelay>
	USART2_CheckDmaReception();
 8000e80:	e7f9      	b.n	8000e76 <main+0x2e>
 8000e82:	bf00      	nop
 8000e84:	08000ef5 	.word	0x08000ef5

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f7ff ff9d 	bl	8000dcc <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8000e92:	f7ff ffaf 	bl	8000df4 <LL_FLASH_GetLatency>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x18>
  {
  Error_Handler();
 8000e9c:	f000 f888 	bl	8000fb0 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8000ea0:	f7ff fece 	bl	8000c40 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000ea4:	bf00      	nop
 8000ea6:	f7ff fedb 	bl	8000c60 <LL_RCC_HSI_IsReady>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d1fa      	bne.n	8000ea6 <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000eb0:	2010      	movs	r0, #16
 8000eb2:	f7ff fee7 	bl	8000c84 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff ff1c 	bl	8000cf4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f7ff ff2d 	bl	8000d1c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff ff3e 	bl	8000d44 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f7ff fef1 	bl	8000cb0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000ece:	bf00      	nop
 8000ed0:	f7ff ff02 	bl	8000cd8 <LL_RCC_GetSysClkSource>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1fa      	bne.n	8000ed0 <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <SystemClock_Config+0x68>)
 8000edc:	f7ff fd84 	bl	80009e8 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8000ee0:	2004      	movs	r0, #4
 8000ee2:	f7ff ff95 	bl	8000e10 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8000ee6:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <SystemClock_Config+0x68>)
 8000ee8:	f7ff fdb2 	bl	8000a50 <LL_SetSystemCoreClock>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	007a1200 	.word	0x007a1200

08000ef4 <processDmaData>:
		}
    }
}

void processDmaData(const uint8_t* data, uint16_t len)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	807b      	strh	r3, [r7, #2]
	if(*(data) == '#')
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b23      	cmp	r3, #35	; 0x23
 8000f06:	d145      	bne.n	8000f94 <processDmaData+0xa0>
	{
		for(uint8_t i = 1; (i < 35); i++)
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e00b      	b.n	8000f26 <processDmaData+0x32>
		{
			if(*(data+i) == '$')
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	4413      	add	r3, r2
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b24      	cmp	r3, #36	; 0x24
 8000f18:	d102      	bne.n	8000f20 <processDmaData+0x2c>
			{
				listen = 1;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <processDmaData+0xac>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 1; (i < 35); i++)
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	3301      	adds	r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	2b22      	cmp	r3, #34	; 0x22
 8000f2a:	d9f0      	bls.n	8000f0e <processDmaData+0x1a>
			}
		}

		if(listen)
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <processDmaData+0xac>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d02f      	beq.n	8000f94 <processDmaData+0xa0>
		{
			// cyklus rata male a velke pismena
			for(uint8_t i = 1; i < len; i++)
 8000f34:	2301      	movs	r3, #1
 8000f36:	73bb      	strb	r3, [r7, #14]
 8000f38:	e027      	b.n	8000f8a <processDmaData+0x96>
			{
				if(islower(*(data+i)))
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <processDmaData+0xb0>)
 8000f46:	4413      	add	r3, r2
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d106      	bne.n	8000f60 <processDmaData+0x6c>
				{
					countLower++;
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <processDmaData+0xb4>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	3301      	adds	r3, #1
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <processDmaData+0xb4>)
 8000f5c:	701a      	strb	r2, [r3, #0]
 8000f5e:	e011      	b.n	8000f84 <processDmaData+0x90>
				}
				else if(isupper(*(data+i)))
 8000f60:	7bbb      	ldrb	r3, [r7, #14]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <processDmaData+0xb0>)
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d105      	bne.n	8000f84 <processDmaData+0x90>
				{
					countUpper++;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <processDmaData+0xb8>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <processDmaData+0xb8>)
 8000f82:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 1; i < len; i++)
 8000f84:	7bbb      	ldrb	r3, [r7, #14]
 8000f86:	3301      	adds	r3, #1
 8000f88:	73bb      	strb	r3, [r7, #14]
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	887a      	ldrh	r2, [r7, #2]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8d2      	bhi.n	8000f3a <processDmaData+0x46>
				}
			}
		}
	}
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	20000022 	.word	0x20000022
 8000fa4:	08001b9f 	.word	0x08001b9f
 8000fa8:	20000021 	.word	0x20000021
 8000fac:	20000020 	.word	0x20000020

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <LL_DMA_DisableChannel+0x3c>)
 8000fd0:	5cd3      	ldrb	r3, [r2, r3]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	3a01      	subs	r2, #1
 8000fde:	4907      	ldr	r1, [pc, #28]	; (8000ffc <LL_DMA_DisableChannel+0x3c>)
 8000fe0:	5c8a      	ldrb	r2, [r1, r2]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	440a      	add	r2, r1
 8000fe8:	f023 0301 	bic.w	r3, r3, #1
 8000fec:	6013      	str	r3, [r2, #0]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	08001b78 	.word	0x08001b78

08001000 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001014:	bf0c      	ite	eq
 8001016:	2301      	moveq	r3, #1
 8001018:	2300      	movne	r3, #0
 800101a:	b2db      	uxtb	r3, r3
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001038:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	b2db      	uxtb	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001060:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001064:	bf0c      	ite	eq
 8001066:	2301      	moveq	r3, #1
 8001068:	2300      	movne	r3, #0
 800106a:	b2db      	uxtb	r3, r3
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001086:	605a      	str	r2, [r3, #4]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010a2:	605a      	str	r2, [r3, #4]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80010be:	605a      	str	r2, [r3, #4]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	2b10      	cmp	r3, #16
 80010de:	bf0c      	ite	eq
 80010e0:	2301      	moveq	r3, #1
 80010e2:	2300      	movne	r3, #0
 80010e4:	b2db      	uxtb	r3, r3
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001102:	2b40      	cmp	r3, #64	; 0x40
 8001104:	bf0c      	ite	eq
 8001106:	2301      	moveq	r3, #1
 8001108:	2300      	movne	r3, #0
 800110a:	b2db      	uxtb	r3, r3
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2210      	movs	r2, #16
 8001124:	621a      	str	r2, [r3, #32]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <HardFault_Handler+0x4>

08001146 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <MemManage_Handler+0x4>

0800114c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <BusFault_Handler+0x4>

08001152 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <UsageFault_Handler+0x4>

08001158 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8001194:	480c      	ldr	r0, [pc, #48]	; (80011c8 <DMA1_Channel6_IRQHandler+0x38>)
 8001196:	f7ff ff33 	bl	8001000 <LL_DMA_IsActiveFlag_TC6>
 800119a:	4603      	mov	r3, r0
 800119c:	2b01      	cmp	r3, #1
 800119e:	d105      	bne.n	80011ac <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 80011a0:	f000 fc38 	bl	8001a14 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 80011a4:	4808      	ldr	r0, [pc, #32]	; (80011c8 <DMA1_Channel6_IRQHandler+0x38>)
 80011a6:	f7ff ff67 	bl	8001078 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 80011aa:	e00a      	b.n	80011c2 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 80011ac:	4806      	ldr	r0, [pc, #24]	; (80011c8 <DMA1_Channel6_IRQHandler+0x38>)
 80011ae:	f7ff ff4f 	bl	8001050 <LL_DMA_IsActiveFlag_HT6>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d104      	bne.n	80011c2 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 80011b8:	f000 fc2c 	bl	8001a14 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <DMA1_Channel6_IRQHandler+0x38>)
 80011be:	f7ff ff77 	bl	80010b0 <LL_DMA_ClearFlag_HT6>
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40020000 	.word	0x40020000

080011cc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 80011d0:	480a      	ldr	r0, [pc, #40]	; (80011fc <DMA1_Channel7_IRQHandler+0x30>)
 80011d2:	f7ff ff29 	bl	8001028 <LL_DMA_IsActiveFlag_TC7>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d10d      	bne.n	80011f8 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 80011dc:	4807      	ldr	r0, [pc, #28]	; (80011fc <DMA1_Channel7_IRQHandler+0x30>)
 80011de:	f7ff ff59 	bl	8001094 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 80011e2:	bf00      	nop
 80011e4:	4806      	ldr	r0, [pc, #24]	; (8001200 <DMA1_Channel7_IRQHandler+0x34>)
 80011e6:	f7ff ff84 	bl	80010f2 <LL_USART_IsActiveFlag_TC>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f9      	beq.n	80011e4 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 80011f0:	2107      	movs	r1, #7
 80011f2:	4802      	ldr	r0, [pc, #8]	; (80011fc <DMA1_Channel7_IRQHandler+0x30>)
 80011f4:	f7ff fee4 	bl	8000fc0 <LL_DMA_DisableChannel>
	}
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40020000 	.word	0x40020000
 8001200:	40004400 	.word	0x40004400

08001204 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001208:	4806      	ldr	r0, [pc, #24]	; (8001224 <USART2_IRQHandler+0x20>)
 800120a:	f7ff ff5f 	bl	80010cc <LL_USART_IsActiveFlag_IDLE>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d004      	beq.n	800121e <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8001214:	f000 fbfe 	bl	8001a14 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <USART2_IRQHandler+0x20>)
 800121a:	f7ff ff7d 	bl	8001118 <LL_USART_ClearFlag_IDLE>
	}
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40004400 	.word	0x40004400

08001228 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <SystemInit+0x84>)
 800122e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <SystemInit+0x84>)
 8001234:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001238:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800123c:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <SystemInit+0x88>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <SystemInit+0x88>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <SystemInit+0x88>)
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	4918      	ldr	r1, [pc, #96]	; (80012b0 <SystemInit+0x88>)
 800124e:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <SystemInit+0x8c>)
 8001250:	4013      	ands	r3, r2
 8001252:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <SystemInit+0x88>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a15      	ldr	r2, [pc, #84]	; (80012b0 <SystemInit+0x88>)
 800125a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800125e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001262:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <SystemInit+0x88>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a11      	ldr	r2, [pc, #68]	; (80012b0 <SystemInit+0x88>)
 800126a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <SystemInit+0x88>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <SystemInit+0x88>)
 8001276:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800127a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <SystemInit+0x88>)
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <SystemInit+0x88>)
 8001282:	f023 030f 	bic.w	r3, r3, #15
 8001286:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <SystemInit+0x88>)
 800128a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800128c:	4908      	ldr	r1, [pc, #32]	; (80012b0 <SystemInit+0x88>)
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <SystemInit+0x90>)
 8001290:	4013      	ands	r3, r2
 8001292:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <SystemInit+0x88>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SystemInit+0x84>)
 800129c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012a0:	609a      	str	r2, [r3, #8]
#endif
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00
 80012b0:	40021000 	.word	0x40021000
 80012b4:	f87fc00c 	.word	0xf87fc00c
 80012b8:	ff00fccc 	.word	0xff00fccc

080012bc <NVIC_EnableIRQ>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4907      	ldr	r1, [pc, #28]	; (80012ec <NVIC_EnableIRQ+0x30>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <NVIC_SetPriority>:
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	da0b      	bge.n	800131c <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <NVIC_SetPriority+0x4c>)
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	3b04      	subs	r3, #4
 8001312:	0112      	lsls	r2, r2, #4
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	440b      	add	r3, r1
 8001318:	761a      	strb	r2, [r3, #24]
}
 800131a:	e009      	b.n	8001330 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4907      	ldr	r1, [pc, #28]	; (8001340 <NVIC_SetPriority+0x50>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00
 8001340:	e000e100 	.word	0xe000e100

08001344 <LL_DMA_EnableChannel>:
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	3b01      	subs	r3, #1
 8001352:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <LL_DMA_EnableChannel+0x3c>)
 8001354:	5cd3      	ldrb	r3, [r2, r3]
 8001356:	461a      	mov	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	3a01      	subs	r2, #1
 8001362:	4907      	ldr	r1, [pc, #28]	; (8001380 <LL_DMA_EnableChannel+0x3c>)
 8001364:	5c8a      	ldrb	r2, [r1, r2]
 8001366:	4611      	mov	r1, r2
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	440a      	add	r2, r1
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6013      	str	r3, [r2, #0]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	08001b98 	.word	0x08001b98

08001384 <LL_DMA_SetDataTransferDirection>:
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	3b01      	subs	r3, #1
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <LL_DMA_SetDataTransferDirection+0x48>)
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	461a      	mov	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4413      	add	r3, r2
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013a4:	f023 0310 	bic.w	r3, r3, #16
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	3a01      	subs	r2, #1
 80013ac:	4907      	ldr	r1, [pc, #28]	; (80013cc <LL_DMA_SetDataTransferDirection+0x48>)
 80013ae:	5c8a      	ldrb	r2, [r1, r2]
 80013b0:	4611      	mov	r1, r2
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	440a      	add	r2, r1
 80013b6:	4611      	mov	r1, r2
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	08001b98 	.word	0x08001b98

080013d0 <LL_DMA_GetDataTransferDirection>:
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3b01      	subs	r3, #1
 80013de:	4a07      	ldr	r2, [pc, #28]	; (80013fc <LL_DMA_GetDataTransferDirection+0x2c>)
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
 80013e2:	461a      	mov	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	f244 0310 	movw	r3, #16400	; 0x4010
 80013ee:	4013      	ands	r3, r2
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	08001b98 	.word	0x08001b98

08001400 <LL_DMA_SetMode>:
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	3b01      	subs	r3, #1
 8001410:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <LL_DMA_SetMode+0x44>)
 8001412:	5cd3      	ldrb	r3, [r2, r3]
 8001414:	461a      	mov	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4413      	add	r3, r2
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f023 0220 	bic.w	r2, r3, #32
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	3b01      	subs	r3, #1
 8001424:	4907      	ldr	r1, [pc, #28]	; (8001444 <LL_DMA_SetMode+0x44>)
 8001426:	5ccb      	ldrb	r3, [r1, r3]
 8001428:	4619      	mov	r1, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	440b      	add	r3, r1
 800142e:	4619      	mov	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4313      	orrs	r3, r2
 8001434:	600b      	str	r3, [r1, #0]
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	08001b98 	.word	0x08001b98

08001448 <LL_DMA_SetPeriphIncMode>:
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	3b01      	subs	r3, #1
 8001458:	4a0c      	ldr	r2, [pc, #48]	; (800148c <LL_DMA_SetPeriphIncMode+0x44>)
 800145a:	5cd3      	ldrb	r3, [r2, r3]
 800145c:	461a      	mov	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4413      	add	r3, r2
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	3b01      	subs	r3, #1
 800146c:	4907      	ldr	r1, [pc, #28]	; (800148c <LL_DMA_SetPeriphIncMode+0x44>)
 800146e:	5ccb      	ldrb	r3, [r1, r3]
 8001470:	4619      	mov	r1, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	440b      	add	r3, r1
 8001476:	4619      	mov	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	08001b98 	.word	0x08001b98

08001490 <LL_DMA_SetMemoryIncMode>:
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	3b01      	subs	r3, #1
 80014a0:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <LL_DMA_SetMemoryIncMode+0x44>)
 80014a2:	5cd3      	ldrb	r3, [r2, r3]
 80014a4:	461a      	mov	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4413      	add	r3, r2
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	4907      	ldr	r1, [pc, #28]	; (80014d4 <LL_DMA_SetMemoryIncMode+0x44>)
 80014b6:	5ccb      	ldrb	r3, [r1, r3]
 80014b8:	4619      	mov	r1, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	440b      	add	r3, r1
 80014be:	4619      	mov	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	08001b98 	.word	0x08001b98

080014d8 <LL_DMA_SetPeriphSize>:
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	4a0c      	ldr	r2, [pc, #48]	; (800151c <LL_DMA_SetPeriphSize+0x44>)
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	461a      	mov	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4413      	add	r3, r2
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	4907      	ldr	r1, [pc, #28]	; (800151c <LL_DMA_SetPeriphSize+0x44>)
 80014fe:	5ccb      	ldrb	r3, [r1, r3]
 8001500:	4619      	mov	r1, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	440b      	add	r3, r1
 8001506:	4619      	mov	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]
}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	08001b98 	.word	0x08001b98

08001520 <LL_DMA_SetMemorySize>:
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	3b01      	subs	r3, #1
 8001530:	4a0c      	ldr	r2, [pc, #48]	; (8001564 <LL_DMA_SetMemorySize+0x44>)
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	461a      	mov	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4413      	add	r3, r2
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	3b01      	subs	r3, #1
 8001544:	4907      	ldr	r1, [pc, #28]	; (8001564 <LL_DMA_SetMemorySize+0x44>)
 8001546:	5ccb      	ldrb	r3, [r1, r3]
 8001548:	4619      	mov	r1, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	440b      	add	r3, r1
 800154e:	4619      	mov	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4313      	orrs	r3, r2
 8001554:	600b      	str	r3, [r1, #0]
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	08001b98 	.word	0x08001b98

08001568 <LL_DMA_SetChannelPriorityLevel>:
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	3b01      	subs	r3, #1
 8001578:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <LL_DMA_SetChannelPriorityLevel+0x44>)
 800157a:	5cd3      	ldrb	r3, [r2, r3]
 800157c:	461a      	mov	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4413      	add	r3, r2
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	3b01      	subs	r3, #1
 800158c:	4907      	ldr	r1, [pc, #28]	; (80015ac <LL_DMA_SetChannelPriorityLevel+0x44>)
 800158e:	5ccb      	ldrb	r3, [r1, r3]
 8001590:	4619      	mov	r1, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	440b      	add	r3, r1
 8001596:	4619      	mov	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	08001b98 	.word	0x08001b98

080015b0 <LL_DMA_SetDataLength>:
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	3b01      	subs	r3, #1
 80015c0:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <LL_DMA_SetDataLength+0x44>)
 80015c2:	5cd3      	ldrb	r3, [r2, r3]
 80015c4:	461a      	mov	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4413      	add	r3, r2
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	0c1b      	lsrs	r3, r3, #16
 80015ce:	041b      	lsls	r3, r3, #16
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	3a01      	subs	r2, #1
 80015d4:	4907      	ldr	r1, [pc, #28]	; (80015f4 <LL_DMA_SetDataLength+0x44>)
 80015d6:	5c8a      	ldrb	r2, [r1, r2]
 80015d8:	4611      	mov	r1, r2
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	440a      	add	r2, r1
 80015de:	4611      	mov	r1, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	604b      	str	r3, [r1, #4]
}
 80015e6:	bf00      	nop
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	08001b98 	.word	0x08001b98

080015f8 <LL_DMA_GetDataLength>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	3b01      	subs	r3, #1
 8001606:	4a06      	ldr	r2, [pc, #24]	; (8001620 <LL_DMA_GetDataLength+0x28>)
 8001608:	5cd3      	ldrb	r3, [r2, r3]
 800160a:	461a      	mov	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4413      	add	r3, r2
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	b29b      	uxth	r3, r3
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	08001b98 	.word	0x08001b98

08001624 <LL_DMA_ConfigAddresses>:
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	2b10      	cmp	r3, #16
 8001636:	d114      	bne.n	8001662 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	3b01      	subs	r3, #1
 800163c:	4a16      	ldr	r2, [pc, #88]	; (8001698 <LL_DMA_ConfigAddresses+0x74>)
 800163e:	5cd3      	ldrb	r3, [r2, r3]
 8001640:	461a      	mov	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4413      	add	r3, r2
 8001646:	461a      	mov	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	3b01      	subs	r3, #1
 8001650:	4a11      	ldr	r2, [pc, #68]	; (8001698 <LL_DMA_ConfigAddresses+0x74>)
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	461a      	mov	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4413      	add	r3, r2
 800165a:	461a      	mov	r2, r3
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	6093      	str	r3, [r2, #8]
}
 8001660:	e013      	b.n	800168a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	3b01      	subs	r3, #1
 8001666:	4a0c      	ldr	r2, [pc, #48]	; (8001698 <LL_DMA_ConfigAddresses+0x74>)
 8001668:	5cd3      	ldrb	r3, [r2, r3]
 800166a:	461a      	mov	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4413      	add	r3, r2
 8001670:	461a      	mov	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	3b01      	subs	r3, #1
 800167a:	4a07      	ldr	r2, [pc, #28]	; (8001698 <LL_DMA_ConfigAddresses+0x74>)
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	461a      	mov	r2, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	60d3      	str	r3, [r2, #12]
}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	08001b98 	.word	0x08001b98

0800169c <LL_DMA_SetPeriphAddress>:
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <LL_DMA_SetPeriphAddress+0x2c>)
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
 80016b0:	461a      	mov	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4413      	add	r3, r2
 80016b6:	461a      	mov	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6093      	str	r3, [r2, #8]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	08001b98 	.word	0x08001b98

080016cc <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	3b01      	subs	r3, #1
 80016da:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <LL_DMA_EnableIT_TE+0x3c>)
 80016dc:	5cd3      	ldrb	r3, [r2, r3]
 80016de:	461a      	mov	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	3a01      	subs	r2, #1
 80016ea:	4907      	ldr	r1, [pc, #28]	; (8001708 <LL_DMA_EnableIT_TE+0x3c>)
 80016ec:	5c8a      	ldrb	r2, [r1, r2]
 80016ee:	4611      	mov	r1, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	440a      	add	r2, r1
 80016f4:	f043 0308 	orr.w	r3, r3, #8
 80016f8:	6013      	str	r3, [r2, #0]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	08001b98 	.word	0x08001b98

0800170c <LL_AHB1_GRP1_EnableClock>:
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001716:	695a      	ldr	r2, [r3, #20]
 8001718:	4907      	ldr	r1, [pc, #28]	; (8001738 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4313      	orrs	r3, r2
 800171e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4013      	ands	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40021000 	.word	0x40021000

0800173c <LL_APB1_GRP1_EnableClock>:
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001746:	69da      	ldr	r2, [r3, #28]
 8001748:	4907      	ldr	r1, [pc, #28]	; (8001768 <LL_APB1_GRP1_EnableClock+0x2c>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4313      	orrs	r3, r2
 800174e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001752:	69da      	ldr	r2, [r3, #28]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4013      	ands	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	40021000 	.word	0x40021000

0800176c <LL_USART_Enable>:
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f043 0201 	orr.w	r2, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	601a      	str	r2, [r3, #0]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <LL_USART_ConfigAsyncMode>:
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	609a      	str	r2, [r3, #8]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	609a      	str	r2, [r3, #8]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	609a      	str	r2, [r3, #8]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	609a      	str	r2, [r3, #8]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8001818:	b490      	push	{r4, r7}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 8001822:	2400      	movs	r4, #0

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d103      	bne.n	8001832 <LL_USART_DMA_GetRegAddr+0x1a>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3328      	adds	r3, #40	; 0x28
 800182e:	461c      	mov	r4, r3
 8001830:	e002      	b.n	8001838 <LL_USART_DMA_GetRegAddr+0x20>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3324      	adds	r3, #36	; 0x24
 8001836:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 8001838:	4623      	mov	r3, r4
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bc90      	pop	{r4, r7}
 8001842:	4770      	bx	lr

08001844 <USART2_RegisterCallback>:
uint8_t bufferUSART2dma[DMA_USART2_BUFFER_SIZE];

static void (* USART2_ProcessData)(const uint8_t* data, uint16_t len) = 0;

void USART2_RegisterCallback(void *callback)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a03      	ldr	r2, [pc, #12]	; (8001864 <USART2_RegisterCallback+0x20>)
 8001856:	6013      	str	r3, [r2, #0]
	}
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	20000024 	.word	0x20000024

08001868 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b090      	sub	sp, #64	; 0x40
 800186c:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]
 800187e:	615a      	str	r2, [r3, #20]
 8001880:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
 8001890:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001892:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001896:	f7ff ff51 	bl	800173c <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800189a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800189e:	f7ff ff35 	bl	800170c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 80018a2:	f248 0304 	movw	r3, #32772	; 0x8004
 80018a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018a8:	2302      	movs	r3, #2
 80018aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80018b8:	2307      	movs	r3, #7
 80018ba:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	4619      	mov	r1, r3
 80018c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c4:	f7fe fd7b 	bl	80003be <LL_GPIO_Init>

  /* USART2 DMA Init */
  
  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2106      	movs	r1, #6
 80018cc:	484e      	ldr	r0, [pc, #312]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 80018ce:	f7ff fd59 	bl	8001384 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 80018d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018d6:	2106      	movs	r1, #6
 80018d8:	484b      	ldr	r0, [pc, #300]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 80018da:	f7ff fe45 	bl	8001568 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 80018de:	2200      	movs	r2, #0
 80018e0:	2106      	movs	r1, #6
 80018e2:	4849      	ldr	r0, [pc, #292]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 80018e4:	f7ff fd8c 	bl	8001400 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2106      	movs	r1, #6
 80018ec:	4846      	ldr	r0, [pc, #280]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 80018ee:	f7ff fdab 	bl	8001448 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80018f2:	2280      	movs	r2, #128	; 0x80
 80018f4:	2106      	movs	r1, #6
 80018f6:	4844      	ldr	r0, [pc, #272]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 80018f8:	f7ff fdca 	bl	8001490 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2106      	movs	r1, #6
 8001900:	4841      	ldr	r0, [pc, #260]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 8001902:	f7ff fde9 	bl	80014d8 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001906:	2200      	movs	r2, #0
 8001908:	2106      	movs	r1, #6
 800190a:	483f      	ldr	r0, [pc, #252]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 800190c:	f7ff fe08 	bl	8001520 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8001910:	2101      	movs	r1, #1
 8001912:	483e      	ldr	r0, [pc, #248]	; (8001a0c <MX_USART2_UART_Init+0x1a4>)
 8001914:	f7ff ff80 	bl	8001818 <LL_USART_DMA_GetRegAddr>
 8001918:	4604      	mov	r4, r0
 800191a:	4d3d      	ldr	r5, [pc, #244]	; (8001a10 <MX_USART2_UART_Init+0x1a8>)
 800191c:	2106      	movs	r1, #6
 800191e:	483a      	ldr	r0, [pc, #232]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 8001920:	f7ff fd56 	bl	80013d0 <LL_DMA_GetDataTransferDirection>
 8001924:	4603      	mov	r3, r0
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	462b      	mov	r3, r5
 800192a:	4622      	mov	r2, r4
 800192c:	2106      	movs	r1, #6
 800192e:	4836      	ldr	r0, [pc, #216]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 8001930:	f7ff fe78 	bl	8001624 <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART2dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8001934:	2214      	movs	r2, #20
 8001936:	2106      	movs	r1, #6
 8001938:	4833      	ldr	r0, [pc, #204]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 800193a:	f7ff fe39 	bl	80015b0 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800193e:	2106      	movs	r1, #6
 8001940:	4831      	ldr	r0, [pc, #196]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 8001942:	f7ff fcff 	bl	8001344 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8001946:	4831      	ldr	r0, [pc, #196]	; (8001a0c <MX_USART2_UART_Init+0x1a4>)
 8001948:	f7ff ff46 	bl	80017d8 <LL_USART_EnableDMAReq_RX>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
#endif

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800194c:	2210      	movs	r2, #16
 800194e:	2107      	movs	r1, #7
 8001950:	482d      	ldr	r0, [pc, #180]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 8001952:	f7ff fd17 	bl	8001384 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8001956:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800195a:	2107      	movs	r1, #7
 800195c:	482a      	ldr	r0, [pc, #168]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 800195e:	f7ff fe03 	bl	8001568 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001962:	2200      	movs	r2, #0
 8001964:	2107      	movs	r1, #7
 8001966:	4828      	ldr	r0, [pc, #160]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 8001968:	f7ff fd4a 	bl	8001400 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 800196c:	2200      	movs	r2, #0
 800196e:	2107      	movs	r1, #7
 8001970:	4825      	ldr	r0, [pc, #148]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 8001972:	f7ff fd69 	bl	8001448 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001976:	2280      	movs	r2, #128	; 0x80
 8001978:	2107      	movs	r1, #7
 800197a:	4823      	ldr	r0, [pc, #140]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 800197c:	f7ff fd88 	bl	8001490 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001980:	2200      	movs	r2, #0
 8001982:	2107      	movs	r1, #7
 8001984:	4820      	ldr	r0, [pc, #128]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 8001986:	f7ff fda7 	bl	80014d8 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 800198a:	2200      	movs	r2, #0
 800198c:	2107      	movs	r1, #7
 800198e:	481e      	ldr	r0, [pc, #120]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 8001990:	f7ff fdc6 	bl	8001520 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8001994:	2100      	movs	r1, #0
 8001996:	481d      	ldr	r0, [pc, #116]	; (8001a0c <MX_USART2_UART_Init+0x1a4>)
 8001998:	f7ff ff3e 	bl	8001818 <LL_USART_DMA_GetRegAddr>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	2107      	movs	r1, #7
 80019a2:	4819      	ldr	r0, [pc, #100]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 80019a4:	f7ff fe7a 	bl	800169c <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 80019a8:	4818      	ldr	r0, [pc, #96]	; (8001a0c <MX_USART2_UART_Init+0x1a4>)
 80019aa:	f7ff ff25 	bl	80017f8 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 80019ae:	2107      	movs	r1, #7
 80019b0:	4815      	ldr	r0, [pc, #84]	; (8001a08 <MX_USART2_UART_Init+0x1a0>)
 80019b2:	f7ff fe8b 	bl	80016cc <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 80019b6:	2100      	movs	r1, #0
 80019b8:	2026      	movs	r0, #38	; 0x26
 80019ba:	f7ff fc99 	bl	80012f0 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80019be:	2026      	movs	r0, #38	; 0x26
 80019c0:	f7ff fc7c 	bl	80012bc <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 80019c4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80019c8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80019d6:	230c      	movs	r3, #12
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80019da:	2300      	movs	r3, #0
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80019de:	2300      	movs	r3, #0
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	4808      	ldr	r0, [pc, #32]	; (8001a0c <MX_USART2_UART_Init+0x1a4>)
 80019ea:	f7fe ff77 	bl	80008dc <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80019ee:	4807      	ldr	r0, [pc, #28]	; (8001a0c <MX_USART2_UART_Init+0x1a4>)
 80019f0:	f7ff fee2 	bl	80017b8 <LL_USART_DisableIT_CTS>
#if !POLLING
  LL_USART_EnableIT_IDLE(USART2);
#endif
  LL_USART_ConfigAsyncMode(USART2);
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_USART2_UART_Init+0x1a4>)
 80019f6:	f7ff fec9 	bl	800178c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80019fa:	4804      	ldr	r0, [pc, #16]	; (8001a0c <MX_USART2_UART_Init+0x1a4>)
 80019fc:	f7ff feb6 	bl	800176c <LL_USART_Enable>
}
 8001a00:	bf00      	nop
 8001a02:	3738      	adds	r7, #56	; 0x38
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bdb0      	pop	{r4, r5, r7, pc}
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	40004400 	.word	0x40004400
 8001a10:	2000002c 	.word	0x2000002c

08001a14 <USART2_CheckDmaReception>:
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
}


void USART2_CheckDmaReception(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
	if(USART2_ProcessData == 0) return;
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <USART2_CheckDmaReception+0xa0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d043      	beq.n	8001aaa <USART2_CheckDmaReception+0x96>

	static uint16_t old_pos = 0;

	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8001a22:	2106      	movs	r1, #6
 8001a24:	4824      	ldr	r0, [pc, #144]	; (8001ab8 <USART2_CheckDmaReception+0xa4>)
 8001a26:	f7ff fde7 	bl	80015f8 <LL_DMA_GetDataLength>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	f1c3 0314 	rsb	r3, r3, #20
 8001a32:	80fb      	strh	r3, [r7, #6]

	if (pos != old_pos)
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <USART2_CheckDmaReception+0xa8>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	88fa      	ldrh	r2, [r7, #6]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d02a      	beq.n	8001a94 <USART2_CheckDmaReception+0x80>
	{
		if (pos > old_pos)
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <USART2_CheckDmaReception+0xa8>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	88fa      	ldrh	r2, [r7, #6]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d90e      	bls.n	8001a66 <USART2_CheckDmaReception+0x52>
		{
			USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 8001a48:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <USART2_CheckDmaReception+0xa0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <USART2_CheckDmaReception+0xa8>)
 8001a4e:	8812      	ldrh	r2, [r2, #0]
 8001a50:	4611      	mov	r1, r2
 8001a52:	4a1b      	ldr	r2, [pc, #108]	; (8001ac0 <USART2_CheckDmaReception+0xac>)
 8001a54:	1888      	adds	r0, r1, r2
 8001a56:	4a19      	ldr	r2, [pc, #100]	; (8001abc <USART2_CheckDmaReception+0xa8>)
 8001a58:	8812      	ldrh	r2, [r2, #0]
 8001a5a:	88f9      	ldrh	r1, [r7, #6]
 8001a5c:	1a8a      	subs	r2, r1, r2
 8001a5e:	b292      	uxth	r2, r2
 8001a60:	4611      	mov	r1, r2
 8001a62:	4798      	blx	r3
 8001a64:	e016      	b.n	8001a94 <USART2_CheckDmaReception+0x80>
		}
		else
		{
			USART2_ProcessData(&bufferUSART2dma[old_pos], DMA_USART2_BUFFER_SIZE - old_pos);
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <USART2_CheckDmaReception+0xa0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a14      	ldr	r2, [pc, #80]	; (8001abc <USART2_CheckDmaReception+0xa8>)
 8001a6c:	8812      	ldrh	r2, [r2, #0]
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4a13      	ldr	r2, [pc, #76]	; (8001ac0 <USART2_CheckDmaReception+0xac>)
 8001a72:	1888      	adds	r0, r1, r2
 8001a74:	4a11      	ldr	r2, [pc, #68]	; (8001abc <USART2_CheckDmaReception+0xa8>)
 8001a76:	8812      	ldrh	r2, [r2, #0]
 8001a78:	f1c2 0214 	rsb	r2, r2, #20
 8001a7c:	b292      	uxth	r2, r2
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4798      	blx	r3

			if (pos > 0)
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <USART2_CheckDmaReception+0x80>
			{
				USART2_ProcessData(&bufferUSART2dma[0], pos);
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <USART2_CheckDmaReception+0xa0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	88fa      	ldrh	r2, [r7, #6]
 8001a8e:	4611      	mov	r1, r2
 8001a90:	480b      	ldr	r0, [pc, #44]	; (8001ac0 <USART2_CheckDmaReception+0xac>)
 8001a92:	4798      	blx	r3
			}
		}
	}

	old_pos = pos;
 8001a94:	4a09      	ldr	r2, [pc, #36]	; (8001abc <USART2_CheckDmaReception+0xa8>)
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	8013      	strh	r3, [r2, #0]

	if (old_pos == DMA_USART2_BUFFER_SIZE)
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <USART2_CheckDmaReception+0xa8>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	2b14      	cmp	r3, #20
 8001aa0:	d104      	bne.n	8001aac <USART2_CheckDmaReception+0x98>
	{
		old_pos = 0;
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <USART2_CheckDmaReception+0xa8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	801a      	strh	r2, [r3, #0]
 8001aa8:	e000      	b.n	8001aac <USART2_CheckDmaReception+0x98>
	if(USART2_ProcessData == 0) return;
 8001aaa:	bf00      	nop
	}
}
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000024 	.word	0x20000024
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	20000028 	.word	0x20000028
 8001ac0:	2000002c 	.word	0x2000002c

08001ac4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001afc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ac8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001aca:	e003      	b.n	8001ad4 <LoopCopyDataInit>

08001acc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ace:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ad0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ad2:	3104      	adds	r1, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ad4:	480b      	ldr	r0, [pc, #44]	; (8001b04 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ad8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ada:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001adc:	d3f6      	bcc.n	8001acc <CopyDataInit>
	ldr	r2, =_sbss
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ae0:	e002      	b.n	8001ae8 <LoopFillZerobss>

08001ae2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ae2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ae4:	f842 3b04 	str.w	r3, [r2], #4

08001ae8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <LoopForever+0x16>)
	cmp	r2, r3
 8001aea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001aec:	d3f9      	bcc.n	8001ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001aee:	f7ff fb9b 	bl	8001228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001af2:	f000 f811 	bl	8001b18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001af6:	f7ff f9a7 	bl	8000e48 <main>

08001afa <LoopForever>:

LoopForever:
    b LoopForever
 8001afa:	e7fe      	b.n	8001afa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001afc:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001b00:	08001ca8 	.word	0x08001ca8
	ldr	r0, =_sdata
 8001b04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b08:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001b0c:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001b10:	20000040 	.word	0x20000040

08001b14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b14:	e7fe      	b.n	8001b14 <ADC1_2_IRQHandler>
	...

08001b18 <__libc_init_array>:
 8001b18:	b570      	push	{r4, r5, r6, lr}
 8001b1a:	4d0d      	ldr	r5, [pc, #52]	; (8001b50 <__libc_init_array+0x38>)
 8001b1c:	4c0d      	ldr	r4, [pc, #52]	; (8001b54 <__libc_init_array+0x3c>)
 8001b1e:	1b64      	subs	r4, r4, r5
 8001b20:	10a4      	asrs	r4, r4, #2
 8001b22:	2600      	movs	r6, #0
 8001b24:	42a6      	cmp	r6, r4
 8001b26:	d109      	bne.n	8001b3c <__libc_init_array+0x24>
 8001b28:	4d0b      	ldr	r5, [pc, #44]	; (8001b58 <__libc_init_array+0x40>)
 8001b2a:	4c0c      	ldr	r4, [pc, #48]	; (8001b5c <__libc_init_array+0x44>)
 8001b2c:	f000 f818 	bl	8001b60 <_init>
 8001b30:	1b64      	subs	r4, r4, r5
 8001b32:	10a4      	asrs	r4, r4, #2
 8001b34:	2600      	movs	r6, #0
 8001b36:	42a6      	cmp	r6, r4
 8001b38:	d105      	bne.n	8001b46 <__libc_init_array+0x2e>
 8001b3a:	bd70      	pop	{r4, r5, r6, pc}
 8001b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b40:	4798      	blx	r3
 8001b42:	3601      	adds	r6, #1
 8001b44:	e7ee      	b.n	8001b24 <__libc_init_array+0xc>
 8001b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b4a:	4798      	blx	r3
 8001b4c:	3601      	adds	r6, #1
 8001b4e:	e7f2      	b.n	8001b36 <__libc_init_array+0x1e>
 8001b50:	08001ca0 	.word	0x08001ca0
 8001b54:	08001ca0 	.word	0x08001ca0
 8001b58:	08001ca0 	.word	0x08001ca0
 8001b5c:	08001ca4 	.word	0x08001ca4

08001b60 <_init>:
 8001b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b62:	bf00      	nop
 8001b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b66:	bc08      	pop	{r3}
 8001b68:	469e      	mov	lr, r3
 8001b6a:	4770      	bx	lr

08001b6c <_fini>:
 8001b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b6e:	bf00      	nop
 8001b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b72:	bc08      	pop	{r3}
 8001b74:	469e      	mov	lr, r3
 8001b76:	4770      	bx	lr
