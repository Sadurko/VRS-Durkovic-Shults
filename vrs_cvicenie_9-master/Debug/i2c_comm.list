
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003130  08003130  00013130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003178  08003178  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003178  08003178  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003178  08003178  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  080031f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080031f0  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005084  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001427  00000000  00000000  00025124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000528  00000000  00000000  00026550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000470  00000000  00000000  00026a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002813  00000000  00000000  00026ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004f96  00000000  00000000  000296fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071ea8  00000000  00000000  0002e691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a0539  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000173c  00000000  00000000  000a058c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003114 	.word	0x08003114

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003114 	.word	0x08003114

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa93 f3a3 	rbit	r3, r3
 8000b5a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	fab3 f383 	clz	r3, r3
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2103      	movs	r1, #3
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	fa93 f3a3 	rbit	r3, r3
 8000b78:	61bb      	str	r3, [r7, #24]
  return(result);
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	fab3 f383 	clz	r3, r3
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	fa01 f303 	lsl.w	r3, r1, r3
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	601a      	str	r2, [r3, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b085      	sub	sp, #20
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	401a      	ands	r2, r3
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	fb01 f303 	mul.w	r3, r1, r3
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	605a      	str	r2, [r3, #4]
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b089      	sub	sp, #36	; 0x24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	689a      	ldr	r2, [r3, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	fa93 f3a3 	rbit	r3, r3
 8000be4:	613b      	str	r3, [r7, #16]
  return(result);
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	fab3 f383 	clz	r3, r3
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2103      	movs	r1, #3
 8000bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	fa93 f3a3 	rbit	r3, r3
 8000c02:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fab3 f383 	clz	r3, r3
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	431a      	orrs	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000c18:	bf00      	nop
 8000c1a:	3724      	adds	r7, #36	; 0x24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa93 f3a3 	rbit	r3, r3
 8000c3e:	613b      	str	r3, [r7, #16]
  return(result);
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	fab3 f383 	clz	r3, r3
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	2103      	movs	r1, #3
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	401a      	ands	r2, r3
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa93 f3a3 	rbit	r3, r3
 8000c5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	fab3 f383 	clz	r3, r3
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	60da      	str	r2, [r3, #12]
}
 8000c72:	bf00      	nop
 8000c74:	3724      	adds	r7, #36	; 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b089      	sub	sp, #36	; 0x24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	6a1a      	ldr	r2, [r3, #32]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	fa93 f3a3 	rbit	r3, r3
 8000c98:	613b      	str	r3, [r7, #16]
  return(result);
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	fab3 f383 	clz	r3, r3
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	401a      	ands	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	fa93 f3a3 	rbit	r3, r3
 8000cb6:	61bb      	str	r3, [r7, #24]
  return(result);
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	fab3 f383 	clz	r3, r3
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000ccc:	bf00      	nop
 8000cce:	3724      	adds	r7, #36	; 0x24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	0a1b      	lsrs	r3, r3, #8
 8000cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	fa93 f3a3 	rbit	r3, r3
 8000cf4:	613b      	str	r3, [r7, #16]
  return(result);
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	fab3 f383 	clz	r3, r3
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	210f      	movs	r1, #15
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	401a      	ands	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	0a1b      	lsrs	r3, r3, #8
 8000d0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa93 f3a3 	rbit	r3, r3
 8000d14:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	fab3 f383 	clz	r3, r3
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	fa01 f303 	lsl.w	r3, r1, r3
 8000d24:	431a      	orrs	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000d2a:	bf00      	nop
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b088      	sub	sp, #32
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	fa93 f3a3 	rbit	r3, r3
 8000d54:	613b      	str	r3, [r7, #16]
  return(result);
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	fab3 f383 	clz	r3, r3
 8000d5c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000d5e:	e048      	b.n	8000df2 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	2101      	movs	r1, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d03a      	beq.n	8000dec <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	69b9      	ldr	r1, [r7, #24]
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff fede 	bl	8000b40 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d003      	beq.n	8000d94 <LL_GPIO_Init+0x5e>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d106      	bne.n	8000da2 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	69b9      	ldr	r1, [r7, #24]
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff14 	bl	8000bca <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	461a      	mov	r2, r3
 8000da8:	69b9      	ldr	r1, [r7, #24]
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ff3a 	bl	8000c24 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d119      	bne.n	8000dec <LL_GPIO_Init+0xb6>
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	fa93 f3a3 	rbit	r3, r3
 8000dc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8000dc4:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000dc6:	fab3 f383 	clz	r3, r3
 8000dca:	2b07      	cmp	r3, #7
 8000dcc:	d807      	bhi.n	8000dde <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	69b9      	ldr	r1, [r7, #24]
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ff51 	bl	8000c7e <LL_GPIO_SetAFPin_0_7>
 8000ddc:	e006      	b.n	8000dec <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	461a      	mov	r2, r3
 8000de4:	69b9      	ldr	r1, [r7, #24]
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ff76 	bl	8000cd8 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	3301      	adds	r3, #1
 8000df0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1af      	bne.n	8000d60 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d003      	beq.n	8000e10 <LL_GPIO_Init+0xda>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d107      	bne.n	8000e20 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	6819      	ldr	r1, [r3, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff febd 	bl	8000b9a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3720      	adds	r7, #32
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f043 0201 	orr.w	r2, r3, #1
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	601a      	str	r2, [r3, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f023 0201 	bic.w	r2, r3, #1
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	601a      	str	r2, [r3, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b085      	sub	sp, #20
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	0219      	lsls	r1, r3, #8
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	430b      	orrs	r3, r1
 8000e86:	431a      	orrs	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	601a      	str	r2, [r3, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000eac:	f023 0307 	bic.w	r3, r3, #7
 8000eb0:	68b9      	ldr	r1, [r7, #8]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	609a      	str	r2, [r3, #8]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	609a      	str	r2, [r3, #8]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	609a      	str	r2, [r3, #8]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	611a      	str	r2, [r3, #16]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	601a      	str	r2, [r3, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	605a      	str	r2, [r3, #4]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ff65 	bl	8000e4a <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	6899      	ldr	r1, [r3, #8]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff6d 	bl	8000e6a <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	4619      	mov	r1, r3
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ffb6 	bl	8000f08 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff44 	bl	8000e2a <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ffa0 	bl	8000ee8 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	6919      	ldr	r1, [r3, #16]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ff70 	bl	8000e98 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff81 	bl	8000ec8 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ffa9 	bl	8000f24 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ffb6 	bl	8000f4a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4a07      	ldr	r2, [pc, #28]	; (8001018 <LL_InitTick+0x30>)
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <LL_InitTick+0x30>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <LL_InitTick+0x30>)
 8001008:	2205      	movs	r2, #5
 800100a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e010 	.word	0xe000e010

0800101c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001024:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ffdd 	bl	8000fe8 <LL_InitTick>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <LL_mDelay+0x48>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001046:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104e:	d00c      	beq.n	800106a <LL_mDelay+0x32>
  {
    Delay++;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3301      	adds	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001056:	e008      	b.n	800106a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <LL_mDelay+0x48>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d002      	beq.n	800106a <LL_mDelay+0x32>
    {
      Delay--;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	607b      	str	r3, [r7, #4]
  while (Delay)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1f3      	bne.n	8001058 <LL_mDelay+0x20>
    }
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <LL_SetSystemCoreClock+0x1c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000000 	.word	0x20000000

080010a4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010ae:	695a      	ldr	r2, [r3, #20]
 80010b0:	4907      	ldr	r1, [pc, #28]	; (80010d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010ba:	695a      	ldr	r2, [r3, #20]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4013      	ands	r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010c2:	68fb      	ldr	r3, [r7, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	40021000 	.word	0x40021000

080010d4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80010d8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80010dc:	f7ff ffe2 	bl	80010a4 <LL_AHB1_GRP1_EnableClock>

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <NVIC_EnableIRQ+0x30>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	da0b      	bge.n	8001160 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <NVIC_SetPriority+0x4c>)
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	3b04      	subs	r3, #4
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	440b      	add	r3, r1
 800115c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800115e:	e009      	b.n	8001174 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	b2da      	uxtb	r2, r3
 8001164:	4907      	ldr	r1, [pc, #28]	; (8001184 <NVIC_SetPriority+0x50>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	0112      	lsls	r2, r2, #4
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	440b      	add	r3, r1
 8001170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00
 8001184:	e000e100 	.word	0xe000e100

08001188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
         );
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LL_I2C_Enable>:
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f043 0201 	orr.w	r2, r3, #1
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <LL_I2C_EnableClockStretching>:
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	601a      	str	r2, [r3, #0]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_I2C_DisableGeneralCall>:
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	601a      	str	r2, [r3, #0]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <LL_I2C_SetOwnAddress2>:
{
 800124e:	b480      	push	{r7}
 8001250:	b085      	sub	sp, #20
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001262:	f023 0306 	bic.w	r3, r3, #6
 8001266:	68b9      	ldr	r1, [r7, #8]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	430a      	orrs	r2, r1
 800126c:	431a      	orrs	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	60da      	str	r2, [r3, #12]
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <LL_I2C_DisableOwnAddress2>:
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	60da      	str	r2, [r3, #12]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <LL_I2C_EnableIT_RX>:
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f043 0204 	orr.w	r2, r3, #4
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	601a      	str	r2, [r3, #0]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_I2C_DisableIT_RX>:
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 0204 	bic.w	r2, r3, #4
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	601a      	str	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_I2C_IsActiveFlag_TXIS>:
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	bf0c      	ite	eq
 80012f2:	2301      	moveq	r3, #1
 80012f4:	2300      	movne	r3, #0
 80012f6:	b2db      	uxtb	r3, r3
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_I2C_IsActiveFlag_RXNE>:
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b04      	cmp	r3, #4
 8001316:	bf0c      	ite	eq
 8001318:	2301      	moveq	r3, #1
 800131a:	2300      	movne	r3, #0
 800131c:	b2db      	uxtb	r3, r3
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_I2C_IsActiveFlag_STOP>:
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	f003 0320 	and.w	r3, r3, #32
 800133a:	2b20      	cmp	r3, #32
 800133c:	bf0c      	ite	eq
 800133e:	2301      	moveq	r3, #1
 8001340:	2300      	movne	r3, #0
 8001342:	b2db      	uxtb	r3, r3
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_I2C_ClearFlag_STOP>:
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	f043 0220 	orr.w	r2, r3, #32
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	61da      	str	r2, [r3, #28]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_I2C_EnableAutoEndMode>:
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	605a      	str	r2, [r3, #4]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	0d5b      	lsrs	r3, r3, #21
 80013a6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <LL_I2C_HandleTransfer+0x48>)
 80013ac:	430b      	orrs	r3, r1
 80013ae:	43db      	mvns	r3, r3
 80013b0:	401a      	ands	r2, r3
 80013b2:	68b9      	ldr	r1, [r7, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4319      	orrs	r1, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	041b      	lsls	r3, r3, #16
 80013bc:	4319      	orrs	r1, r3
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	4319      	orrs	r1, r3
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	430b      	orrs	r3, r1
 80013c6:	431a      	orrs	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	03ff7bff 	.word	0x03ff7bff

080013dc <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e8:	b2db      	uxtb	r3, r3
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	460b      	mov	r3, r1
 8001400:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001402:	78fa      	ldrb	r2, [r7, #3]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_AHB1_GRP1_EnableClock>:
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800141e:	695a      	ldr	r2, [r3, #20]
 8001420:	4907      	ldr	r1, [pc, #28]	; (8001440 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4313      	orrs	r3, r2
 8001426:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800142a:	695a      	ldr	r2, [r3, #20]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4013      	ands	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	40021000 	.word	0x40021000

08001444 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <LL_APB1_GRP1_EnableClock+0x2c>)
 800144e:	69da      	ldr	r2, [r3, #28]
 8001450:	4907      	ldr	r1, [pc, #28]	; (8001470 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4313      	orrs	r3, r2
 8001456:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <LL_APB1_GRP1_EnableClock+0x2c>)
 800145a:	69da      	ldr	r2, [r3, #28]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4013      	ands	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	40021000 	.word	0x40021000

08001474 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08e      	sub	sp, #56	; 0x38
 8001478:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	615a      	str	r2, [r3, #20]
 800148c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
 800149c:	615a      	str	r2, [r3, #20]
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800149e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80014a2:	f7ff ffb7 	bl	8001414 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80014a6:	23c0      	movs	r3, #192	; 0xc0
 80014a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014aa:	2302      	movs	r3, #2
 80014ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80014b2:	2301      	movs	r3, #1
 80014b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80014ba:	2304      	movs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	4821      	ldr	r0, [pc, #132]	; (8001548 <MX_I2C1_Init+0xd4>)
 80014c4:	f7ff fc37 	bl	8000d36 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80014c8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80014cc:	f7ff ffba 	bl	8001444 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014d0:	f7ff fe08 	bl	80010e4 <NVIC_GetPriorityGrouping>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fe54 	bl	8001188 <NVIC_EncodePriority>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4619      	mov	r1, r3
 80014e4:	201f      	movs	r0, #31
 80014e6:	f7ff fe25 	bl	8001134 <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014ea:	201f      	movs	r0, #31
 80014ec:	f7ff fe08 	bl	8001100 <NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80014f0:	4816      	ldr	r0, [pc, #88]	; (800154c <MX_I2C1_Init+0xd8>)
 80014f2:	f7ff ff3d 	bl	8001370 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80014f6:	4815      	ldr	r0, [pc, #84]	; (800154c <MX_I2C1_Init+0xd8>)
 80014f8:	f7ff fec1 	bl	800127e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80014fc:	4813      	ldr	r0, [pc, #76]	; (800154c <MX_I2C1_Init+0xd8>)
 80014fe:	f7ff fe96 	bl	800122e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001502:	4812      	ldr	r0, [pc, #72]	; (800154c <MX_I2C1_Init+0xd8>)
 8001504:	f7ff fe83 	bl	800120e <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <MX_I2C1_Init+0xdc>)
 800150e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001518:	2302      	movs	r3, #2
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800151c:	2300      	movs	r3, #0
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001520:	2300      	movs	r3, #0
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	4619      	mov	r1, r3
 800152a:	4808      	ldr	r0, [pc, #32]	; (800154c <MX_I2C1_Init+0xd8>)
 800152c:	f7ff fd20 	bl	8000f70 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001530:	2200      	movs	r2, #0
 8001532:	2100      	movs	r1, #0
 8001534:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_I2C1_Init+0xd8>)
 8001536:	f7ff fe8a 	bl	800124e <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 800153a:	4804      	ldr	r0, [pc, #16]	; (800154c <MX_I2C1_Init+0xd8>)
 800153c:	f7ff fe57 	bl	80011ee <LL_I2C_Enable>
}
 8001540:	bf00      	nop
 8001542:	3738      	adds	r7, #56	; 0x38
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	48000400 	.word	0x48000400
 800154c:	40005400 	.word	0x40005400
 8001550:	2000090e 	.word	0x2000090e

08001554 <i2c_master_write>:


void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b085      	sub	sp, #20
 8001558:	af02      	add	r7, sp, #8
 800155a:	4604      	mov	r4, r0
 800155c:	4608      	mov	r0, r1
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	4623      	mov	r3, r4
 8001564:	71fb      	strb	r3, [r7, #7]
 8001566:	4603      	mov	r3, r0
 8001568:	71bb      	strb	r3, [r7, #6]
 800156a:	460b      	mov	r3, r1
 800156c:	717b      	strb	r3, [r7, #5]
 800156e:	4613      	mov	r3, r2
 8001570:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8001572:	793b      	ldrb	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8001578:	79bb      	ldrb	r3, [r7, #6]
 800157a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800157e:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001580:	7979      	ldrb	r1, [r7, #5]
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <i2c_master_write+0x80>)
 8001584:	9301      	str	r3, [sp, #4]
 8001586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2302      	movs	r3, #2
 800158e:	2200      	movs	r2, #0
 8001590:	4811      	ldr	r0, [pc, #68]	; (80015d8 <i2c_master_write+0x84>)
 8001592:	f7ff fefd 	bl	8001390 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8001596:	79bb      	ldrb	r3, [r7, #6]
 8001598:	4619      	mov	r1, r3
 800159a:	480f      	ldr	r0, [pc, #60]	; (80015d8 <i2c_master_write+0x84>)
 800159c:	f7ff ff2b 	bl	80013f6 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80015a0:	e00a      	b.n	80015b8 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80015a2:	480d      	ldr	r0, [pc, #52]	; (80015d8 <i2c_master_write+0x84>)
 80015a4:	f7ff fe9b 	bl	80012de <LL_I2C_IsActiveFlag_TXIS>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d004      	beq.n	80015b8 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	4619      	mov	r1, r3
 80015b2:	4809      	ldr	r0, [pc, #36]	; (80015d8 <i2c_master_write+0x84>)
 80015b4:	f7ff ff1f 	bl	80013f6 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80015b8:	4807      	ldr	r0, [pc, #28]	; (80015d8 <i2c_master_write+0x84>)
 80015ba:	f7ff feb6 	bl	800132a <LL_I2C_IsActiveFlag_STOP>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0ee      	beq.n	80015a2 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <i2c_master_write+0x84>)
 80015c6:	f7ff fec3 	bl	8001350 <LL_I2C_ClearFlag_STOP>
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd90      	pop	{r4, r7, pc}
 80015d2:	bf00      	nop
 80015d4:	80002000 	.word	0x80002000
 80015d8:	40005400 	.word	0x40005400

080015dc <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	4608      	mov	r0, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	70fb      	strb	r3, [r7, #3]
 80015ee:	460b      	mov	r3, r1
 80015f0:	70bb      	strb	r3, [r7, #2]
 80015f2:	4613      	mov	r3, r2
 80015f4:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 80015f6:	4a30      	ldr	r2, [pc, #192]	; (80016b8 <i2c_master_read+0xdc>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6013      	str	r3, [r2, #0]

	if(read_flag)
 80015fc:	7c3b      	ldrb	r3, [r7, #16]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001602:	78bb      	ldrb	r3, [r7, #2]
 8001604:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001608:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 800160a:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <i2c_master_read+0xe0>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001610:	482b      	ldr	r0, [pc, #172]	; (80016c0 <i2c_master_read+0xe4>)
 8001612:	f7ff fe44 	bl	800129e <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001616:	7879      	ldrb	r1, [r7, #1]
 8001618:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <i2c_master_read+0xe8>)
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2301      	movs	r3, #1
 8001624:	2200      	movs	r2, #0
 8001626:	4826      	ldr	r0, [pc, #152]	; (80016c0 <i2c_master_read+0xe4>)
 8001628:	f7ff feb2 	bl	8001390 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800162c:	e00a      	b.n	8001644 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800162e:	4824      	ldr	r0, [pc, #144]	; (80016c0 <i2c_master_read+0xe4>)
 8001630:	f7ff fe55 	bl	80012de <LL_I2C_IsActiveFlag_TXIS>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d004      	beq.n	8001644 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 800163a:	78bb      	ldrb	r3, [r7, #2]
 800163c:	4619      	mov	r1, r3
 800163e:	4820      	ldr	r0, [pc, #128]	; (80016c0 <i2c_master_read+0xe4>)
 8001640:	f7ff fed9 	bl	80013f6 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001644:	481e      	ldr	r0, [pc, #120]	; (80016c0 <i2c_master_read+0xe4>)
 8001646:	f7ff fe70 	bl	800132a <LL_I2C_IsActiveFlag_STOP>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0ee      	beq.n	800162e <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001650:	481b      	ldr	r0, [pc, #108]	; (80016c0 <i2c_master_read+0xe4>)
 8001652:	f7ff fe7d 	bl	8001350 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001656:	bf00      	nop
 8001658:	4819      	ldr	r0, [pc, #100]	; (80016c0 <i2c_master_read+0xe4>)
 800165a:	f7ff fe66 	bl	800132a <LL_I2C_IsActiveFlag_STOP>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f9      	bne.n	8001658 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001664:	7879      	ldrb	r1, [r7, #1]
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <i2c_master_read+0xec>)
 800166a:	9201      	str	r2, [sp, #4]
 800166c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001670:	9200      	str	r2, [sp, #0]
 8001672:	2200      	movs	r2, #0
 8001674:	4812      	ldr	r0, [pc, #72]	; (80016c0 <i2c_master_read+0xe4>)
 8001676:	f7ff fe8b 	bl	8001390 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800167a:	bf00      	nop
 800167c:	4810      	ldr	r0, [pc, #64]	; (80016c0 <i2c_master_read+0xe4>)
 800167e:	f7ff fe54 	bl	800132a <LL_I2C_IsActiveFlag_STOP>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f9      	beq.n	800167c <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8001688:	480d      	ldr	r0, [pc, #52]	; (80016c0 <i2c_master_read+0xe4>)
 800168a:	f7ff fe61 	bl	8001350 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 800168e:	480c      	ldr	r0, [pc, #48]	; (80016c0 <i2c_master_read+0xe4>)
 8001690:	f7ff fe15 	bl	80012be <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <i2c_master_read+0xe4>)
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <i2c_master_read+0xe4>)
 800169a:	f043 0310 	orr.w	r3, r3, #16
 800169e:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <i2c_master_read+0xf0>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <i2c_master_read+0xe0>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 80016ac:	4b02      	ldr	r3, [pc, #8]	; (80016b8 <i2c_master_read+0xdc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000090 	.word	0x20000090
 80016bc:	2000008c 	.word	0x2000008c
 80016c0:	40005400 	.word	0x40005400
 80016c4:	80002000 	.word	0x80002000
 80016c8:	80002400 	.word	0x80002400
 80016cc:	2000008d 	.word	0x2000008d

080016d0 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80016d0:	b598      	push	{r3, r4, r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80016d4:	4812      	ldr	r0, [pc, #72]	; (8001720 <I2C1_EV_IRQHandler+0x50>)
 80016d6:	f7ff fe15 	bl	8001304 <LL_I2C_IsActiveFlag_RXNE>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d01c      	beq.n	800171a <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 80016e0:	4b10      	ldr	r3, [pc, #64]	; (8001724 <I2C1_EV_IRQHandler+0x54>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <I2C1_EV_IRQHandler+0x58>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	1c59      	adds	r1, r3, #1
 80016ec:	b2c8      	uxtb	r0, r1
 80016ee:	490e      	ldr	r1, [pc, #56]	; (8001728 <I2C1_EV_IRQHandler+0x58>)
 80016f0:	7008      	strb	r0, [r1, #0]
 80016f2:	18d4      	adds	r4, r2, r3
 80016f4:	480a      	ldr	r0, [pc, #40]	; (8001720 <I2C1_EV_IRQHandler+0x50>)
 80016f6:	f7ff fe71 	bl	80013dc <LL_I2C_ReceiveData8>
 80016fa:	4603      	mov	r3, r0
 80016fc:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <I2C1_EV_IRQHandler+0x58>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b13      	cmp	r3, #19
 8001706:	d903      	bls.n	8001710 <I2C1_EV_IRQHandler+0x40>
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <I2C1_EV_IRQHandler+0x58>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
 800170e:	e001      	b.n	8001714 <I2C1_EV_IRQHandler+0x44>
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <I2C1_EV_IRQHandler+0x58>)
 8001712:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <I2C1_EV_IRQHandler+0x5c>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
	}
}
 800171a:	bf00      	nop
 800171c:	bd98      	pop	{r3, r4, r7, pc}
 800171e:	bf00      	nop
 8001720:	40005400 	.word	0x40005400
 8001724:	20000090 	.word	0x20000090
 8001728:	2000008d 	.word	0x2000008d
 800172c:	2000008c 	.word	0x2000008c

08001730 <NVIC_SetPriorityGrouping>:
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <NVIC_SetPriorityGrouping+0x44>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800175c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <NVIC_SetPriorityGrouping+0x44>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <LL_RCC_HSI_Enable+0x1c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <LL_RCC_HSI_Enable+0x1c>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000

08001798 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <LL_RCC_HSI_IsReady+0x20>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	bf0c      	ite	eq
 80017a8:	2301      	moveq	r3, #1
 80017aa:	2300      	movne	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	40021000 	.word	0x40021000

080017bc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4904      	ldr	r1, [pc, #16]	; (80017e4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000

080017e8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <LL_RCC_SetSysClkSource+0x24>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f023 0203 	bic.w	r2, r3, #3
 80017f8:	4904      	ldr	r1, [pc, #16]	; (800180c <LL_RCC_SetSysClkSource+0x24>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40021000 	.word	0x40021000

08001810 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <LL_RCC_GetSysClkSource+0x18>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 030c 	and.w	r3, r3, #12
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000

0800182c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <LL_RCC_SetAHBPrescaler+0x24>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183c:	4904      	ldr	r1, [pc, #16]	; (8001850 <LL_RCC_SetAHBPrescaler+0x24>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	40021000 	.word	0x40021000

08001854 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <LL_RCC_SetAPB1Prescaler+0x24>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001864:	4904      	ldr	r1, [pc, #16]	; (8001878 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	40021000 	.word	0x40021000

0800187c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800188c:	4904      	ldr	r1, [pc, #16]	; (80018a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	40021000 	.word	0x40021000

080018a4 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <LL_RCC_SetI2CClockSource+0x2c>)
 80018ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	0e1b      	lsrs	r3, r3, #24
 80018b4:	43db      	mvns	r3, r3
 80018b6:	401a      	ands	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80018be:	4904      	ldr	r1, [pc, #16]	; (80018d0 <LL_RCC_SetI2CClockSource+0x2c>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	630b      	str	r3, [r1, #48]	; 0x30
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	40021000 	.word	0x40021000

080018d4 <LL_APB1_GRP1_EnableClock>:
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018de:	69da      	ldr	r2, [r3, #28]
 80018e0:	4907      	ldr	r1, [pc, #28]	; (8001900 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018ea:	69da      	ldr	r2, [r3, #28]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4013      	ands	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40021000 	.word	0x40021000

08001904 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <LL_APB2_GRP1_EnableClock+0x2c>)
 800190e:	699a      	ldr	r2, [r3, #24]
 8001910:	4907      	ldr	r1, [pc, #28]	; (8001930 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4313      	orrs	r3, r2
 8001916:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <LL_APB2_GRP1_EnableClock+0x2c>)
 800191a:	699a      	ldr	r2, [r3, #24]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4013      	ands	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001922:	68fb      	ldr	r3, [r7, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40021000 	.word	0x40021000

08001934 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <LL_FLASH_SetLatency+0x24>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f023 0207 	bic.w	r2, r3, #7
 8001944:	4904      	ldr	r1, [pc, #16]	; (8001958 <LL_FLASH_SetLatency+0x24>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4313      	orrs	r3, r2
 800194a:	600b      	str	r3, [r1, #0]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	40022000 	.word	0x40022000

0800195c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <LL_FLASH_GetLatency+0x18>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40022000 	.word	0x40022000

08001978 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b04      	cmp	r3, #4
 8001984:	d106      	bne.n	8001994 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <LL_SYSTICK_SetClkSource+0x34>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <LL_SYSTICK_SetClkSource+0x34>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001992:	e005      	b.n	80019a0 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <LL_SYSTICK_SetClkSource+0x34>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a04      	ldr	r2, [pc, #16]	; (80019ac <LL_SYSTICK_SetClkSource+0x34>)
 800199a:	f023 0304 	bic.w	r3, r3, #4
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000e010 	.word	0xe000e010

080019b0 <main>:

void SystemClock_Config(void);


int main(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80019b6:	2001      	movs	r0, #1
 80019b8:	f7ff ffa4 	bl	8001904 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80019bc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80019c0:	f7ff ff88 	bl	80018d4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f7ff feb3 	bl	8001730 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 80019ca:	f000 f833 	bl	8001a34 <SystemClock_Config>

  MX_GPIO_Init();
 80019ce:	f7ff fb81 	bl	80010d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80019d2:	f7ff fd4f 	bl	8001474 <MX_I2C1_Init>

  lsm6ds0_init();
 80019d6:	f000 f9bb 	bl	8001d50 <lsm6ds0_init>
  lsm6ds0_init();
 80019da:	f000 f9b9 	bl	8001d50 <lsm6ds0_init>
  hts221_init();
 80019de:	f000 fa49 	bl	8001e74 <hts221_init>
  float temp, pre, alt,hum;
  while (1)
  {
	  //os			   x      y        z
	  lsm6ds0_get_acc(acc, (acc+1), (acc+2));
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <main+0x78>)
 80019e4:	4a11      	ldr	r2, [pc, #68]	; (8001a2c <main+0x7c>)
 80019e6:	4619      	mov	r1, r3
 80019e8:	4811      	ldr	r0, [pc, #68]	; (8001a30 <main+0x80>)
 80019ea:	f000 f94f 	bl	8001c8c <lsm6ds0_get_acc>
	  temp = lps25hb_get_temp(acc, (acc+1), (acc+2));
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <main+0x78>)
 80019f0:	4a0e      	ldr	r2, [pc, #56]	; (8001a2c <main+0x7c>)
 80019f2:	4619      	mov	r1, r3
 80019f4:	480e      	ldr	r0, [pc, #56]	; (8001a30 <main+0x80>)
 80019f6:	f000 fa77 	bl	8001ee8 <lps25hb_get_temp>
 80019fa:	ed87 0a03 	vstr	s0, [r7, #12]
	  pre = lps25hb_get_press();
 80019fe:	f000 faad 	bl	8001f5c <lps25hb_get_press>
 8001a02:	ed87 0a02 	vstr	s0, [r7, #8]
	  alt = lps25hb_get_alt();
 8001a06:	f000 faef 	bl	8001fe8 <lps25hb_get_alt>
 8001a0a:	ed87 0a01 	vstr	s0, [r7, #4]
	  hum = hts221_get_hum();
 8001a0e:	f000 fa19 	bl	8001e44 <hts221_get_hum>
 8001a12:	ee07 0a90 	vmov	s15, r0
 8001a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1a:	edc7 7a00 	vstr	s15, [r7]
	  LL_mDelay(50);
 8001a1e:	2032      	movs	r0, #50	; 0x32
 8001a20:	f7ff fb0a 	bl	8001038 <LL_mDelay>
  {
 8001a24:	e7dd      	b.n	80019e2 <main+0x32>
 8001a26:	bf00      	nop
 8001a28:	20000098 	.word	0x20000098
 8001a2c:	2000009c 	.word	0x2000009c
 8001a30:	20000094 	.word	0x20000094

08001a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f7ff ff7b 	bl	8001934 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001a3e:	f7ff ff8d 	bl	800195c <LL_FLASH_GetLatency>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8001a48:	f000 f82e 	bl	8001aa8 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001a4c:	f7ff fe94 	bl	8001778 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001a50:	bf00      	nop
 8001a52:	f7ff fea1 	bl	8001798 <LL_RCC_HSI_IsReady>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d1fa      	bne.n	8001a52 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001a5c:	2010      	movs	r0, #16
 8001a5e:	f7ff fead 	bl	80017bc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7ff fee2 	bl	800182c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff fef3 	bl	8001854 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f7ff ff04 	bl	800187c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7ff feb7 	bl	80017e8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001a7a:	bf00      	nop
 8001a7c:	f7ff fec8 	bl	8001810 <LL_RCC_GetSysClkSource>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1fa      	bne.n	8001a7c <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8001a86:	4807      	ldr	r0, [pc, #28]	; (8001aa4 <SystemClock_Config+0x70>)
 8001a88:	f7ff fac8 	bl	800101c <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001a8c:	2004      	movs	r0, #4
 8001a8e:	f7ff ff73 	bl	8001978 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8001a92:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <SystemClock_Config+0x70>)
 8001a94:	f7ff faf6 	bl	8001084 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001a98:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001a9c:	f7ff ff02 	bl	80018a4 <LL_RCC_SetI2CClockSource>
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	007a1200 	.word	0x007a1200

08001aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <HardFault_Handler+0x4>

08001aca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <MemManage_Handler+0x4>

08001ad0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <BusFault_Handler+0x4>

08001ad6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <UsageFault_Handler+0x4>

08001adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <SystemInit+0x84>)
 8001b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <SystemInit+0x84>)
 8001b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <SystemInit+0x88>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a1b      	ldr	r2, [pc, #108]	; (8001b9c <SystemInit+0x88>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <SystemInit+0x88>)
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4918      	ldr	r1, [pc, #96]	; (8001b9c <SystemInit+0x88>)
 8001b3a:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <SystemInit+0x8c>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <SystemInit+0x88>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a15      	ldr	r2, [pc, #84]	; (8001b9c <SystemInit+0x88>)
 8001b46:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <SystemInit+0x88>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a11      	ldr	r2, [pc, #68]	; (8001b9c <SystemInit+0x88>)
 8001b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <SystemInit+0x88>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <SystemInit+0x88>)
 8001b62:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b66:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <SystemInit+0x88>)
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <SystemInit+0x88>)
 8001b6e:	f023 030f 	bic.w	r3, r3, #15
 8001b72:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <SystemInit+0x88>)
 8001b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b78:	4908      	ldr	r1, [pc, #32]	; (8001b9c <SystemInit+0x88>)
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <SystemInit+0x90>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <SystemInit+0x88>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <SystemInit+0x84>)
 8001b88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b8c:	609a      	str	r2, [r3, #8]
#endif
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000ed00 	.word	0xe000ed00
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	f87fc00c 	.word	0xf87fc00c
 8001ba4:	ff00fccc 	.word	0xff00fccc

08001ba8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bae:	e003      	b.n	8001bb8 <LoopCopyDataInit>

08001bb0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bb2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bb4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bb6:	3104      	adds	r1, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bb8:	480b      	ldr	r0, [pc, #44]	; (8001be8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bbc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bbe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bc0:	d3f6      	bcc.n	8001bb0 <CopyDataInit>
	ldr	r2, =_sbss
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bc4:	e002      	b.n	8001bcc <LoopFillZerobss>

08001bc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bc6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bc8:	f842 3b04 	str.w	r3, [r2], #4

08001bcc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <LoopForever+0x16>)
	cmp	r2, r3
 8001bce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bd0:	d3f9      	bcc.n	8001bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bd2:	f7ff ff9f 	bl	8001b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd6:	f000 fa9d 	bl	8002114 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bda:	f7ff fee9 	bl	80019b0 <main>

08001bde <LoopForever>:

LoopForever:
    b LoopForever
 8001bde:	e7fe      	b.n	8001bde <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001be0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001be4:	08003180 	.word	0x08003180
	ldr	r0, =_sdata
 8001be8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bec:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001bf0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001bf4:	200000ac 	.word	0x200000ac

08001bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bf8:	e7fe      	b.n	8001bf8 <ADC1_2_IRQHandler>
	...

08001bfc <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <lsm6ds0_read_byte+0x30>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	79fa      	ldrb	r2, [r7, #7]
 8001c10:	f107 000f 	add.w	r0, r7, #15
 8001c14:	2100      	movs	r1, #0
 8001c16:	9100      	str	r1, [sp, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	f7ff fcdf 	bl	80015dc <i2c_master_read>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	781b      	ldrb	r3, [r3, #0]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000004 	.word	0x20000004

08001c30 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	460a      	mov	r2, r1
 8001c3a:	71fb      	strb	r3, [r7, #7]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <lsm6ds0_write_byte+0x28>)
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	79f9      	ldrb	r1, [r7, #7]
 8001c46:	79b8      	ldrb	r0, [r7, #6]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f7ff fc83 	bl	8001554 <i2c_master_write>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000004 	.word	0x20000004

08001c5c <lsm6ds0_readArray>:


void lsm6ds0_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	70fb      	strb	r3, [r7, #3]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres, 1);
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <lsm6ds0_readArray+0x2c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	78b9      	ldrb	r1, [r7, #2]
 8001c74:	2001      	movs	r0, #1
 8001c76:	9000      	str	r0, [sp, #0]
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fcaf 	bl	80015dc <i2c_master_read>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000004 	.word	0x20000004

08001c8c <lsm6ds0_get_acc>:
	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}


void lsm6ds0_get_acc(float* x, float* y, float* z)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
	int16_t xx, yy, zz;

	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lsm6ds0_read_byte(LSM6DS0_ADDRESS_CTRL1);
 8001c98:	2010      	movs	r0, #16
 8001c9a:	f7ff ffaf 	bl	8001bfc <lsm6ds0_read_byte>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	77fb      	strb	r3, [r7, #31]

	temp = temp >> 2;
 8001ca2:	7ffb      	ldrb	r3, [r7, #31]
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	77fb      	strb	r3, [r7, #31]
    temp &= 0x03;			//full scale bits exctracted
 8001ca8:	7ffb      	ldrb	r3, [r7, #31]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	77fb      	strb	r3, [r7, #31]

	lsm6ds0_readArray(data, LSM6DS0_ADDRESS_ACCX, 6);
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	2206      	movs	r2, #6
 8001cb6:	2128      	movs	r1, #40	; 0x28
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ffcf 	bl	8001c5c <lsm6ds0_readArray>

	xx = ((uint16_t)data[1]) << 8 | data[0];
 8001cbe:	7c7b      	ldrb	r3, [r7, #17]
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	7c3b      	ldrb	r3, [r7, #16]
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	83bb      	strh	r3, [r7, #28]
	yy = ((uint16_t)data[3]) << 8 | data[2];
 8001ccc:	7cfb      	ldrb	r3, [r7, #19]
 8001cce:	021b      	lsls	r3, r3, #8
 8001cd0:	b21a      	sxth	r2, r3
 8001cd2:	7cbb      	ldrb	r3, [r7, #18]
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	837b      	strh	r3, [r7, #26]
	zz = ((uint16_t)data[5]) << 8 | data[4];
 8001cda:	7d7b      	ldrb	r3, [r7, #21]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	b21a      	sxth	r2, r3
 8001ce0:	7d3b      	ldrb	r3, [r7, #20]
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	833b      	strh	r3, [r7, #24]

	*x = (xx >> 4) / 1000.0f;
 8001ce8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cec:	111b      	asrs	r3, r3, #4
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	ee07 3a90 	vmov	s15, r3
 8001cf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cf8:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001d4c <lsm6ds0_get_acc+0xc0>
 8001cfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	edc3 7a00 	vstr	s15, [r3]
	*y = (yy >> 4) / 1000.0f;
 8001d06:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d0a:	111b      	asrs	r3, r3, #4
 8001d0c:	b21b      	sxth	r3, r3
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d16:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001d4c <lsm6ds0_get_acc+0xc0>
 8001d1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	edc3 7a00 	vstr	s15, [r3]
	*z = (zz >> 4) / 1000.0f;
 8001d24:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001d28:	111b      	asrs	r3, r3, #4
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	ee07 3a90 	vmov	s15, r3
 8001d30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d34:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001d4c <lsm6ds0_get_acc+0xc0>
 8001d38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	edc3 7a00 	vstr	s15, [r3]
}
 8001d42:	bf00      	nop
 8001d44:	3720      	adds	r7, #32
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	447a0000 	.word	0x447a0000

08001d50 <lsm6ds0_init>:


uint8_t lsm6ds0_init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8001d56:	2301      	movs	r3, #1
 8001d58:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8001d5a:	2064      	movs	r0, #100	; 0x64
 8001d5c:	f7ff f96c 	bl	8001038 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8001d60:	200f      	movs	r0, #15
 8001d62:	f7ff ff4b 	bl	8001bfc <lsm6ds0_read_byte>
 8001d66:	4603      	mov	r3, r0
 8001d68:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 8001d6a:	79bb      	ldrb	r3, [r7, #6]
 8001d6c:	2b68      	cmp	r3, #104	; 0x68
 8001d6e:	d102      	bne.n	8001d76 <lsm6ds0_init+0x26>
	{
		status = 1;
 8001d70:	2301      	movs	r3, #1
 8001d72:	71fb      	strb	r3, [r7, #7]
 8001d74:	e00f      	b.n	8001d96 <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <lsm6ds0_init+0x60>)
 8001d78:	22d6      	movs	r2, #214	; 0xd6
 8001d7a:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8001d7c:	200f      	movs	r0, #15
 8001d7e:	f7ff ff3d 	bl	8001bfc <lsm6ds0_read_byte>
 8001d82:	4603      	mov	r3, r0
 8001d84:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8001d86:	79bb      	ldrb	r3, [r7, #6]
 8001d88:	2b68      	cmp	r3, #104	; 0x68
 8001d8a:	d102      	bne.n	8001d92 <lsm6ds0_init+0x42>
		{
			status = 1;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	e001      	b.n	8001d96 <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8001d9a:	797b      	ldrb	r3, [r7, #5]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	2010      	movs	r0, #16
 8001da0:	f7ff ff46 	bl	8001c30 <lsm6ds0_write_byte>

	return status;
 8001da4:	79fb      	ldrb	r3, [r7, #7]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000004 	.word	0x20000004

08001db4 <hts221_read_byte>:
#include "math.h"

uint8_t HTSaddres = HTS221_DEVICE_ADDRESS;

uint8_t hts221_read_byte(uint8_t reg_addr)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, HTSaddres, 0));
 8001dc2:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <hts221_read_byte+0x30>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	79fa      	ldrb	r2, [r7, #7]
 8001dc8:	f107 000f 	add.w	r0, r7, #15
 8001dcc:	2100      	movs	r1, #0
 8001dce:	9100      	str	r1, [sp, #0]
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	f7ff fc03 	bl	80015dc <i2c_master_read>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	781b      	ldrb	r3, [r3, #0]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000005 	.word	0x20000005

08001de8 <hts221_write_byte>:


void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	460a      	mov	r2, r1
 8001df2:	71fb      	strb	r3, [r7, #7]
 8001df4:	4613      	mov	r3, r2
 8001df6:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, HTSaddres, 0);
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <hts221_write_byte+0x28>)
 8001dfa:	781a      	ldrb	r2, [r3, #0]
 8001dfc:	79f9      	ldrb	r1, [r7, #7]
 8001dfe:	79b8      	ldrb	r0, [r7, #6]
 8001e00:	2300      	movs	r3, #0
 8001e02:	f7ff fba7 	bl	8001554 <i2c_master_write>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000005 	.word	0x20000005

08001e14 <hts221_readArray>:


void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
 8001e20:	4613      	mov	r3, r2
 8001e22:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, HTSaddres, 0);
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <hts221_readArray+0x2c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	78fa      	ldrb	r2, [r7, #3]
 8001e2a:	78b9      	ldrb	r1, [r7, #2]
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	9000      	str	r0, [sp, #0]
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff fbd3 	bl	80015dc <i2c_master_read>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000005 	.word	0x20000005

08001e44 <hts221_get_hum>:



uint8_t hts221_get_hum()
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
	uint8_t temp[2];
	hts221_readArray(temp, HTS221_ADDRESS_HUM_L, 2);
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	2128      	movs	r1, #40	; 0x28
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ffdf 	bl	8001e14 <hts221_readArray>

	return (((uint16_t)((temp[1] << 8) | temp[0])) >> 3);
 8001e56:	797b      	ldrb	r3, [r7, #5]
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	b21a      	sxth	r2, r3
 8001e5c:	793b      	ldrb	r3, [r7, #4]
 8001e5e:	b21b      	sxth	r3, r3
 8001e60:	4313      	orrs	r3, r2
 8001e62:	b21b      	sxth	r3, r3
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	08db      	lsrs	r3, r3, #3
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <hts221_init>:



uint8_t hts221_init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0



uint8_t status = 1;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	71fb      	strb	r3, [r7, #7]

//LIS3MDL_ACC_ON;



LL_mDelay(100);
 8001e7e:	2064      	movs	r0, #100	; 0x64
 8001e80:	f7ff f8da 	bl	8001038 <LL_mDelay>



uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 8001e84:	200f      	movs	r0, #15
 8001e86:	f7ff ff95 	bl	8001db4 <hts221_read_byte>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71bb      	strb	r3, [r7, #6]



if(val == HTS221_WHO_AM_I_VALUE)
 8001e8e:	79bb      	ldrb	r3, [r7, #6]
 8001e90:	2bbc      	cmp	r3, #188	; 0xbc
 8001e92:	d102      	bne.n	8001e9a <hts221_init+0x26>
{
status = 1;
 8001e94:	2301      	movs	r3, #1
 8001e96:	71fb      	strb	r3, [r7, #7]
 8001e98:	e001      	b.n	8001e9e <hts221_init+0x2a>
}
else //if the device is not found on one address, try another one
{
status = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	71fb      	strb	r3, [r7, #7]

//acc device init



uint8_t ctrl1 = 8 << 4; // +-2g res
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	717b      	strb	r3, [r7, #5]
hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 8001ea2:	797b      	ldrb	r3, [r7, #5]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	2020      	movs	r0, #32
 8001ea8:	f7ff ff9e 	bl	8001de8 <hts221_write_byte>



return status;
 8001eac:	79fb      	ldrb	r3, [r7, #7]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <lps25hb_readArray>:
	i2c_master_write(value, reg_addr, LPSaddres, 0);
}


void lps25hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af02      	add	r7, sp, #8
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	70fb      	strb	r3, [r7, #3]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, LPSaddres, 1);
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <lps25hb_readArray+0x2c>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	78b9      	ldrb	r1, [r7, #2]
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	9000      	str	r0, [sp, #0]
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff fb81 	bl	80015dc <i2c_master_read>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000006 	.word	0x20000006

08001ee8 <lps25hb_get_temp>:


float lps25hb_get_temp()
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
uint8_t temp[2];
lps25hb_readArray(temp, LPS25HB_ADDRESS_TEMP_L, 2);
 8001eee:	463b      	mov	r3, r7
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	212b      	movs	r1, #43	; 0x2b
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ffdf 	bl	8001eb8 <lps25hb_readArray>
float result = (((uint16_t)((temp[1] << 8) | temp[0])) >> 4) / 1000.0f + 25;
 8001efa:	787b      	ldrb	r3, [r7, #1]
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	b21a      	sxth	r2, r3
 8001f00:	783b      	ldrb	r3, [r7, #0]
 8001f02:	b21b      	sxth	r3, r3
 8001f04:	4313      	orrs	r3, r2
 8001f06:	b21b      	sxth	r3, r3
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	091b      	lsrs	r3, r3, #4
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f16:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001f58 <lps25hb_get_temp+0x70>
 8001f1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f1e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001f22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f26:	edc7 7a01 	vstr	s15, [r7, #4]
return roundf(result * 10) / 10;
 8001f2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f2e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f36:	eeb0 0a67 	vmov.f32	s0, s15
 8001f3a:	f000 f90f 	bl	800215c <roundf>
 8001f3e:	eef0 7a40 	vmov.f32	s15, s0
 8001f42:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f46:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f4a:	eef0 7a66 	vmov.f32	s15, s13
}
 8001f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	447a0000 	.word	0x447a0000

08001f5c <lps25hb_get_press>:


float lps25hb_get_press()
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
uint8_t temp[3];
int32_t result = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
float output = 0;
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
lps25hb_readArray(temp, LPS25HB_ADDRESS_PRESS_L, 3);
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	2203      	movs	r2, #3
 8001f70:	2129      	movs	r1, #41	; 0x29
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ffa0 	bl	8001eb8 <lps25hb_readArray>

result = result | ((uint32_t)(temp[0]));
 8001f78:	793b      	ldrb	r3, [r7, #4]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
result = result | ((uint32_t)(temp[1] << 8));
 8001f82:	797b      	ldrb	r3, [r7, #5]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
result = result | ((uint32_t)(temp[2] << 16));
 8001f8e:	79bb      	ldrb	r3, [r7, #6]
 8001f90:	041b      	lsls	r3, r3, #16
 8001f92:	461a      	mov	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

output = result / 4096.0f;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	ee07 3a90 	vmov	s15, r3
 8001fa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001fe0 <lps25hb_get_press+0x84>
 8001fa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fac:	edc7 7a02 	vstr	s15, [r7, #8]

return roundf(output * 100)/100;
 8001fb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fb4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001fe4 <lps25hb_get_press+0x88>
 8001fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc0:	f000 f8cc 	bl	800215c <roundf>
 8001fc4:	eef0 7a40 	vmov.f32	s15, s0
 8001fc8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001fe4 <lps25hb_get_press+0x88>
 8001fcc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fd0:	eef0 7a66 	vmov.f32	s15, s13
}
 8001fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	45800000 	.word	0x45800000
 8001fe4:	42c80000 	.word	0x42c80000

08001fe8 <lps25hb_get_alt>:


float lps25hb_get_alt()
{
 8001fe8:	b5b0      	push	{r4, r5, r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
	uint8_t temp[2];
	lps25hb_readArray(temp, LPS25HB_ADDRESS_PRESS_L, 2);
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	2129      	movs	r1, #41	; 0x29
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff5f 	bl	8001eb8 <lps25hb_readArray>

	float P0 = 1013.25f;
 8001ffa:	4b3f      	ldr	r3, [pc, #252]	; (80020f8 <lps25hb_get_alt+0x110>)
 8001ffc:	617b      	str	r3, [r7, #20]
	float P = (((uint16_t)((temp[1] << 8) | temp[0])) >> 4) / 4096.0f;
 8001ffe:	797b      	ldrb	r3, [r7, #5]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	b21a      	sxth	r2, r3
 8002004:	793b      	ldrb	r3, [r7, #4]
 8002006:	b21b      	sxth	r3, r3
 8002008:	4313      	orrs	r3, r2
 800200a:	b21b      	sxth	r3, r3
 800200c:	b29b      	uxth	r3, r3
 800200e:	091b      	lsrs	r3, r3, #4
 8002010:	b29b      	uxth	r3, r3
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800201a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80020fc <lps25hb_get_alt+0x114>
 800201e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002022:	edc7 7a04 	vstr	s15, [r7, #16]
	float T = (((uint16_t)((temp[1] << 8) | temp[0])) >> 4) / 1000.0f + 25;
 8002026:	797b      	ldrb	r3, [r7, #5]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	b21a      	sxth	r2, r3
 800202c:	793b      	ldrb	r3, [r7, #4]
 800202e:	b21b      	sxth	r3, r3
 8002030:	4313      	orrs	r3, r2
 8002032:	b21b      	sxth	r3, r3
 8002034:	b29b      	uxth	r3, r3
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	b29b      	uxth	r3, r3
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002042:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002100 <lps25hb_get_alt+0x118>
 8002046:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800204a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800204e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002052:	edc7 7a03 	vstr	s15, [r7, #12]
	float result = ((pow((P0/P), 0.190223) - 1) * (T + 273.15))/0.0065 ;
 8002056:	ed97 7a05 	vldr	s14, [r7, #20]
 800205a:	edd7 7a04 	vldr	s15, [r7, #16]
 800205e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002062:	ee16 0a90 	vmov	r0, s13
 8002066:	f7fe fa13 	bl	8000490 <__aeabi_f2d>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80020e0 <lps25hb_get_alt+0xf8>
 8002072:	ec43 2b10 	vmov	d0, r2, r3
 8002076:	f000 f897 	bl	80021a8 <pow>
 800207a:	ec51 0b10 	vmov	r0, r1, d0
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <lps25hb_get_alt+0x11c>)
 8002084:	f7fe f8a4 	bl	80001d0 <__aeabi_dsub>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4614      	mov	r4, r2
 800208e:	461d      	mov	r5, r3
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f7fe f9fd 	bl	8000490 <__aeabi_f2d>
 8002096:	a314      	add	r3, pc, #80	; (adr r3, 80020e8 <lps25hb_get_alt+0x100>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	f7fe f89a 	bl	80001d4 <__adddf3>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4620      	mov	r0, r4
 80020a6:	4629      	mov	r1, r5
 80020a8:	f7fe fa4a 	bl	8000540 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	a30e      	add	r3, pc, #56	; (adr r3, 80020f0 <lps25hb_get_alt+0x108>)
 80020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ba:	f7fe fb6b 	bl	8000794 <__aeabi_ddiv>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	f7fe fceb 	bl	8000aa0 <__aeabi_d2f>
 80020ca:	4603      	mov	r3, r0
 80020cc:	60bb      	str	r3, [r7, #8]

	return result;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	ee07 3a90 	vmov	s15, r3
}
 80020d4:	eeb0 0a67 	vmov.f32	s0, s15
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bdb0      	pop	{r4, r5, r7, pc}
 80020de:	bf00      	nop
 80020e0:	2df9378f 	.word	0x2df9378f
 80020e4:	3fc8593a 	.word	0x3fc8593a
 80020e8:	66666666 	.word	0x66666666
 80020ec:	40711266 	.word	0x40711266
 80020f0:	76c8b439 	.word	0x76c8b439
 80020f4:	3f7a9fbe 	.word	0x3f7a9fbe
 80020f8:	447d5000 	.word	0x447d5000
 80020fc:	45800000 	.word	0x45800000
 8002100:	447a0000 	.word	0x447a0000
 8002104:	3ff00000 	.word	0x3ff00000

08002108 <__errno>:
 8002108:	4b01      	ldr	r3, [pc, #4]	; (8002110 <__errno+0x8>)
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000008 	.word	0x20000008

08002114 <__libc_init_array>:
 8002114:	b570      	push	{r4, r5, r6, lr}
 8002116:	4d0d      	ldr	r5, [pc, #52]	; (800214c <__libc_init_array+0x38>)
 8002118:	4c0d      	ldr	r4, [pc, #52]	; (8002150 <__libc_init_array+0x3c>)
 800211a:	1b64      	subs	r4, r4, r5
 800211c:	10a4      	asrs	r4, r4, #2
 800211e:	2600      	movs	r6, #0
 8002120:	42a6      	cmp	r6, r4
 8002122:	d109      	bne.n	8002138 <__libc_init_array+0x24>
 8002124:	4d0b      	ldr	r5, [pc, #44]	; (8002154 <__libc_init_array+0x40>)
 8002126:	4c0c      	ldr	r4, [pc, #48]	; (8002158 <__libc_init_array+0x44>)
 8002128:	f000 fff4 	bl	8003114 <_init>
 800212c:	1b64      	subs	r4, r4, r5
 800212e:	10a4      	asrs	r4, r4, #2
 8002130:	2600      	movs	r6, #0
 8002132:	42a6      	cmp	r6, r4
 8002134:	d105      	bne.n	8002142 <__libc_init_array+0x2e>
 8002136:	bd70      	pop	{r4, r5, r6, pc}
 8002138:	f855 3b04 	ldr.w	r3, [r5], #4
 800213c:	4798      	blx	r3
 800213e:	3601      	adds	r6, #1
 8002140:	e7ee      	b.n	8002120 <__libc_init_array+0xc>
 8002142:	f855 3b04 	ldr.w	r3, [r5], #4
 8002146:	4798      	blx	r3
 8002148:	3601      	adds	r6, #1
 800214a:	e7f2      	b.n	8002132 <__libc_init_array+0x1e>
 800214c:	08003178 	.word	0x08003178
 8002150:	08003178 	.word	0x08003178
 8002154:	08003178 	.word	0x08003178
 8002158:	0800317c 	.word	0x0800317c

0800215c <roundf>:
 800215c:	ee10 0a10 	vmov	r0, s0
 8002160:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8002164:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8002168:	2a16      	cmp	r2, #22
 800216a:	dc15      	bgt.n	8002198 <roundf+0x3c>
 800216c:	2a00      	cmp	r2, #0
 800216e:	da08      	bge.n	8002182 <roundf+0x26>
 8002170:	3201      	adds	r2, #1
 8002172:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8002176:	d101      	bne.n	800217c <roundf+0x20>
 8002178:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800217c:	ee00 3a10 	vmov	s0, r3
 8002180:	4770      	bx	lr
 8002182:	4908      	ldr	r1, [pc, #32]	; (80021a4 <roundf+0x48>)
 8002184:	4111      	asrs	r1, r2
 8002186:	4208      	tst	r0, r1
 8002188:	d0fa      	beq.n	8002180 <roundf+0x24>
 800218a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800218e:	4113      	asrs	r3, r2
 8002190:	4403      	add	r3, r0
 8002192:	ea23 0301 	bic.w	r3, r3, r1
 8002196:	e7f1      	b.n	800217c <roundf+0x20>
 8002198:	2a80      	cmp	r2, #128	; 0x80
 800219a:	d1f1      	bne.n	8002180 <roundf+0x24>
 800219c:	ee30 0a00 	vadd.f32	s0, s0, s0
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	007fffff 	.word	0x007fffff

080021a8 <pow>:
 80021a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021ac:	ec59 8b10 	vmov	r8, r9, d0
 80021b0:	ec57 6b11 	vmov	r6, r7, d1
 80021b4:	f000 f8a8 	bl	8002308 <__ieee754_pow>
 80021b8:	4b4e      	ldr	r3, [pc, #312]	; (80022f4 <pow+0x14c>)
 80021ba:	f993 3000 	ldrsb.w	r3, [r3]
 80021be:	3301      	adds	r3, #1
 80021c0:	ec55 4b10 	vmov	r4, r5, d0
 80021c4:	d015      	beq.n	80021f2 <pow+0x4a>
 80021c6:	4632      	mov	r2, r6
 80021c8:	463b      	mov	r3, r7
 80021ca:	4630      	mov	r0, r6
 80021cc:	4639      	mov	r1, r7
 80021ce:	f7fe fc51 	bl	8000a74 <__aeabi_dcmpun>
 80021d2:	b970      	cbnz	r0, 80021f2 <pow+0x4a>
 80021d4:	4642      	mov	r2, r8
 80021d6:	464b      	mov	r3, r9
 80021d8:	4640      	mov	r0, r8
 80021da:	4649      	mov	r1, r9
 80021dc:	f7fe fc4a 	bl	8000a74 <__aeabi_dcmpun>
 80021e0:	2200      	movs	r2, #0
 80021e2:	2300      	movs	r3, #0
 80021e4:	b148      	cbz	r0, 80021fa <pow+0x52>
 80021e6:	4630      	mov	r0, r6
 80021e8:	4639      	mov	r1, r7
 80021ea:	f7fe fc11 	bl	8000a10 <__aeabi_dcmpeq>
 80021ee:	2800      	cmp	r0, #0
 80021f0:	d17d      	bne.n	80022ee <pow+0x146>
 80021f2:	ec45 4b10 	vmov	d0, r4, r5
 80021f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021fa:	4640      	mov	r0, r8
 80021fc:	4649      	mov	r1, r9
 80021fe:	f7fe fc07 	bl	8000a10 <__aeabi_dcmpeq>
 8002202:	b1e0      	cbz	r0, 800223e <pow+0x96>
 8002204:	2200      	movs	r2, #0
 8002206:	2300      	movs	r3, #0
 8002208:	4630      	mov	r0, r6
 800220a:	4639      	mov	r1, r7
 800220c:	f7fe fc00 	bl	8000a10 <__aeabi_dcmpeq>
 8002210:	2800      	cmp	r0, #0
 8002212:	d16c      	bne.n	80022ee <pow+0x146>
 8002214:	ec47 6b10 	vmov	d0, r6, r7
 8002218:	f000 fe55 	bl	8002ec6 <finite>
 800221c:	2800      	cmp	r0, #0
 800221e:	d0e8      	beq.n	80021f2 <pow+0x4a>
 8002220:	2200      	movs	r2, #0
 8002222:	2300      	movs	r3, #0
 8002224:	4630      	mov	r0, r6
 8002226:	4639      	mov	r1, r7
 8002228:	f7fe fbfc 	bl	8000a24 <__aeabi_dcmplt>
 800222c:	2800      	cmp	r0, #0
 800222e:	d0e0      	beq.n	80021f2 <pow+0x4a>
 8002230:	f7ff ff6a 	bl	8002108 <__errno>
 8002234:	2321      	movs	r3, #33	; 0x21
 8002236:	6003      	str	r3, [r0, #0]
 8002238:	2400      	movs	r4, #0
 800223a:	4d2f      	ldr	r5, [pc, #188]	; (80022f8 <pow+0x150>)
 800223c:	e7d9      	b.n	80021f2 <pow+0x4a>
 800223e:	ec45 4b10 	vmov	d0, r4, r5
 8002242:	f000 fe40 	bl	8002ec6 <finite>
 8002246:	bbb8      	cbnz	r0, 80022b8 <pow+0x110>
 8002248:	ec49 8b10 	vmov	d0, r8, r9
 800224c:	f000 fe3b 	bl	8002ec6 <finite>
 8002250:	b390      	cbz	r0, 80022b8 <pow+0x110>
 8002252:	ec47 6b10 	vmov	d0, r6, r7
 8002256:	f000 fe36 	bl	8002ec6 <finite>
 800225a:	b368      	cbz	r0, 80022b8 <pow+0x110>
 800225c:	4622      	mov	r2, r4
 800225e:	462b      	mov	r3, r5
 8002260:	4620      	mov	r0, r4
 8002262:	4629      	mov	r1, r5
 8002264:	f7fe fc06 	bl	8000a74 <__aeabi_dcmpun>
 8002268:	b160      	cbz	r0, 8002284 <pow+0xdc>
 800226a:	f7ff ff4d 	bl	8002108 <__errno>
 800226e:	2321      	movs	r3, #33	; 0x21
 8002270:	6003      	str	r3, [r0, #0]
 8002272:	2200      	movs	r2, #0
 8002274:	2300      	movs	r3, #0
 8002276:	4610      	mov	r0, r2
 8002278:	4619      	mov	r1, r3
 800227a:	f7fe fa8b 	bl	8000794 <__aeabi_ddiv>
 800227e:	4604      	mov	r4, r0
 8002280:	460d      	mov	r5, r1
 8002282:	e7b6      	b.n	80021f2 <pow+0x4a>
 8002284:	f7ff ff40 	bl	8002108 <__errno>
 8002288:	2322      	movs	r3, #34	; 0x22
 800228a:	6003      	str	r3, [r0, #0]
 800228c:	2200      	movs	r2, #0
 800228e:	2300      	movs	r3, #0
 8002290:	4640      	mov	r0, r8
 8002292:	4649      	mov	r1, r9
 8002294:	f7fe fbc6 	bl	8000a24 <__aeabi_dcmplt>
 8002298:	2400      	movs	r4, #0
 800229a:	b158      	cbz	r0, 80022b4 <pow+0x10c>
 800229c:	ec47 6b10 	vmov	d0, r6, r7
 80022a0:	f000 fe26 	bl	8002ef0 <rint>
 80022a4:	4632      	mov	r2, r6
 80022a6:	ec51 0b10 	vmov	r0, r1, d0
 80022aa:	463b      	mov	r3, r7
 80022ac:	f7fe fbb0 	bl	8000a10 <__aeabi_dcmpeq>
 80022b0:	2800      	cmp	r0, #0
 80022b2:	d0c2      	beq.n	800223a <pow+0x92>
 80022b4:	4d11      	ldr	r5, [pc, #68]	; (80022fc <pow+0x154>)
 80022b6:	e79c      	b.n	80021f2 <pow+0x4a>
 80022b8:	2200      	movs	r2, #0
 80022ba:	2300      	movs	r3, #0
 80022bc:	4620      	mov	r0, r4
 80022be:	4629      	mov	r1, r5
 80022c0:	f7fe fba6 	bl	8000a10 <__aeabi_dcmpeq>
 80022c4:	2800      	cmp	r0, #0
 80022c6:	d094      	beq.n	80021f2 <pow+0x4a>
 80022c8:	ec49 8b10 	vmov	d0, r8, r9
 80022cc:	f000 fdfb 	bl	8002ec6 <finite>
 80022d0:	2800      	cmp	r0, #0
 80022d2:	d08e      	beq.n	80021f2 <pow+0x4a>
 80022d4:	ec47 6b10 	vmov	d0, r6, r7
 80022d8:	f000 fdf5 	bl	8002ec6 <finite>
 80022dc:	2800      	cmp	r0, #0
 80022de:	d088      	beq.n	80021f2 <pow+0x4a>
 80022e0:	f7ff ff12 	bl	8002108 <__errno>
 80022e4:	2322      	movs	r3, #34	; 0x22
 80022e6:	6003      	str	r3, [r0, #0]
 80022e8:	2400      	movs	r4, #0
 80022ea:	2500      	movs	r5, #0
 80022ec:	e781      	b.n	80021f2 <pow+0x4a>
 80022ee:	4d04      	ldr	r5, [pc, #16]	; (8002300 <pow+0x158>)
 80022f0:	2400      	movs	r4, #0
 80022f2:	e77e      	b.n	80021f2 <pow+0x4a>
 80022f4:	2000006c 	.word	0x2000006c
 80022f8:	fff00000 	.word	0xfff00000
 80022fc:	7ff00000 	.word	0x7ff00000
 8002300:	3ff00000 	.word	0x3ff00000
 8002304:	00000000 	.word	0x00000000

08002308 <__ieee754_pow>:
 8002308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800230c:	ed2d 8b06 	vpush	{d8-d10}
 8002310:	b08d      	sub	sp, #52	; 0x34
 8002312:	ed8d 1b02 	vstr	d1, [sp, #8]
 8002316:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800231a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800231e:	ea56 0100 	orrs.w	r1, r6, r0
 8002322:	ec53 2b10 	vmov	r2, r3, d0
 8002326:	f000 84d1 	beq.w	8002ccc <__ieee754_pow+0x9c4>
 800232a:	497f      	ldr	r1, [pc, #508]	; (8002528 <__ieee754_pow+0x220>)
 800232c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002330:	428c      	cmp	r4, r1
 8002332:	ee10 8a10 	vmov	r8, s0
 8002336:	4699      	mov	r9, r3
 8002338:	dc09      	bgt.n	800234e <__ieee754_pow+0x46>
 800233a:	d103      	bne.n	8002344 <__ieee754_pow+0x3c>
 800233c:	b97a      	cbnz	r2, 800235e <__ieee754_pow+0x56>
 800233e:	42a6      	cmp	r6, r4
 8002340:	dd02      	ble.n	8002348 <__ieee754_pow+0x40>
 8002342:	e00c      	b.n	800235e <__ieee754_pow+0x56>
 8002344:	428e      	cmp	r6, r1
 8002346:	dc02      	bgt.n	800234e <__ieee754_pow+0x46>
 8002348:	428e      	cmp	r6, r1
 800234a:	d110      	bne.n	800236e <__ieee754_pow+0x66>
 800234c:	b178      	cbz	r0, 800236e <__ieee754_pow+0x66>
 800234e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002352:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002356:	ea54 0308 	orrs.w	r3, r4, r8
 800235a:	f000 84b7 	beq.w	8002ccc <__ieee754_pow+0x9c4>
 800235e:	4873      	ldr	r0, [pc, #460]	; (800252c <__ieee754_pow+0x224>)
 8002360:	b00d      	add	sp, #52	; 0x34
 8002362:	ecbd 8b06 	vpop	{d8-d10}
 8002366:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800236a:	f000 bdb9 	b.w	8002ee0 <nan>
 800236e:	f1b9 0f00 	cmp.w	r9, #0
 8002372:	da36      	bge.n	80023e2 <__ieee754_pow+0xda>
 8002374:	496e      	ldr	r1, [pc, #440]	; (8002530 <__ieee754_pow+0x228>)
 8002376:	428e      	cmp	r6, r1
 8002378:	dc51      	bgt.n	800241e <__ieee754_pow+0x116>
 800237a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800237e:	428e      	cmp	r6, r1
 8002380:	f340 84af 	ble.w	8002ce2 <__ieee754_pow+0x9da>
 8002384:	1531      	asrs	r1, r6, #20
 8002386:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800238a:	2914      	cmp	r1, #20
 800238c:	dd0f      	ble.n	80023ae <__ieee754_pow+0xa6>
 800238e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8002392:	fa20 fc01 	lsr.w	ip, r0, r1
 8002396:	fa0c f101 	lsl.w	r1, ip, r1
 800239a:	4281      	cmp	r1, r0
 800239c:	f040 84a1 	bne.w	8002ce2 <__ieee754_pow+0x9da>
 80023a0:	f00c 0c01 	and.w	ip, ip, #1
 80023a4:	f1cc 0102 	rsb	r1, ip, #2
 80023a8:	9100      	str	r1, [sp, #0]
 80023aa:	b180      	cbz	r0, 80023ce <__ieee754_pow+0xc6>
 80023ac:	e059      	b.n	8002462 <__ieee754_pow+0x15a>
 80023ae:	2800      	cmp	r0, #0
 80023b0:	d155      	bne.n	800245e <__ieee754_pow+0x156>
 80023b2:	f1c1 0114 	rsb	r1, r1, #20
 80023b6:	fa46 fc01 	asr.w	ip, r6, r1
 80023ba:	fa0c f101 	lsl.w	r1, ip, r1
 80023be:	42b1      	cmp	r1, r6
 80023c0:	f040 848c 	bne.w	8002cdc <__ieee754_pow+0x9d4>
 80023c4:	f00c 0c01 	and.w	ip, ip, #1
 80023c8:	f1cc 0102 	rsb	r1, ip, #2
 80023cc:	9100      	str	r1, [sp, #0]
 80023ce:	4959      	ldr	r1, [pc, #356]	; (8002534 <__ieee754_pow+0x22c>)
 80023d0:	428e      	cmp	r6, r1
 80023d2:	d12d      	bne.n	8002430 <__ieee754_pow+0x128>
 80023d4:	2f00      	cmp	r7, #0
 80023d6:	da79      	bge.n	80024cc <__ieee754_pow+0x1c4>
 80023d8:	4956      	ldr	r1, [pc, #344]	; (8002534 <__ieee754_pow+0x22c>)
 80023da:	2000      	movs	r0, #0
 80023dc:	f7fe f9da 	bl	8000794 <__aeabi_ddiv>
 80023e0:	e016      	b.n	8002410 <__ieee754_pow+0x108>
 80023e2:	2100      	movs	r1, #0
 80023e4:	9100      	str	r1, [sp, #0]
 80023e6:	2800      	cmp	r0, #0
 80023e8:	d13b      	bne.n	8002462 <__ieee754_pow+0x15a>
 80023ea:	494f      	ldr	r1, [pc, #316]	; (8002528 <__ieee754_pow+0x220>)
 80023ec:	428e      	cmp	r6, r1
 80023ee:	d1ee      	bne.n	80023ce <__ieee754_pow+0xc6>
 80023f0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80023f4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80023f8:	ea53 0308 	orrs.w	r3, r3, r8
 80023fc:	f000 8466 	beq.w	8002ccc <__ieee754_pow+0x9c4>
 8002400:	4b4d      	ldr	r3, [pc, #308]	; (8002538 <__ieee754_pow+0x230>)
 8002402:	429c      	cmp	r4, r3
 8002404:	dd0d      	ble.n	8002422 <__ieee754_pow+0x11a>
 8002406:	2f00      	cmp	r7, #0
 8002408:	f280 8464 	bge.w	8002cd4 <__ieee754_pow+0x9cc>
 800240c:	2000      	movs	r0, #0
 800240e:	2100      	movs	r1, #0
 8002410:	ec41 0b10 	vmov	d0, r0, r1
 8002414:	b00d      	add	sp, #52	; 0x34
 8002416:	ecbd 8b06 	vpop	{d8-d10}
 800241a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800241e:	2102      	movs	r1, #2
 8002420:	e7e0      	b.n	80023e4 <__ieee754_pow+0xdc>
 8002422:	2f00      	cmp	r7, #0
 8002424:	daf2      	bge.n	800240c <__ieee754_pow+0x104>
 8002426:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800242a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800242e:	e7ef      	b.n	8002410 <__ieee754_pow+0x108>
 8002430:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8002434:	d104      	bne.n	8002440 <__ieee754_pow+0x138>
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	f7fe f881 	bl	8000540 <__aeabi_dmul>
 800243e:	e7e7      	b.n	8002410 <__ieee754_pow+0x108>
 8002440:	493e      	ldr	r1, [pc, #248]	; (800253c <__ieee754_pow+0x234>)
 8002442:	428f      	cmp	r7, r1
 8002444:	d10d      	bne.n	8002462 <__ieee754_pow+0x15a>
 8002446:	f1b9 0f00 	cmp.w	r9, #0
 800244a:	db0a      	blt.n	8002462 <__ieee754_pow+0x15a>
 800244c:	ec43 2b10 	vmov	d0, r2, r3
 8002450:	b00d      	add	sp, #52	; 0x34
 8002452:	ecbd 8b06 	vpop	{d8-d10}
 8002456:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800245a:	f000 bc77 	b.w	8002d4c <__ieee754_sqrt>
 800245e:	2100      	movs	r1, #0
 8002460:	9100      	str	r1, [sp, #0]
 8002462:	ec43 2b10 	vmov	d0, r2, r3
 8002466:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800246a:	f000 fd23 	bl	8002eb4 <fabs>
 800246e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002472:	ec51 0b10 	vmov	r0, r1, d0
 8002476:	f1b8 0f00 	cmp.w	r8, #0
 800247a:	d12a      	bne.n	80024d2 <__ieee754_pow+0x1ca>
 800247c:	b12c      	cbz	r4, 800248a <__ieee754_pow+0x182>
 800247e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8002534 <__ieee754_pow+0x22c>
 8002482:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8002486:	45e6      	cmp	lr, ip
 8002488:	d123      	bne.n	80024d2 <__ieee754_pow+0x1ca>
 800248a:	2f00      	cmp	r7, #0
 800248c:	da05      	bge.n	800249a <__ieee754_pow+0x192>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	2000      	movs	r0, #0
 8002494:	4927      	ldr	r1, [pc, #156]	; (8002534 <__ieee754_pow+0x22c>)
 8002496:	f7fe f97d 	bl	8000794 <__aeabi_ddiv>
 800249a:	f1b9 0f00 	cmp.w	r9, #0
 800249e:	dab7      	bge.n	8002410 <__ieee754_pow+0x108>
 80024a0:	9b00      	ldr	r3, [sp, #0]
 80024a2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80024a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80024aa:	4323      	orrs	r3, r4
 80024ac:	d108      	bne.n	80024c0 <__ieee754_pow+0x1b8>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	f7fd fe8b 	bl	80001d0 <__aeabi_dsub>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	e78d      	b.n	80023dc <__ieee754_pow+0xd4>
 80024c0:	9b00      	ldr	r3, [sp, #0]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d1a4      	bne.n	8002410 <__ieee754_pow+0x108>
 80024c6:	4602      	mov	r2, r0
 80024c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	e79e      	b.n	8002410 <__ieee754_pow+0x108>
 80024d2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80024d6:	f10c 35ff 	add.w	r5, ip, #4294967295
 80024da:	950a      	str	r5, [sp, #40]	; 0x28
 80024dc:	9d00      	ldr	r5, [sp, #0]
 80024de:	46ac      	mov	ip, r5
 80024e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80024e2:	ea5c 0505 	orrs.w	r5, ip, r5
 80024e6:	d0e4      	beq.n	80024b2 <__ieee754_pow+0x1aa>
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <__ieee754_pow+0x238>)
 80024ea:	429e      	cmp	r6, r3
 80024ec:	f340 80fc 	ble.w	80026e8 <__ieee754_pow+0x3e0>
 80024f0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80024f4:	429e      	cmp	r6, r3
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <__ieee754_pow+0x230>)
 80024f8:	dd07      	ble.n	800250a <__ieee754_pow+0x202>
 80024fa:	429c      	cmp	r4, r3
 80024fc:	dc0a      	bgt.n	8002514 <__ieee754_pow+0x20c>
 80024fe:	2f00      	cmp	r7, #0
 8002500:	da84      	bge.n	800240c <__ieee754_pow+0x104>
 8002502:	a307      	add	r3, pc, #28	; (adr r3, 8002520 <__ieee754_pow+0x218>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	e795      	b.n	8002436 <__ieee754_pow+0x12e>
 800250a:	429c      	cmp	r4, r3
 800250c:	dbf7      	blt.n	80024fe <__ieee754_pow+0x1f6>
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <__ieee754_pow+0x22c>)
 8002510:	429c      	cmp	r4, r3
 8002512:	dd17      	ble.n	8002544 <__ieee754_pow+0x23c>
 8002514:	2f00      	cmp	r7, #0
 8002516:	dcf4      	bgt.n	8002502 <__ieee754_pow+0x1fa>
 8002518:	e778      	b.n	800240c <__ieee754_pow+0x104>
 800251a:	bf00      	nop
 800251c:	f3af 8000 	nop.w
 8002520:	8800759c 	.word	0x8800759c
 8002524:	7e37e43c 	.word	0x7e37e43c
 8002528:	7ff00000 	.word	0x7ff00000
 800252c:	08003130 	.word	0x08003130
 8002530:	433fffff 	.word	0x433fffff
 8002534:	3ff00000 	.word	0x3ff00000
 8002538:	3fefffff 	.word	0x3fefffff
 800253c:	3fe00000 	.word	0x3fe00000
 8002540:	41e00000 	.word	0x41e00000
 8002544:	4b64      	ldr	r3, [pc, #400]	; (80026d8 <__ieee754_pow+0x3d0>)
 8002546:	2200      	movs	r2, #0
 8002548:	f7fd fe42 	bl	80001d0 <__aeabi_dsub>
 800254c:	a356      	add	r3, pc, #344	; (adr r3, 80026a8 <__ieee754_pow+0x3a0>)
 800254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002552:	4604      	mov	r4, r0
 8002554:	460d      	mov	r5, r1
 8002556:	f7fd fff3 	bl	8000540 <__aeabi_dmul>
 800255a:	a355      	add	r3, pc, #340	; (adr r3, 80026b0 <__ieee754_pow+0x3a8>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	4606      	mov	r6, r0
 8002562:	460f      	mov	r7, r1
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	f7fd ffea 	bl	8000540 <__aeabi_dmul>
 800256c:	4b5b      	ldr	r3, [pc, #364]	; (80026dc <__ieee754_pow+0x3d4>)
 800256e:	4682      	mov	sl, r0
 8002570:	468b      	mov	fp, r1
 8002572:	2200      	movs	r2, #0
 8002574:	4620      	mov	r0, r4
 8002576:	4629      	mov	r1, r5
 8002578:	f7fd ffe2 	bl	8000540 <__aeabi_dmul>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	a14d      	add	r1, pc, #308	; (adr r1, 80026b8 <__ieee754_pow+0x3b0>)
 8002582:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002586:	f7fd fe23 	bl	80001d0 <__aeabi_dsub>
 800258a:	4622      	mov	r2, r4
 800258c:	462b      	mov	r3, r5
 800258e:	f7fd ffd7 	bl	8000540 <__aeabi_dmul>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	2000      	movs	r0, #0
 8002598:	4951      	ldr	r1, [pc, #324]	; (80026e0 <__ieee754_pow+0x3d8>)
 800259a:	f7fd fe19 	bl	80001d0 <__aeabi_dsub>
 800259e:	4622      	mov	r2, r4
 80025a0:	4680      	mov	r8, r0
 80025a2:	4689      	mov	r9, r1
 80025a4:	462b      	mov	r3, r5
 80025a6:	4620      	mov	r0, r4
 80025a8:	4629      	mov	r1, r5
 80025aa:	f7fd ffc9 	bl	8000540 <__aeabi_dmul>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4640      	mov	r0, r8
 80025b4:	4649      	mov	r1, r9
 80025b6:	f7fd ffc3 	bl	8000540 <__aeabi_dmul>
 80025ba:	a341      	add	r3, pc, #260	; (adr r3, 80026c0 <__ieee754_pow+0x3b8>)
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f7fd ffbe 	bl	8000540 <__aeabi_dmul>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4650      	mov	r0, sl
 80025ca:	4659      	mov	r1, fp
 80025cc:	f7fd fe00 	bl	80001d0 <__aeabi_dsub>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4680      	mov	r8, r0
 80025d6:	4689      	mov	r9, r1
 80025d8:	4630      	mov	r0, r6
 80025da:	4639      	mov	r1, r7
 80025dc:	f7fd fdfa 	bl	80001d4 <__adddf3>
 80025e0:	2400      	movs	r4, #0
 80025e2:	4632      	mov	r2, r6
 80025e4:	463b      	mov	r3, r7
 80025e6:	4620      	mov	r0, r4
 80025e8:	460d      	mov	r5, r1
 80025ea:	f7fd fdf1 	bl	80001d0 <__aeabi_dsub>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4640      	mov	r0, r8
 80025f4:	4649      	mov	r1, r9
 80025f6:	f7fd fdeb 	bl	80001d0 <__aeabi_dsub>
 80025fa:	9b00      	ldr	r3, [sp, #0]
 80025fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80025fe:	3b01      	subs	r3, #1
 8002600:	4313      	orrs	r3, r2
 8002602:	4682      	mov	sl, r0
 8002604:	468b      	mov	fp, r1
 8002606:	f040 81f1 	bne.w	80029ec <__ieee754_pow+0x6e4>
 800260a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80026c8 <__ieee754_pow+0x3c0>
 800260e:	eeb0 8a47 	vmov.f32	s16, s14
 8002612:	eef0 8a67 	vmov.f32	s17, s15
 8002616:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800261a:	2600      	movs	r6, #0
 800261c:	4632      	mov	r2, r6
 800261e:	463b      	mov	r3, r7
 8002620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002624:	f7fd fdd4 	bl	80001d0 <__aeabi_dsub>
 8002628:	4622      	mov	r2, r4
 800262a:	462b      	mov	r3, r5
 800262c:	f7fd ff88 	bl	8000540 <__aeabi_dmul>
 8002630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002634:	4680      	mov	r8, r0
 8002636:	4689      	mov	r9, r1
 8002638:	4650      	mov	r0, sl
 800263a:	4659      	mov	r1, fp
 800263c:	f7fd ff80 	bl	8000540 <__aeabi_dmul>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4640      	mov	r0, r8
 8002646:	4649      	mov	r1, r9
 8002648:	f7fd fdc4 	bl	80001d4 <__adddf3>
 800264c:	4632      	mov	r2, r6
 800264e:	463b      	mov	r3, r7
 8002650:	4680      	mov	r8, r0
 8002652:	4689      	mov	r9, r1
 8002654:	4620      	mov	r0, r4
 8002656:	4629      	mov	r1, r5
 8002658:	f7fd ff72 	bl	8000540 <__aeabi_dmul>
 800265c:	460b      	mov	r3, r1
 800265e:	4604      	mov	r4, r0
 8002660:	460d      	mov	r5, r1
 8002662:	4602      	mov	r2, r0
 8002664:	4649      	mov	r1, r9
 8002666:	4640      	mov	r0, r8
 8002668:	f7fd fdb4 	bl	80001d4 <__adddf3>
 800266c:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <__ieee754_pow+0x3dc>)
 800266e:	4299      	cmp	r1, r3
 8002670:	ec45 4b19 	vmov	d9, r4, r5
 8002674:	4606      	mov	r6, r0
 8002676:	460f      	mov	r7, r1
 8002678:	468b      	mov	fp, r1
 800267a:	f340 82fe 	ble.w	8002c7a <__ieee754_pow+0x972>
 800267e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002682:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002686:	4303      	orrs	r3, r0
 8002688:	f000 81f0 	beq.w	8002a6c <__ieee754_pow+0x764>
 800268c:	a310      	add	r3, pc, #64	; (adr r3, 80026d0 <__ieee754_pow+0x3c8>)
 800268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002692:	ec51 0b18 	vmov	r0, r1, d8
 8002696:	f7fd ff53 	bl	8000540 <__aeabi_dmul>
 800269a:	a30d      	add	r3, pc, #52	; (adr r3, 80026d0 <__ieee754_pow+0x3c8>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	e6cb      	b.n	800243a <__ieee754_pow+0x132>
 80026a2:	bf00      	nop
 80026a4:	f3af 8000 	nop.w
 80026a8:	60000000 	.word	0x60000000
 80026ac:	3ff71547 	.word	0x3ff71547
 80026b0:	f85ddf44 	.word	0xf85ddf44
 80026b4:	3e54ae0b 	.word	0x3e54ae0b
 80026b8:	55555555 	.word	0x55555555
 80026bc:	3fd55555 	.word	0x3fd55555
 80026c0:	652b82fe 	.word	0x652b82fe
 80026c4:	3ff71547 	.word	0x3ff71547
 80026c8:	00000000 	.word	0x00000000
 80026cc:	bff00000 	.word	0xbff00000
 80026d0:	8800759c 	.word	0x8800759c
 80026d4:	7e37e43c 	.word	0x7e37e43c
 80026d8:	3ff00000 	.word	0x3ff00000
 80026dc:	3fd00000 	.word	0x3fd00000
 80026e0:	3fe00000 	.word	0x3fe00000
 80026e4:	408fffff 	.word	0x408fffff
 80026e8:	4bd7      	ldr	r3, [pc, #860]	; (8002a48 <__ieee754_pow+0x740>)
 80026ea:	ea03 0309 	and.w	r3, r3, r9
 80026ee:	2200      	movs	r2, #0
 80026f0:	b92b      	cbnz	r3, 80026fe <__ieee754_pow+0x3f6>
 80026f2:	4bd6      	ldr	r3, [pc, #856]	; (8002a4c <__ieee754_pow+0x744>)
 80026f4:	f7fd ff24 	bl	8000540 <__aeabi_dmul>
 80026f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80026fc:	460c      	mov	r4, r1
 80026fe:	1523      	asrs	r3, r4, #20
 8002700:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002704:	4413      	add	r3, r2
 8002706:	9309      	str	r3, [sp, #36]	; 0x24
 8002708:	4bd1      	ldr	r3, [pc, #836]	; (8002a50 <__ieee754_pow+0x748>)
 800270a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800270e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002712:	429c      	cmp	r4, r3
 8002714:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002718:	dd08      	ble.n	800272c <__ieee754_pow+0x424>
 800271a:	4bce      	ldr	r3, [pc, #824]	; (8002a54 <__ieee754_pow+0x74c>)
 800271c:	429c      	cmp	r4, r3
 800271e:	f340 8163 	ble.w	80029e8 <__ieee754_pow+0x6e0>
 8002722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002724:	3301      	adds	r3, #1
 8002726:	9309      	str	r3, [sp, #36]	; 0x24
 8002728:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800272c:	2400      	movs	r4, #0
 800272e:	00e3      	lsls	r3, r4, #3
 8002730:	930b      	str	r3, [sp, #44]	; 0x2c
 8002732:	4bc9      	ldr	r3, [pc, #804]	; (8002a58 <__ieee754_pow+0x750>)
 8002734:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002738:	ed93 7b00 	vldr	d7, [r3]
 800273c:	4629      	mov	r1, r5
 800273e:	ec53 2b17 	vmov	r2, r3, d7
 8002742:	eeb0 8a47 	vmov.f32	s16, s14
 8002746:	eef0 8a67 	vmov.f32	s17, s15
 800274a:	4682      	mov	sl, r0
 800274c:	f7fd fd40 	bl	80001d0 <__aeabi_dsub>
 8002750:	4652      	mov	r2, sl
 8002752:	4606      	mov	r6, r0
 8002754:	460f      	mov	r7, r1
 8002756:	462b      	mov	r3, r5
 8002758:	ec51 0b18 	vmov	r0, r1, d8
 800275c:	f7fd fd3a 	bl	80001d4 <__adddf3>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	2000      	movs	r0, #0
 8002766:	49bd      	ldr	r1, [pc, #756]	; (8002a5c <__ieee754_pow+0x754>)
 8002768:	f7fe f814 	bl	8000794 <__aeabi_ddiv>
 800276c:	ec41 0b19 	vmov	d9, r0, r1
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4630      	mov	r0, r6
 8002776:	4639      	mov	r1, r7
 8002778:	f7fd fee2 	bl	8000540 <__aeabi_dmul>
 800277c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002780:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002784:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002788:	2300      	movs	r3, #0
 800278a:	9304      	str	r3, [sp, #16]
 800278c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8002790:	46ab      	mov	fp, r5
 8002792:	106d      	asrs	r5, r5, #1
 8002794:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002798:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800279c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80027a0:	2200      	movs	r2, #0
 80027a2:	4640      	mov	r0, r8
 80027a4:	4649      	mov	r1, r9
 80027a6:	4614      	mov	r4, r2
 80027a8:	461d      	mov	r5, r3
 80027aa:	f7fd fec9 	bl	8000540 <__aeabi_dmul>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4630      	mov	r0, r6
 80027b4:	4639      	mov	r1, r7
 80027b6:	f7fd fd0b 	bl	80001d0 <__aeabi_dsub>
 80027ba:	ec53 2b18 	vmov	r2, r3, d8
 80027be:	4606      	mov	r6, r0
 80027c0:	460f      	mov	r7, r1
 80027c2:	4620      	mov	r0, r4
 80027c4:	4629      	mov	r1, r5
 80027c6:	f7fd fd03 	bl	80001d0 <__aeabi_dsub>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4650      	mov	r0, sl
 80027d0:	4659      	mov	r1, fp
 80027d2:	f7fd fcfd 	bl	80001d0 <__aeabi_dsub>
 80027d6:	4642      	mov	r2, r8
 80027d8:	464b      	mov	r3, r9
 80027da:	f7fd feb1 	bl	8000540 <__aeabi_dmul>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4630      	mov	r0, r6
 80027e4:	4639      	mov	r1, r7
 80027e6:	f7fd fcf3 	bl	80001d0 <__aeabi_dsub>
 80027ea:	ec53 2b19 	vmov	r2, r3, d9
 80027ee:	f7fd fea7 	bl	8000540 <__aeabi_dmul>
 80027f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80027f6:	ec41 0b18 	vmov	d8, r0, r1
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	f7fd fe9f 	bl	8000540 <__aeabi_dmul>
 8002802:	a37d      	add	r3, pc, #500	; (adr r3, 80029f8 <__ieee754_pow+0x6f0>)
 8002804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002808:	4604      	mov	r4, r0
 800280a:	460d      	mov	r5, r1
 800280c:	f7fd fe98 	bl	8000540 <__aeabi_dmul>
 8002810:	a37b      	add	r3, pc, #492	; (adr r3, 8002a00 <__ieee754_pow+0x6f8>)
 8002812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002816:	f7fd fcdd 	bl	80001d4 <__adddf3>
 800281a:	4622      	mov	r2, r4
 800281c:	462b      	mov	r3, r5
 800281e:	f7fd fe8f 	bl	8000540 <__aeabi_dmul>
 8002822:	a379      	add	r3, pc, #484	; (adr r3, 8002a08 <__ieee754_pow+0x700>)
 8002824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002828:	f7fd fcd4 	bl	80001d4 <__adddf3>
 800282c:	4622      	mov	r2, r4
 800282e:	462b      	mov	r3, r5
 8002830:	f7fd fe86 	bl	8000540 <__aeabi_dmul>
 8002834:	a376      	add	r3, pc, #472	; (adr r3, 8002a10 <__ieee754_pow+0x708>)
 8002836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283a:	f7fd fccb 	bl	80001d4 <__adddf3>
 800283e:	4622      	mov	r2, r4
 8002840:	462b      	mov	r3, r5
 8002842:	f7fd fe7d 	bl	8000540 <__aeabi_dmul>
 8002846:	a374      	add	r3, pc, #464	; (adr r3, 8002a18 <__ieee754_pow+0x710>)
 8002848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284c:	f7fd fcc2 	bl	80001d4 <__adddf3>
 8002850:	4622      	mov	r2, r4
 8002852:	462b      	mov	r3, r5
 8002854:	f7fd fe74 	bl	8000540 <__aeabi_dmul>
 8002858:	a371      	add	r3, pc, #452	; (adr r3, 8002a20 <__ieee754_pow+0x718>)
 800285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285e:	f7fd fcb9 	bl	80001d4 <__adddf3>
 8002862:	4622      	mov	r2, r4
 8002864:	4606      	mov	r6, r0
 8002866:	460f      	mov	r7, r1
 8002868:	462b      	mov	r3, r5
 800286a:	4620      	mov	r0, r4
 800286c:	4629      	mov	r1, r5
 800286e:	f7fd fe67 	bl	8000540 <__aeabi_dmul>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4630      	mov	r0, r6
 8002878:	4639      	mov	r1, r7
 800287a:	f7fd fe61 	bl	8000540 <__aeabi_dmul>
 800287e:	4642      	mov	r2, r8
 8002880:	4604      	mov	r4, r0
 8002882:	460d      	mov	r5, r1
 8002884:	464b      	mov	r3, r9
 8002886:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800288a:	f7fd fca3 	bl	80001d4 <__adddf3>
 800288e:	ec53 2b18 	vmov	r2, r3, d8
 8002892:	f7fd fe55 	bl	8000540 <__aeabi_dmul>
 8002896:	4622      	mov	r2, r4
 8002898:	462b      	mov	r3, r5
 800289a:	f7fd fc9b 	bl	80001d4 <__adddf3>
 800289e:	4642      	mov	r2, r8
 80028a0:	4682      	mov	sl, r0
 80028a2:	468b      	mov	fp, r1
 80028a4:	464b      	mov	r3, r9
 80028a6:	4640      	mov	r0, r8
 80028a8:	4649      	mov	r1, r9
 80028aa:	f7fd fe49 	bl	8000540 <__aeabi_dmul>
 80028ae:	4b6c      	ldr	r3, [pc, #432]	; (8002a60 <__ieee754_pow+0x758>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	4606      	mov	r6, r0
 80028b4:	460f      	mov	r7, r1
 80028b6:	f7fd fc8d 	bl	80001d4 <__adddf3>
 80028ba:	4652      	mov	r2, sl
 80028bc:	465b      	mov	r3, fp
 80028be:	f7fd fc89 	bl	80001d4 <__adddf3>
 80028c2:	9c04      	ldr	r4, [sp, #16]
 80028c4:	460d      	mov	r5, r1
 80028c6:	4622      	mov	r2, r4
 80028c8:	460b      	mov	r3, r1
 80028ca:	4640      	mov	r0, r8
 80028cc:	4649      	mov	r1, r9
 80028ce:	f7fd fe37 	bl	8000540 <__aeabi_dmul>
 80028d2:	4b63      	ldr	r3, [pc, #396]	; (8002a60 <__ieee754_pow+0x758>)
 80028d4:	4680      	mov	r8, r0
 80028d6:	4689      	mov	r9, r1
 80028d8:	2200      	movs	r2, #0
 80028da:	4620      	mov	r0, r4
 80028dc:	4629      	mov	r1, r5
 80028de:	f7fd fc77 	bl	80001d0 <__aeabi_dsub>
 80028e2:	4632      	mov	r2, r6
 80028e4:	463b      	mov	r3, r7
 80028e6:	f7fd fc73 	bl	80001d0 <__aeabi_dsub>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4650      	mov	r0, sl
 80028f0:	4659      	mov	r1, fp
 80028f2:	f7fd fc6d 	bl	80001d0 <__aeabi_dsub>
 80028f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80028fa:	f7fd fe21 	bl	8000540 <__aeabi_dmul>
 80028fe:	4622      	mov	r2, r4
 8002900:	4606      	mov	r6, r0
 8002902:	460f      	mov	r7, r1
 8002904:	462b      	mov	r3, r5
 8002906:	ec51 0b18 	vmov	r0, r1, d8
 800290a:	f7fd fe19 	bl	8000540 <__aeabi_dmul>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4630      	mov	r0, r6
 8002914:	4639      	mov	r1, r7
 8002916:	f7fd fc5d 	bl	80001d4 <__adddf3>
 800291a:	4606      	mov	r6, r0
 800291c:	460f      	mov	r7, r1
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4640      	mov	r0, r8
 8002924:	4649      	mov	r1, r9
 8002926:	f7fd fc55 	bl	80001d4 <__adddf3>
 800292a:	9c04      	ldr	r4, [sp, #16]
 800292c:	a33e      	add	r3, pc, #248	; (adr r3, 8002a28 <__ieee754_pow+0x720>)
 800292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002932:	4620      	mov	r0, r4
 8002934:	460d      	mov	r5, r1
 8002936:	f7fd fe03 	bl	8000540 <__aeabi_dmul>
 800293a:	4642      	mov	r2, r8
 800293c:	ec41 0b18 	vmov	d8, r0, r1
 8002940:	464b      	mov	r3, r9
 8002942:	4620      	mov	r0, r4
 8002944:	4629      	mov	r1, r5
 8002946:	f7fd fc43 	bl	80001d0 <__aeabi_dsub>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4630      	mov	r0, r6
 8002950:	4639      	mov	r1, r7
 8002952:	f7fd fc3d 	bl	80001d0 <__aeabi_dsub>
 8002956:	a336      	add	r3, pc, #216	; (adr r3, 8002a30 <__ieee754_pow+0x728>)
 8002958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295c:	f7fd fdf0 	bl	8000540 <__aeabi_dmul>
 8002960:	a335      	add	r3, pc, #212	; (adr r3, 8002a38 <__ieee754_pow+0x730>)
 8002962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002966:	4606      	mov	r6, r0
 8002968:	460f      	mov	r7, r1
 800296a:	4620      	mov	r0, r4
 800296c:	4629      	mov	r1, r5
 800296e:	f7fd fde7 	bl	8000540 <__aeabi_dmul>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4630      	mov	r0, r6
 8002978:	4639      	mov	r1, r7
 800297a:	f7fd fc2b 	bl	80001d4 <__adddf3>
 800297e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002980:	4b38      	ldr	r3, [pc, #224]	; (8002a64 <__ieee754_pow+0x75c>)
 8002982:	4413      	add	r3, r2
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	f7fd fc24 	bl	80001d4 <__adddf3>
 800298c:	4682      	mov	sl, r0
 800298e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002990:	468b      	mov	fp, r1
 8002992:	f7fd fd6b 	bl	800046c <__aeabi_i2d>
 8002996:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002998:	4b33      	ldr	r3, [pc, #204]	; (8002a68 <__ieee754_pow+0x760>)
 800299a:	4413      	add	r3, r2
 800299c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80029a0:	4606      	mov	r6, r0
 80029a2:	460f      	mov	r7, r1
 80029a4:	4652      	mov	r2, sl
 80029a6:	465b      	mov	r3, fp
 80029a8:	ec51 0b18 	vmov	r0, r1, d8
 80029ac:	f7fd fc12 	bl	80001d4 <__adddf3>
 80029b0:	4642      	mov	r2, r8
 80029b2:	464b      	mov	r3, r9
 80029b4:	f7fd fc0e 	bl	80001d4 <__adddf3>
 80029b8:	4632      	mov	r2, r6
 80029ba:	463b      	mov	r3, r7
 80029bc:	f7fd fc0a 	bl	80001d4 <__adddf3>
 80029c0:	9c04      	ldr	r4, [sp, #16]
 80029c2:	4632      	mov	r2, r6
 80029c4:	463b      	mov	r3, r7
 80029c6:	4620      	mov	r0, r4
 80029c8:	460d      	mov	r5, r1
 80029ca:	f7fd fc01 	bl	80001d0 <__aeabi_dsub>
 80029ce:	4642      	mov	r2, r8
 80029d0:	464b      	mov	r3, r9
 80029d2:	f7fd fbfd 	bl	80001d0 <__aeabi_dsub>
 80029d6:	ec53 2b18 	vmov	r2, r3, d8
 80029da:	f7fd fbf9 	bl	80001d0 <__aeabi_dsub>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4650      	mov	r0, sl
 80029e4:	4659      	mov	r1, fp
 80029e6:	e606      	b.n	80025f6 <__ieee754_pow+0x2ee>
 80029e8:	2401      	movs	r4, #1
 80029ea:	e6a0      	b.n	800272e <__ieee754_pow+0x426>
 80029ec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8002a40 <__ieee754_pow+0x738>
 80029f0:	e60d      	b.n	800260e <__ieee754_pow+0x306>
 80029f2:	bf00      	nop
 80029f4:	f3af 8000 	nop.w
 80029f8:	4a454eef 	.word	0x4a454eef
 80029fc:	3fca7e28 	.word	0x3fca7e28
 8002a00:	93c9db65 	.word	0x93c9db65
 8002a04:	3fcd864a 	.word	0x3fcd864a
 8002a08:	a91d4101 	.word	0xa91d4101
 8002a0c:	3fd17460 	.word	0x3fd17460
 8002a10:	518f264d 	.word	0x518f264d
 8002a14:	3fd55555 	.word	0x3fd55555
 8002a18:	db6fabff 	.word	0xdb6fabff
 8002a1c:	3fdb6db6 	.word	0x3fdb6db6
 8002a20:	33333303 	.word	0x33333303
 8002a24:	3fe33333 	.word	0x3fe33333
 8002a28:	e0000000 	.word	0xe0000000
 8002a2c:	3feec709 	.word	0x3feec709
 8002a30:	dc3a03fd 	.word	0xdc3a03fd
 8002a34:	3feec709 	.word	0x3feec709
 8002a38:	145b01f5 	.word	0x145b01f5
 8002a3c:	be3e2fe0 	.word	0xbe3e2fe0
 8002a40:	00000000 	.word	0x00000000
 8002a44:	3ff00000 	.word	0x3ff00000
 8002a48:	7ff00000 	.word	0x7ff00000
 8002a4c:	43400000 	.word	0x43400000
 8002a50:	0003988e 	.word	0x0003988e
 8002a54:	000bb679 	.word	0x000bb679
 8002a58:	08003138 	.word	0x08003138
 8002a5c:	3ff00000 	.word	0x3ff00000
 8002a60:	40080000 	.word	0x40080000
 8002a64:	08003158 	.word	0x08003158
 8002a68:	08003148 	.word	0x08003148
 8002a6c:	a3b5      	add	r3, pc, #724	; (adr r3, 8002d44 <__ieee754_pow+0xa3c>)
 8002a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a72:	4640      	mov	r0, r8
 8002a74:	4649      	mov	r1, r9
 8002a76:	f7fd fbad 	bl	80001d4 <__adddf3>
 8002a7a:	4622      	mov	r2, r4
 8002a7c:	ec41 0b1a 	vmov	d10, r0, r1
 8002a80:	462b      	mov	r3, r5
 8002a82:	4630      	mov	r0, r6
 8002a84:	4639      	mov	r1, r7
 8002a86:	f7fd fba3 	bl	80001d0 <__aeabi_dsub>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	ec51 0b1a 	vmov	r0, r1, d10
 8002a92:	f7fd ffe5 	bl	8000a60 <__aeabi_dcmpgt>
 8002a96:	2800      	cmp	r0, #0
 8002a98:	f47f adf8 	bne.w	800268c <__ieee754_pow+0x384>
 8002a9c:	4aa4      	ldr	r2, [pc, #656]	; (8002d30 <__ieee754_pow+0xa28>)
 8002a9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	f340 810b 	ble.w	8002cbe <__ieee754_pow+0x9b6>
 8002aa8:	151b      	asrs	r3, r3, #20
 8002aaa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8002aae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8002ab2:	fa4a f303 	asr.w	r3, sl, r3
 8002ab6:	445b      	add	r3, fp
 8002ab8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8002abc:	4e9d      	ldr	r6, [pc, #628]	; (8002d34 <__ieee754_pow+0xa2c>)
 8002abe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8002ac2:	4116      	asrs	r6, r2
 8002ac4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8002ac8:	2000      	movs	r0, #0
 8002aca:	ea23 0106 	bic.w	r1, r3, r6
 8002ace:	f1c2 0214 	rsb	r2, r2, #20
 8002ad2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8002ad6:	fa4a fa02 	asr.w	sl, sl, r2
 8002ada:	f1bb 0f00 	cmp.w	fp, #0
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	bfb8      	it	lt
 8002ae8:	f1ca 0a00 	rsblt	sl, sl, #0
 8002aec:	f7fd fb70 	bl	80001d0 <__aeabi_dsub>
 8002af0:	ec41 0b19 	vmov	d9, r0, r1
 8002af4:	4642      	mov	r2, r8
 8002af6:	464b      	mov	r3, r9
 8002af8:	ec51 0b19 	vmov	r0, r1, d9
 8002afc:	f7fd fb6a 	bl	80001d4 <__adddf3>
 8002b00:	2400      	movs	r4, #0
 8002b02:	a379      	add	r3, pc, #484	; (adr r3, 8002ce8 <__ieee754_pow+0x9e0>)
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	4620      	mov	r0, r4
 8002b0a:	460d      	mov	r5, r1
 8002b0c:	f7fd fd18 	bl	8000540 <__aeabi_dmul>
 8002b10:	ec53 2b19 	vmov	r2, r3, d9
 8002b14:	4606      	mov	r6, r0
 8002b16:	460f      	mov	r7, r1
 8002b18:	4620      	mov	r0, r4
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	f7fd fb58 	bl	80001d0 <__aeabi_dsub>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4640      	mov	r0, r8
 8002b26:	4649      	mov	r1, r9
 8002b28:	f7fd fb52 	bl	80001d0 <__aeabi_dsub>
 8002b2c:	a370      	add	r3, pc, #448	; (adr r3, 8002cf0 <__ieee754_pow+0x9e8>)
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	f7fd fd05 	bl	8000540 <__aeabi_dmul>
 8002b36:	a370      	add	r3, pc, #448	; (adr r3, 8002cf8 <__ieee754_pow+0x9f0>)
 8002b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3c:	4680      	mov	r8, r0
 8002b3e:	4689      	mov	r9, r1
 8002b40:	4620      	mov	r0, r4
 8002b42:	4629      	mov	r1, r5
 8002b44:	f7fd fcfc 	bl	8000540 <__aeabi_dmul>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4640      	mov	r0, r8
 8002b4e:	4649      	mov	r1, r9
 8002b50:	f7fd fb40 	bl	80001d4 <__adddf3>
 8002b54:	4604      	mov	r4, r0
 8002b56:	460d      	mov	r5, r1
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4630      	mov	r0, r6
 8002b5e:	4639      	mov	r1, r7
 8002b60:	f7fd fb38 	bl	80001d4 <__adddf3>
 8002b64:	4632      	mov	r2, r6
 8002b66:	463b      	mov	r3, r7
 8002b68:	4680      	mov	r8, r0
 8002b6a:	4689      	mov	r9, r1
 8002b6c:	f7fd fb30 	bl	80001d0 <__aeabi_dsub>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4620      	mov	r0, r4
 8002b76:	4629      	mov	r1, r5
 8002b78:	f7fd fb2a 	bl	80001d0 <__aeabi_dsub>
 8002b7c:	4642      	mov	r2, r8
 8002b7e:	4606      	mov	r6, r0
 8002b80:	460f      	mov	r7, r1
 8002b82:	464b      	mov	r3, r9
 8002b84:	4640      	mov	r0, r8
 8002b86:	4649      	mov	r1, r9
 8002b88:	f7fd fcda 	bl	8000540 <__aeabi_dmul>
 8002b8c:	a35c      	add	r3, pc, #368	; (adr r3, 8002d00 <__ieee754_pow+0x9f8>)
 8002b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b92:	4604      	mov	r4, r0
 8002b94:	460d      	mov	r5, r1
 8002b96:	f7fd fcd3 	bl	8000540 <__aeabi_dmul>
 8002b9a:	a35b      	add	r3, pc, #364	; (adr r3, 8002d08 <__ieee754_pow+0xa00>)
 8002b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba0:	f7fd fb16 	bl	80001d0 <__aeabi_dsub>
 8002ba4:	4622      	mov	r2, r4
 8002ba6:	462b      	mov	r3, r5
 8002ba8:	f7fd fcca 	bl	8000540 <__aeabi_dmul>
 8002bac:	a358      	add	r3, pc, #352	; (adr r3, 8002d10 <__ieee754_pow+0xa08>)
 8002bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb2:	f7fd fb0f 	bl	80001d4 <__adddf3>
 8002bb6:	4622      	mov	r2, r4
 8002bb8:	462b      	mov	r3, r5
 8002bba:	f7fd fcc1 	bl	8000540 <__aeabi_dmul>
 8002bbe:	a356      	add	r3, pc, #344	; (adr r3, 8002d18 <__ieee754_pow+0xa10>)
 8002bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc4:	f7fd fb04 	bl	80001d0 <__aeabi_dsub>
 8002bc8:	4622      	mov	r2, r4
 8002bca:	462b      	mov	r3, r5
 8002bcc:	f7fd fcb8 	bl	8000540 <__aeabi_dmul>
 8002bd0:	a353      	add	r3, pc, #332	; (adr r3, 8002d20 <__ieee754_pow+0xa18>)
 8002bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd6:	f7fd fafd 	bl	80001d4 <__adddf3>
 8002bda:	4622      	mov	r2, r4
 8002bdc:	462b      	mov	r3, r5
 8002bde:	f7fd fcaf 	bl	8000540 <__aeabi_dmul>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4640      	mov	r0, r8
 8002be8:	4649      	mov	r1, r9
 8002bea:	f7fd faf1 	bl	80001d0 <__aeabi_dsub>
 8002bee:	4604      	mov	r4, r0
 8002bf0:	460d      	mov	r5, r1
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4640      	mov	r0, r8
 8002bf8:	4649      	mov	r1, r9
 8002bfa:	f7fd fca1 	bl	8000540 <__aeabi_dmul>
 8002bfe:	2200      	movs	r2, #0
 8002c00:	ec41 0b19 	vmov	d9, r0, r1
 8002c04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c08:	4620      	mov	r0, r4
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	f7fd fae0 	bl	80001d0 <__aeabi_dsub>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	ec51 0b19 	vmov	r0, r1, d9
 8002c18:	f7fd fdbc 	bl	8000794 <__aeabi_ddiv>
 8002c1c:	4632      	mov	r2, r6
 8002c1e:	4604      	mov	r4, r0
 8002c20:	460d      	mov	r5, r1
 8002c22:	463b      	mov	r3, r7
 8002c24:	4640      	mov	r0, r8
 8002c26:	4649      	mov	r1, r9
 8002c28:	f7fd fc8a 	bl	8000540 <__aeabi_dmul>
 8002c2c:	4632      	mov	r2, r6
 8002c2e:	463b      	mov	r3, r7
 8002c30:	f7fd fad0 	bl	80001d4 <__adddf3>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4620      	mov	r0, r4
 8002c3a:	4629      	mov	r1, r5
 8002c3c:	f7fd fac8 	bl	80001d0 <__aeabi_dsub>
 8002c40:	4642      	mov	r2, r8
 8002c42:	464b      	mov	r3, r9
 8002c44:	f7fd fac4 	bl	80001d0 <__aeabi_dsub>
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	493a      	ldr	r1, [pc, #232]	; (8002d38 <__ieee754_pow+0xa30>)
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f7fd fabe 	bl	80001d0 <__aeabi_dsub>
 8002c54:	e9cd 0100 	strd	r0, r1, [sp]
 8002c58:	9b01      	ldr	r3, [sp, #4]
 8002c5a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8002c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c62:	da2f      	bge.n	8002cc4 <__ieee754_pow+0x9bc>
 8002c64:	4650      	mov	r0, sl
 8002c66:	ed9d 0b00 	vldr	d0, [sp]
 8002c6a:	f000 f9cd 	bl	8003008 <scalbn>
 8002c6e:	ec51 0b10 	vmov	r0, r1, d0
 8002c72:	ec53 2b18 	vmov	r2, r3, d8
 8002c76:	f7ff bbe0 	b.w	800243a <__ieee754_pow+0x132>
 8002c7a:	4b30      	ldr	r3, [pc, #192]	; (8002d3c <__ieee754_pow+0xa34>)
 8002c7c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8002c80:	429e      	cmp	r6, r3
 8002c82:	f77f af0b 	ble.w	8002a9c <__ieee754_pow+0x794>
 8002c86:	4b2e      	ldr	r3, [pc, #184]	; (8002d40 <__ieee754_pow+0xa38>)
 8002c88:	440b      	add	r3, r1
 8002c8a:	4303      	orrs	r3, r0
 8002c8c:	d00b      	beq.n	8002ca6 <__ieee754_pow+0x99e>
 8002c8e:	a326      	add	r3, pc, #152	; (adr r3, 8002d28 <__ieee754_pow+0xa20>)
 8002c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c94:	ec51 0b18 	vmov	r0, r1, d8
 8002c98:	f7fd fc52 	bl	8000540 <__aeabi_dmul>
 8002c9c:	a322      	add	r3, pc, #136	; (adr r3, 8002d28 <__ieee754_pow+0xa20>)
 8002c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca2:	f7ff bbca 	b.w	800243a <__ieee754_pow+0x132>
 8002ca6:	4622      	mov	r2, r4
 8002ca8:	462b      	mov	r3, r5
 8002caa:	f7fd fa91 	bl	80001d0 <__aeabi_dsub>
 8002cae:	4642      	mov	r2, r8
 8002cb0:	464b      	mov	r3, r9
 8002cb2:	f7fd fecb 	bl	8000a4c <__aeabi_dcmpge>
 8002cb6:	2800      	cmp	r0, #0
 8002cb8:	f43f aef0 	beq.w	8002a9c <__ieee754_pow+0x794>
 8002cbc:	e7e7      	b.n	8002c8e <__ieee754_pow+0x986>
 8002cbe:	f04f 0a00 	mov.w	sl, #0
 8002cc2:	e717      	b.n	8002af4 <__ieee754_pow+0x7ec>
 8002cc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	e7d2      	b.n	8002c72 <__ieee754_pow+0x96a>
 8002ccc:	491a      	ldr	r1, [pc, #104]	; (8002d38 <__ieee754_pow+0xa30>)
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7ff bb9e 	b.w	8002410 <__ieee754_pow+0x108>
 8002cd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002cd8:	f7ff bb9a 	b.w	8002410 <__ieee754_pow+0x108>
 8002cdc:	9000      	str	r0, [sp, #0]
 8002cde:	f7ff bb76 	b.w	80023ce <__ieee754_pow+0xc6>
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	f7ff bb60 	b.w	80023a8 <__ieee754_pow+0xa0>
 8002ce8:	00000000 	.word	0x00000000
 8002cec:	3fe62e43 	.word	0x3fe62e43
 8002cf0:	fefa39ef 	.word	0xfefa39ef
 8002cf4:	3fe62e42 	.word	0x3fe62e42
 8002cf8:	0ca86c39 	.word	0x0ca86c39
 8002cfc:	be205c61 	.word	0xbe205c61
 8002d00:	72bea4d0 	.word	0x72bea4d0
 8002d04:	3e663769 	.word	0x3e663769
 8002d08:	c5d26bf1 	.word	0xc5d26bf1
 8002d0c:	3ebbbd41 	.word	0x3ebbbd41
 8002d10:	af25de2c 	.word	0xaf25de2c
 8002d14:	3f11566a 	.word	0x3f11566a
 8002d18:	16bebd93 	.word	0x16bebd93
 8002d1c:	3f66c16c 	.word	0x3f66c16c
 8002d20:	5555553e 	.word	0x5555553e
 8002d24:	3fc55555 	.word	0x3fc55555
 8002d28:	c2f8f359 	.word	0xc2f8f359
 8002d2c:	01a56e1f 	.word	0x01a56e1f
 8002d30:	3fe00000 	.word	0x3fe00000
 8002d34:	000fffff 	.word	0x000fffff
 8002d38:	3ff00000 	.word	0x3ff00000
 8002d3c:	4090cbff 	.word	0x4090cbff
 8002d40:	3f6f3400 	.word	0x3f6f3400
 8002d44:	652b82fe 	.word	0x652b82fe
 8002d48:	3c971547 	.word	0x3c971547

08002d4c <__ieee754_sqrt>:
 8002d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d50:	ec55 4b10 	vmov	r4, r5, d0
 8002d54:	4e56      	ldr	r6, [pc, #344]	; (8002eb0 <__ieee754_sqrt+0x164>)
 8002d56:	43ae      	bics	r6, r5
 8002d58:	ee10 0a10 	vmov	r0, s0
 8002d5c:	ee10 3a10 	vmov	r3, s0
 8002d60:	4629      	mov	r1, r5
 8002d62:	462a      	mov	r2, r5
 8002d64:	d110      	bne.n	8002d88 <__ieee754_sqrt+0x3c>
 8002d66:	ee10 2a10 	vmov	r2, s0
 8002d6a:	462b      	mov	r3, r5
 8002d6c:	f7fd fbe8 	bl	8000540 <__aeabi_dmul>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4620      	mov	r0, r4
 8002d76:	4629      	mov	r1, r5
 8002d78:	f7fd fa2c 	bl	80001d4 <__adddf3>
 8002d7c:	4604      	mov	r4, r0
 8002d7e:	460d      	mov	r5, r1
 8002d80:	ec45 4b10 	vmov	d0, r4, r5
 8002d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d88:	2d00      	cmp	r5, #0
 8002d8a:	dc10      	bgt.n	8002dae <__ieee754_sqrt+0x62>
 8002d8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8002d90:	4330      	orrs	r0, r6
 8002d92:	d0f5      	beq.n	8002d80 <__ieee754_sqrt+0x34>
 8002d94:	b15d      	cbz	r5, 8002dae <__ieee754_sqrt+0x62>
 8002d96:	ee10 2a10 	vmov	r2, s0
 8002d9a:	462b      	mov	r3, r5
 8002d9c:	ee10 0a10 	vmov	r0, s0
 8002da0:	f7fd fa16 	bl	80001d0 <__aeabi_dsub>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	f7fd fcf4 	bl	8000794 <__aeabi_ddiv>
 8002dac:	e7e6      	b.n	8002d7c <__ieee754_sqrt+0x30>
 8002dae:	1509      	asrs	r1, r1, #20
 8002db0:	d076      	beq.n	8002ea0 <__ieee754_sqrt+0x154>
 8002db2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8002db6:	07ce      	lsls	r6, r1, #31
 8002db8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8002dbc:	bf5e      	ittt	pl
 8002dbe:	0fda      	lsrpl	r2, r3, #31
 8002dc0:	005b      	lslpl	r3, r3, #1
 8002dc2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8002dc6:	0fda      	lsrs	r2, r3, #31
 8002dc8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8002dcc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	106d      	asrs	r5, r5, #1
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	f04f 0e16 	mov.w	lr, #22
 8002dda:	4684      	mov	ip, r0
 8002ddc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002de0:	eb0c 0401 	add.w	r4, ip, r1
 8002de4:	4294      	cmp	r4, r2
 8002de6:	bfde      	ittt	le
 8002de8:	1b12      	suble	r2, r2, r4
 8002dea:	eb04 0c01 	addle.w	ip, r4, r1
 8002dee:	1840      	addle	r0, r0, r1
 8002df0:	0052      	lsls	r2, r2, #1
 8002df2:	f1be 0e01 	subs.w	lr, lr, #1
 8002df6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8002dfa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002dfe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002e02:	d1ed      	bne.n	8002de0 <__ieee754_sqrt+0x94>
 8002e04:	4671      	mov	r1, lr
 8002e06:	2720      	movs	r7, #32
 8002e08:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8002e0c:	4562      	cmp	r2, ip
 8002e0e:	eb04 060e 	add.w	r6, r4, lr
 8002e12:	dc02      	bgt.n	8002e1a <__ieee754_sqrt+0xce>
 8002e14:	d113      	bne.n	8002e3e <__ieee754_sqrt+0xf2>
 8002e16:	429e      	cmp	r6, r3
 8002e18:	d811      	bhi.n	8002e3e <__ieee754_sqrt+0xf2>
 8002e1a:	2e00      	cmp	r6, #0
 8002e1c:	eb06 0e04 	add.w	lr, r6, r4
 8002e20:	da43      	bge.n	8002eaa <__ieee754_sqrt+0x15e>
 8002e22:	f1be 0f00 	cmp.w	lr, #0
 8002e26:	db40      	blt.n	8002eaa <__ieee754_sqrt+0x15e>
 8002e28:	f10c 0801 	add.w	r8, ip, #1
 8002e2c:	eba2 020c 	sub.w	r2, r2, ip
 8002e30:	429e      	cmp	r6, r3
 8002e32:	bf88      	it	hi
 8002e34:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8002e38:	1b9b      	subs	r3, r3, r6
 8002e3a:	4421      	add	r1, r4
 8002e3c:	46c4      	mov	ip, r8
 8002e3e:	0052      	lsls	r2, r2, #1
 8002e40:	3f01      	subs	r7, #1
 8002e42:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8002e46:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8002e4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002e4e:	d1dd      	bne.n	8002e0c <__ieee754_sqrt+0xc0>
 8002e50:	4313      	orrs	r3, r2
 8002e52:	d006      	beq.n	8002e62 <__ieee754_sqrt+0x116>
 8002e54:	1c4c      	adds	r4, r1, #1
 8002e56:	bf13      	iteet	ne
 8002e58:	3101      	addne	r1, #1
 8002e5a:	3001      	addeq	r0, #1
 8002e5c:	4639      	moveq	r1, r7
 8002e5e:	f021 0101 	bicne.w	r1, r1, #1
 8002e62:	1043      	asrs	r3, r0, #1
 8002e64:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8002e68:	0849      	lsrs	r1, r1, #1
 8002e6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8002e6e:	07c2      	lsls	r2, r0, #31
 8002e70:	bf48      	it	mi
 8002e72:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8002e76:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8002e7a:	460c      	mov	r4, r1
 8002e7c:	463d      	mov	r5, r7
 8002e7e:	e77f      	b.n	8002d80 <__ieee754_sqrt+0x34>
 8002e80:	0ada      	lsrs	r2, r3, #11
 8002e82:	3815      	subs	r0, #21
 8002e84:	055b      	lsls	r3, r3, #21
 8002e86:	2a00      	cmp	r2, #0
 8002e88:	d0fa      	beq.n	8002e80 <__ieee754_sqrt+0x134>
 8002e8a:	02d7      	lsls	r7, r2, #11
 8002e8c:	d50a      	bpl.n	8002ea4 <__ieee754_sqrt+0x158>
 8002e8e:	f1c1 0420 	rsb	r4, r1, #32
 8002e92:	fa23 f404 	lsr.w	r4, r3, r4
 8002e96:	1e4d      	subs	r5, r1, #1
 8002e98:	408b      	lsls	r3, r1
 8002e9a:	4322      	orrs	r2, r4
 8002e9c:	1b41      	subs	r1, r0, r5
 8002e9e:	e788      	b.n	8002db2 <__ieee754_sqrt+0x66>
 8002ea0:	4608      	mov	r0, r1
 8002ea2:	e7f0      	b.n	8002e86 <__ieee754_sqrt+0x13a>
 8002ea4:	0052      	lsls	r2, r2, #1
 8002ea6:	3101      	adds	r1, #1
 8002ea8:	e7ef      	b.n	8002e8a <__ieee754_sqrt+0x13e>
 8002eaa:	46e0      	mov	r8, ip
 8002eac:	e7be      	b.n	8002e2c <__ieee754_sqrt+0xe0>
 8002eae:	bf00      	nop
 8002eb0:	7ff00000 	.word	0x7ff00000

08002eb4 <fabs>:
 8002eb4:	ec51 0b10 	vmov	r0, r1, d0
 8002eb8:	ee10 2a10 	vmov	r2, s0
 8002ebc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002ec0:	ec43 2b10 	vmov	d0, r2, r3
 8002ec4:	4770      	bx	lr

08002ec6 <finite>:
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	ed8d 0b00 	vstr	d0, [sp]
 8002ecc:	9801      	ldr	r0, [sp, #4]
 8002ece:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002ed2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8002ed6:	0fc0      	lsrs	r0, r0, #31
 8002ed8:	b002      	add	sp, #8
 8002eda:	4770      	bx	lr
 8002edc:	0000      	movs	r0, r0
	...

08002ee0 <nan>:
 8002ee0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8002ee8 <nan+0x8>
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	00000000 	.word	0x00000000
 8002eec:	7ff80000 	.word	0x7ff80000

08002ef0 <rint>:
 8002ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ef2:	ec51 0b10 	vmov	r0, r1, d0
 8002ef6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002efa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8002efe:	2e13      	cmp	r6, #19
 8002f00:	ee10 4a10 	vmov	r4, s0
 8002f04:	460b      	mov	r3, r1
 8002f06:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8002f0a:	dc58      	bgt.n	8002fbe <rint+0xce>
 8002f0c:	2e00      	cmp	r6, #0
 8002f0e:	da2b      	bge.n	8002f68 <rint+0x78>
 8002f10:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8002f14:	4302      	orrs	r2, r0
 8002f16:	d023      	beq.n	8002f60 <rint+0x70>
 8002f18:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8002f1c:	4302      	orrs	r2, r0
 8002f1e:	4254      	negs	r4, r2
 8002f20:	4314      	orrs	r4, r2
 8002f22:	0c4b      	lsrs	r3, r1, #17
 8002f24:	0b24      	lsrs	r4, r4, #12
 8002f26:	045b      	lsls	r3, r3, #17
 8002f28:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8002f2c:	ea44 0103 	orr.w	r1, r4, r3
 8002f30:	4b32      	ldr	r3, [pc, #200]	; (8002ffc <rint+0x10c>)
 8002f32:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002f36:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4630      	mov	r0, r6
 8002f40:	4639      	mov	r1, r7
 8002f42:	f7fd f947 	bl	80001d4 <__adddf3>
 8002f46:	e9cd 0100 	strd	r0, r1, [sp]
 8002f4a:	463b      	mov	r3, r7
 8002f4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002f50:	4632      	mov	r2, r6
 8002f52:	f7fd f93d 	bl	80001d0 <__aeabi_dsub>
 8002f56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002f5a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8002f5e:	4639      	mov	r1, r7
 8002f60:	ec41 0b10 	vmov	d0, r0, r1
 8002f64:	b003      	add	sp, #12
 8002f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f68:	4a25      	ldr	r2, [pc, #148]	; (8003000 <rint+0x110>)
 8002f6a:	4132      	asrs	r2, r6
 8002f6c:	ea01 0702 	and.w	r7, r1, r2
 8002f70:	4307      	orrs	r7, r0
 8002f72:	d0f5      	beq.n	8002f60 <rint+0x70>
 8002f74:	0851      	lsrs	r1, r2, #1
 8002f76:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8002f7a:	4314      	orrs	r4, r2
 8002f7c:	d00c      	beq.n	8002f98 <rint+0xa8>
 8002f7e:	ea23 0201 	bic.w	r2, r3, r1
 8002f82:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f86:	2e13      	cmp	r6, #19
 8002f88:	fa43 f606 	asr.w	r6, r3, r6
 8002f8c:	bf0c      	ite	eq
 8002f8e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8002f92:	2400      	movne	r4, #0
 8002f94:	ea42 0306 	orr.w	r3, r2, r6
 8002f98:	4918      	ldr	r1, [pc, #96]	; (8002ffc <rint+0x10c>)
 8002f9a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8002f9e:	4622      	mov	r2, r4
 8002fa0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	f7fd f914 	bl	80001d4 <__adddf3>
 8002fac:	e9cd 0100 	strd	r0, r1, [sp]
 8002fb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002fb4:	4622      	mov	r2, r4
 8002fb6:	462b      	mov	r3, r5
 8002fb8:	f7fd f90a 	bl	80001d0 <__aeabi_dsub>
 8002fbc:	e7d0      	b.n	8002f60 <rint+0x70>
 8002fbe:	2e33      	cmp	r6, #51	; 0x33
 8002fc0:	dd07      	ble.n	8002fd2 <rint+0xe2>
 8002fc2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8002fc6:	d1cb      	bne.n	8002f60 <rint+0x70>
 8002fc8:	ee10 2a10 	vmov	r2, s0
 8002fcc:	f7fd f902 	bl	80001d4 <__adddf3>
 8002fd0:	e7c6      	b.n	8002f60 <rint+0x70>
 8002fd2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8002fd6:	f04f 36ff 	mov.w	r6, #4294967295
 8002fda:	40d6      	lsrs	r6, r2
 8002fdc:	4230      	tst	r0, r6
 8002fde:	d0bf      	beq.n	8002f60 <rint+0x70>
 8002fe0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8002fe4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8002fe8:	bf1f      	itttt	ne
 8002fea:	ea24 0101 	bicne.w	r1, r4, r1
 8002fee:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8002ff2:	fa44 f202 	asrne.w	r2, r4, r2
 8002ff6:	ea41 0402 	orrne.w	r4, r1, r2
 8002ffa:	e7cd      	b.n	8002f98 <rint+0xa8>
 8002ffc:	08003168 	.word	0x08003168
 8003000:	000fffff 	.word	0x000fffff
 8003004:	00000000 	.word	0x00000000

08003008 <scalbn>:
 8003008:	b570      	push	{r4, r5, r6, lr}
 800300a:	ec55 4b10 	vmov	r4, r5, d0
 800300e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8003012:	4606      	mov	r6, r0
 8003014:	462b      	mov	r3, r5
 8003016:	b99a      	cbnz	r2, 8003040 <scalbn+0x38>
 8003018:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800301c:	4323      	orrs	r3, r4
 800301e:	d036      	beq.n	800308e <scalbn+0x86>
 8003020:	4b39      	ldr	r3, [pc, #228]	; (8003108 <scalbn+0x100>)
 8003022:	4629      	mov	r1, r5
 8003024:	ee10 0a10 	vmov	r0, s0
 8003028:	2200      	movs	r2, #0
 800302a:	f7fd fa89 	bl	8000540 <__aeabi_dmul>
 800302e:	4b37      	ldr	r3, [pc, #220]	; (800310c <scalbn+0x104>)
 8003030:	429e      	cmp	r6, r3
 8003032:	4604      	mov	r4, r0
 8003034:	460d      	mov	r5, r1
 8003036:	da10      	bge.n	800305a <scalbn+0x52>
 8003038:	a32b      	add	r3, pc, #172	; (adr r3, 80030e8 <scalbn+0xe0>)
 800303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303e:	e03a      	b.n	80030b6 <scalbn+0xae>
 8003040:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003044:	428a      	cmp	r2, r1
 8003046:	d10c      	bne.n	8003062 <scalbn+0x5a>
 8003048:	ee10 2a10 	vmov	r2, s0
 800304c:	4620      	mov	r0, r4
 800304e:	4629      	mov	r1, r5
 8003050:	f7fd f8c0 	bl	80001d4 <__adddf3>
 8003054:	4604      	mov	r4, r0
 8003056:	460d      	mov	r5, r1
 8003058:	e019      	b.n	800308e <scalbn+0x86>
 800305a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800305e:	460b      	mov	r3, r1
 8003060:	3a36      	subs	r2, #54	; 0x36
 8003062:	4432      	add	r2, r6
 8003064:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003068:	428a      	cmp	r2, r1
 800306a:	dd08      	ble.n	800307e <scalbn+0x76>
 800306c:	2d00      	cmp	r5, #0
 800306e:	a120      	add	r1, pc, #128	; (adr r1, 80030f0 <scalbn+0xe8>)
 8003070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003074:	da1c      	bge.n	80030b0 <scalbn+0xa8>
 8003076:	a120      	add	r1, pc, #128	; (adr r1, 80030f8 <scalbn+0xf0>)
 8003078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800307c:	e018      	b.n	80030b0 <scalbn+0xa8>
 800307e:	2a00      	cmp	r2, #0
 8003080:	dd08      	ble.n	8003094 <scalbn+0x8c>
 8003082:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003086:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800308a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800308e:	ec45 4b10 	vmov	d0, r4, r5
 8003092:	bd70      	pop	{r4, r5, r6, pc}
 8003094:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003098:	da19      	bge.n	80030ce <scalbn+0xc6>
 800309a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800309e:	429e      	cmp	r6, r3
 80030a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80030a4:	dd0a      	ble.n	80030bc <scalbn+0xb4>
 80030a6:	a112      	add	r1, pc, #72	; (adr r1, 80030f0 <scalbn+0xe8>)
 80030a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1e2      	bne.n	8003076 <scalbn+0x6e>
 80030b0:	a30f      	add	r3, pc, #60	; (adr r3, 80030f0 <scalbn+0xe8>)
 80030b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b6:	f7fd fa43 	bl	8000540 <__aeabi_dmul>
 80030ba:	e7cb      	b.n	8003054 <scalbn+0x4c>
 80030bc:	a10a      	add	r1, pc, #40	; (adr r1, 80030e8 <scalbn+0xe0>)
 80030be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0b8      	beq.n	8003038 <scalbn+0x30>
 80030c6:	a10e      	add	r1, pc, #56	; (adr r1, 8003100 <scalbn+0xf8>)
 80030c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030cc:	e7b4      	b.n	8003038 <scalbn+0x30>
 80030ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80030d2:	3236      	adds	r2, #54	; 0x36
 80030d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80030d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80030dc:	4620      	mov	r0, r4
 80030de:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <scalbn+0x108>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	e7e8      	b.n	80030b6 <scalbn+0xae>
 80030e4:	f3af 8000 	nop.w
 80030e8:	c2f8f359 	.word	0xc2f8f359
 80030ec:	01a56e1f 	.word	0x01a56e1f
 80030f0:	8800759c 	.word	0x8800759c
 80030f4:	7e37e43c 	.word	0x7e37e43c
 80030f8:	8800759c 	.word	0x8800759c
 80030fc:	fe37e43c 	.word	0xfe37e43c
 8003100:	c2f8f359 	.word	0xc2f8f359
 8003104:	81a56e1f 	.word	0x81a56e1f
 8003108:	43500000 	.word	0x43500000
 800310c:	ffff3cb0 	.word	0xffff3cb0
 8003110:	3c900000 	.word	0x3c900000

08003114 <_init>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	bf00      	nop
 8003118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311a:	bc08      	pop	{r3}
 800311c:	469e      	mov	lr, r3
 800311e:	4770      	bx	lr

08003120 <_fini>:
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003122:	bf00      	nop
 8003124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003126:	bc08      	pop	{r3}
 8003128:	469e      	mov	lr, r3
 800312a:	4770      	bx	lr
