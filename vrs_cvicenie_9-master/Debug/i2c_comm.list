
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002404  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800258c  0800258c  0001258c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025f0  080025f0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080025f0  080025f0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025f0  080025f0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025f0  080025f0  000125f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025f4  080025f4  000125f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080025f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000020  08002614  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002614  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071d3  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016fe  00000000  00000000  0002721f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  00028920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000658  00000000  00000000  00029040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004611  00000000  00000000  00029698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006137  00000000  00000000  0002dca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000785de  00000000  00000000  00033de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ac3be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c14  00000000  00000000  000ac414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002574 	.word	0x08002574

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08002574 	.word	0x08002574

080001c8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b089      	sub	sp, #36	; 0x24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	681a      	ldr	r2, [r3, #0]
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001dc:	697b      	ldr	r3, [r7, #20]
 80001de:	fa93 f3a3 	rbit	r3, r3
 80001e2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80001e4:	693b      	ldr	r3, [r7, #16]
 80001e6:	fab3 f383 	clz	r3, r3
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	2103      	movs	r1, #3
 80001ee:	fa01 f303 	lsl.w	r3, r1, r3
 80001f2:	43db      	mvns	r3, r3
 80001f4:	401a      	ands	r2, r3
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001fa:	69fb      	ldr	r3, [r7, #28]
 80001fc:	fa93 f3a3 	rbit	r3, r3
 8000200:	61bb      	str	r3, [r7, #24]
  return(result);
 8000202:	69bb      	ldr	r3, [r7, #24]
 8000204:	fab3 f383 	clz	r3, r3
 8000208:	005b      	lsls	r3, r3, #1
 800020a:	6879      	ldr	r1, [r7, #4]
 800020c:	fa01 f303 	lsl.w	r3, r1, r3
 8000210:	431a      	orrs	r2, r3
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	601a      	str	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	3724      	adds	r7, #36	; 0x24
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr

08000222 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000222:	b480      	push	{r7}
 8000224:	b085      	sub	sp, #20
 8000226:	af00      	add	r7, sp, #0
 8000228:	60f8      	str	r0, [r7, #12]
 800022a:	60b9      	str	r1, [r7, #8]
 800022c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	685a      	ldr	r2, [r3, #4]
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	43db      	mvns	r3, r3
 8000236:	401a      	ands	r2, r3
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	6879      	ldr	r1, [r7, #4]
 800023c:	fb01 f303 	mul.w	r3, r1, r3
 8000240:	431a      	orrs	r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	605a      	str	r2, [r3, #4]
}
 8000246:	bf00      	nop
 8000248:	3714      	adds	r7, #20
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr

08000252 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000252:	b480      	push	{r7}
 8000254:	b089      	sub	sp, #36	; 0x24
 8000256:	af00      	add	r7, sp, #0
 8000258:	60f8      	str	r0, [r7, #12]
 800025a:	60b9      	str	r1, [r7, #8]
 800025c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	689a      	ldr	r2, [r3, #8]
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	fa93 f3a3 	rbit	r3, r3
 800026c:	613b      	str	r3, [r7, #16]
  return(result);
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	fab3 f383 	clz	r3, r3
 8000274:	005b      	lsls	r3, r3, #1
 8000276:	2103      	movs	r1, #3
 8000278:	fa01 f303 	lsl.w	r3, r1, r3
 800027c:	43db      	mvns	r3, r3
 800027e:	401a      	ands	r2, r3
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000284:	69fb      	ldr	r3, [r7, #28]
 8000286:	fa93 f3a3 	rbit	r3, r3
 800028a:	61bb      	str	r3, [r7, #24]
  return(result);
 800028c:	69bb      	ldr	r3, [r7, #24]
 800028e:	fab3 f383 	clz	r3, r3
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	fa01 f303 	lsl.w	r3, r1, r3
 800029a:	431a      	orrs	r2, r3
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80002a0:	bf00      	nop
 80002a2:	3724      	adds	r7, #36	; 0x24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b089      	sub	sp, #36	; 0x24
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	68da      	ldr	r2, [r3, #12]
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa93 f3a3 	rbit	r3, r3
 80002c6:	613b      	str	r3, [r7, #16]
  return(result);
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	fab3 f383 	clz	r3, r3
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	2103      	movs	r1, #3
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	43db      	mvns	r3, r3
 80002d8:	401a      	ands	r2, r3
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002de:	69fb      	ldr	r3, [r7, #28]
 80002e0:	fa93 f3a3 	rbit	r3, r3
 80002e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	fab3 f383 	clz	r3, r3
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	6879      	ldr	r1, [r7, #4]
 80002f0:	fa01 f303 	lsl.w	r3, r1, r3
 80002f4:	431a      	orrs	r2, r3
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	60da      	str	r2, [r3, #12]
}
 80002fa:	bf00      	nop
 80002fc:	3724      	adds	r7, #36	; 0x24
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000306:	b480      	push	{r7}
 8000308:	b089      	sub	sp, #36	; 0x24
 800030a:	af00      	add	r7, sp, #0
 800030c:	60f8      	str	r0, [r7, #12]
 800030e:	60b9      	str	r1, [r7, #8]
 8000310:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	6a1a      	ldr	r2, [r3, #32]
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	fa93 f3a3 	rbit	r3, r3
 8000320:	613b      	str	r3, [r7, #16]
  return(result);
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	fab3 f383 	clz	r3, r3
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	210f      	movs	r1, #15
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	401a      	ands	r2, r3
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000338:	69fb      	ldr	r3, [r7, #28]
 800033a:	fa93 f3a3 	rbit	r3, r3
 800033e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000340:	69bb      	ldr	r3, [r7, #24]
 8000342:	fab3 f383 	clz	r3, r3
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	6879      	ldr	r1, [r7, #4]
 800034a:	fa01 f303 	lsl.w	r3, r1, r3
 800034e:	431a      	orrs	r2, r3
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000354:	bf00      	nop
 8000356:	3724      	adds	r7, #36	; 0x24
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000360:	b480      	push	{r7}
 8000362:	b089      	sub	sp, #36	; 0x24
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	0a1b      	lsrs	r3, r3, #8
 8000374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	fa93 f3a3 	rbit	r3, r3
 800037c:	613b      	str	r3, [r7, #16]
  return(result);
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	fab3 f383 	clz	r3, r3
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	210f      	movs	r1, #15
 8000388:	fa01 f303 	lsl.w	r3, r1, r3
 800038c:	43db      	mvns	r3, r3
 800038e:	401a      	ands	r2, r3
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	0a1b      	lsrs	r3, r3, #8
 8000394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	fa93 f3a3 	rbit	r3, r3
 800039c:	61bb      	str	r3, [r7, #24]
  return(result);
 800039e:	69bb      	ldr	r3, [r7, #24]
 80003a0:	fab3 f383 	clz	r3, r3
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	6879      	ldr	r1, [r7, #4]
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	431a      	orrs	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80003b2:	bf00      	nop
 80003b4:	3724      	adds	r7, #36	; 0x24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b088      	sub	sp, #32
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	fa93 f3a3 	rbit	r3, r3
 80003dc:	613b      	str	r3, [r7, #16]
  return(result);
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	fab3 f383 	clz	r3, r3
 80003e4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80003e6:	e048      	b.n	800047a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	2101      	movs	r1, #1
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	4013      	ands	r3, r2
 80003f6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80003f8:	69bb      	ldr	r3, [r7, #24]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d03a      	beq.n	8000474 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	461a      	mov	r2, r3
 8000404:	69b9      	ldr	r1, [r7, #24]
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f7ff fede 	bl	80001c8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d003      	beq.n	800041c <LL_GPIO_Init+0x5e>
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	2b02      	cmp	r3, #2
 800041a:	d106      	bne.n	800042a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	461a      	mov	r2, r3
 8000422:	69b9      	ldr	r1, [r7, #24]
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f7ff ff14 	bl	8000252 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	691b      	ldr	r3, [r3, #16]
 800042e:	461a      	mov	r2, r3
 8000430:	69b9      	ldr	r1, [r7, #24]
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f7ff ff3a 	bl	80002ac <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	2b02      	cmp	r3, #2
 800043e:	d119      	bne.n	8000474 <LL_GPIO_Init+0xb6>
 8000440:	69bb      	ldr	r3, [r7, #24]
 8000442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	fa93 f3a3 	rbit	r3, r3
 800044a:	60bb      	str	r3, [r7, #8]
  return(result);
 800044c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800044e:	fab3 f383 	clz	r3, r3
 8000452:	2b07      	cmp	r3, #7
 8000454:	d807      	bhi.n	8000466 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	461a      	mov	r2, r3
 800045c:	69b9      	ldr	r1, [r7, #24]
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ff51 	bl	8000306 <LL_GPIO_SetAFPin_0_7>
 8000464:	e006      	b.n	8000474 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	461a      	mov	r2, r3
 800046c:	69b9      	ldr	r1, [r7, #24]
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff ff76 	bl	8000360 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000474:	69fb      	ldr	r3, [r7, #28]
 8000476:	3301      	adds	r3, #1
 8000478:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	69fb      	ldr	r3, [r7, #28]
 8000480:	fa22 f303 	lsr.w	r3, r2, r3
 8000484:	2b00      	cmp	r3, #0
 8000486:	d1af      	bne.n	80003e8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d003      	beq.n	8000498 <LL_GPIO_Init+0xda>
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d107      	bne.n	80004a8 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	6819      	ldr	r1, [r3, #0]
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	461a      	mov	r2, r3
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f7ff febd 	bl	8000222 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3720      	adds	r7, #32
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b083      	sub	sp, #12
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f043 0201 	orr.w	r2, r3, #1
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	601a      	str	r2, [r3, #0]
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b083      	sub	sp, #12
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f023 0201 	bic.w	r2, r3, #1
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	601a      	str	r2, [r3, #0]
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 80004f2:	b480      	push	{r7}
 80004f4:	b085      	sub	sp, #20
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	60f8      	str	r0, [r7, #12]
 80004fa:	60b9      	str	r1, [r7, #8]
 80004fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	0219      	lsls	r1, r3, #8
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	430b      	orrs	r3, r1
 800050e:	431a      	orrs	r2, r3
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	601a      	str	r2, [r3, #0]
}
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000534:	f023 0307 	bic.w	r3, r3, #7
 8000538:	68b9      	ldr	r1, [r7, #8]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	430a      	orrs	r2, r1
 800053e:	431a      	orrs	r2, r3
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	609a      	str	r2, [r3, #8]
}
 8000544:	bf00      	nop
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	609a      	str	r2, [r3, #8]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	609a      	str	r2, [r3, #8]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	683a      	ldr	r2, [r7, #0]
 800059e:	611a      	str	r2, [r3, #16]
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	431a      	orrs	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	431a      	orrs	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	605a      	str	r2, [r3, #4]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f7ff ff65 	bl	80004d2 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	6899      	ldr	r1, [r3, #8]
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	461a      	mov	r2, r3
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f7ff ff6d 	bl	80004f2 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	4619      	mov	r1, r3
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f7ff ffb6 	bl	8000590 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff ff44 	bl	80004b2 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f7ff ffa0 	bl	8000570 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	6919      	ldr	r1, [r3, #16]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	461a      	mov	r2, r3
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f7ff ff70 	bl	8000520 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	691b      	ldr	r3, [r3, #16]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d002      	beq.n	800064e <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ff81 	bl	8000550 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4619      	mov	r1, r3
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ffa9 	bl	80005ac <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4619      	mov	r1, r3
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ffb6 	bl	80005d2 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	683a      	ldr	r2, [r7, #0]
 80006ee:	639a      	str	r2, [r3, #56]	; 0x38
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	683a      	ldr	r2, [r7, #0]
 8000726:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	683a      	ldr	r2, [r7, #0]
 800075e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	f043 0201 	orr.w	r2, r3, #1
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	615a      	str	r2, [r3, #20]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a2f      	ldr	r2, [pc, #188]	; (8000860 <LL_TIM_Init+0xd4>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d007      	beq.n	80007b8 <LL_TIM_Init+0x2c>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007ae:	d003      	beq.n	80007b8 <LL_TIM_Init+0x2c>
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a2c      	ldr	r2, [pc, #176]	; (8000864 <LL_TIM_Init+0xd8>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d106      	bne.n	80007c6 <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4a25      	ldr	r2, [pc, #148]	; (8000860 <LL_TIM_Init+0xd4>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d013      	beq.n	80007f6 <LL_TIM_Init+0x6a>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007d4:	d00f      	beq.n	80007f6 <LL_TIM_Init+0x6a>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a22      	ldr	r2, [pc, #136]	; (8000864 <LL_TIM_Init+0xd8>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d00b      	beq.n	80007f6 <LL_TIM_Init+0x6a>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a21      	ldr	r2, [pc, #132]	; (8000868 <LL_TIM_Init+0xdc>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d007      	beq.n	80007f6 <LL_TIM_Init+0x6a>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a20      	ldr	r2, [pc, #128]	; (800086c <LL_TIM_Init+0xe0>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d003      	beq.n	80007f6 <LL_TIM_Init+0x6a>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a1f      	ldr	r2, [pc, #124]	; (8000870 <LL_TIM_Init+0xe4>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d106      	bne.n	8000804 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	4313      	orrs	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	4619      	mov	r1, r3
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff3b 	bl	800068c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	4619      	mov	r1, r3
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ff27 	bl	8000670 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <LL_TIM_Init+0xd4>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d00b      	beq.n	8000842 <LL_TIM_Init+0xb6>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <LL_TIM_Init+0xdc>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d007      	beq.n	8000842 <LL_TIM_Init+0xb6>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <LL_TIM_Init+0xe0>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d003      	beq.n	8000842 <LL_TIM_Init+0xb6>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <LL_TIM_Init+0xe4>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d105      	bne.n	800084e <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	7c1b      	ldrb	r3, [r3, #16]
 8000846:	4619      	mov	r1, r3
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff2d 	bl	80006a8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff ff8c 	bl	800076c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40012c00 	.word	0x40012c00
 8000864:	40000400 	.word	0x40000400
 8000868:	40014000 	.word	0x40014000
 800086c:	40014400 	.word	0x40014400
 8000870:	40014800 	.word	0x40014800

08000874 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8000880:	2301      	movs	r3, #1
 8000882:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800088a:	d045      	beq.n	8000918 <LL_TIM_OC_Init+0xa4>
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000892:	d848      	bhi.n	8000926 <LL_TIM_OC_Init+0xb2>
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800089a:	d036      	beq.n	800090a <LL_TIM_OC_Init+0x96>
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008a2:	d840      	bhi.n	8000926 <LL_TIM_OC_Init+0xb2>
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008aa:	d027      	beq.n	80008fc <LL_TIM_OC_Init+0x88>
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008b2:	d838      	bhi.n	8000926 <LL_TIM_OC_Init+0xb2>
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008ba:	d018      	beq.n	80008ee <LL_TIM_OC_Init+0x7a>
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008c2:	d830      	bhi.n	8000926 <LL_TIM_OC_Init+0xb2>
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d003      	beq.n	80008d2 <LL_TIM_OC_Init+0x5e>
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	2b10      	cmp	r3, #16
 80008ce:	d007      	beq.n	80008e0 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80008d0:	e029      	b.n	8000926 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	68f8      	ldr	r0, [r7, #12]
 80008d6:	f000 f82d 	bl	8000934 <OC1Config>
 80008da:	4603      	mov	r3, r0
 80008dc:	75fb      	strb	r3, [r7, #23]
      break;
 80008de:	e023      	b.n	8000928 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80008e0:	6879      	ldr	r1, [r7, #4]
 80008e2:	68f8      	ldr	r0, [r7, #12]
 80008e4:	f000 f8a6 	bl	8000a34 <OC2Config>
 80008e8:	4603      	mov	r3, r0
 80008ea:	75fb      	strb	r3, [r7, #23]
      break;
 80008ec:	e01c      	b.n	8000928 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f000 f923 	bl	8000b3c <OC3Config>
 80008f6:	4603      	mov	r3, r0
 80008f8:	75fb      	strb	r3, [r7, #23]
      break;
 80008fa:	e015      	b.n	8000928 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80008fc:	6879      	ldr	r1, [r7, #4]
 80008fe:	68f8      	ldr	r0, [r7, #12]
 8000900:	f000 f9a0 	bl	8000c44 <OC4Config>
 8000904:	4603      	mov	r3, r0
 8000906:	75fb      	strb	r3, [r7, #23]
      break;
 8000908:	e00e      	b.n	8000928 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	68f8      	ldr	r0, [r7, #12]
 800090e:	f000 fa05 	bl	8000d1c <OC5Config>
 8000912:	4603      	mov	r3, r0
 8000914:	75fb      	strb	r3, [r7, #23]
      break;
 8000916:	e007      	b.n	8000928 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	68f8      	ldr	r0, [r7, #12]
 800091c:	f000 fa60 	bl	8000de0 <OC6Config>
 8000920:	4603      	mov	r3, r0
 8000922:	75fb      	strb	r3, [r7, #23]
      break;
 8000924:	e000      	b.n	8000928 <LL_TIM_OC_Init+0xb4>
      break;
 8000926:	bf00      	nop
  }

  return result;
 8000928:	7dfb      	ldrb	r3, [r7, #23]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6a1b      	ldr	r3, [r3, #32]
 800094e:	f023 0201 	bic.w	r2, r3, #1
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6a1b      	ldr	r3, [r3, #32]
 800095a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f023 0303 	bic.w	r3, r3, #3
 800096e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800097a:	683a      	ldr	r2, [r7, #0]
 800097c:	6812      	ldr	r2, [r2, #0]
 800097e:	4313      	orrs	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	f023 0202 	bic.w	r2, r3, #2
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	691b      	ldr	r3, [r3, #16]
 800098c:	4313      	orrs	r3, r2
 800098e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	f023 0201 	bic.w	r2, r3, #1
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	4313      	orrs	r3, r2
 800099c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a20      	ldr	r2, [pc, #128]	; (8000a24 <OC1Config+0xf0>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d00b      	beq.n	80009be <OC1Config+0x8a>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a1f      	ldr	r2, [pc, #124]	; (8000a28 <OC1Config+0xf4>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d007      	beq.n	80009be <OC1Config+0x8a>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a1e      	ldr	r2, [pc, #120]	; (8000a2c <OC1Config+0xf8>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d003      	beq.n	80009be <OC1Config+0x8a>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a1d      	ldr	r2, [pc, #116]	; (8000a30 <OC1Config+0xfc>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d11e      	bne.n	80009fc <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	f023 0208 	bic.w	r2, r3, #8
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	4313      	orrs	r3, r2
 80009cc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	f023 0204 	bic.w	r2, r3, #4
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4313      	orrs	r3, r2
 80009dc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	4313      	orrs	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff fe58 	bl	80006c4 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	697a      	ldr	r2, [r7, #20]
 8000a18:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000a1a:	2300      	movs	r3, #0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40012c00 	.word	0x40012c00
 8000a28:	40014000 	.word	0x40014000
 8000a2c:	40014400 	.word	0x40014400
 8000a30:	40014800 	.word	0x40014800

08000a34 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6a1b      	ldr	r3, [r3, #32]
 8000a4e:	f023 0210 	bic.w	r2, r3, #16
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a1b      	ldr	r3, [r3, #32]
 8000a5a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000a7a:	683a      	ldr	r2, [r7, #0]
 8000a7c:	6812      	ldr	r2, [r2, #0]
 8000a7e:	0212      	lsls	r2, r2, #8
 8000a80:	4313      	orrs	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	f023 0220 	bic.w	r2, r3, #32
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	011b      	lsls	r3, r3, #4
 8000a90:	4313      	orrs	r3, r2
 8000a92:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	f023 0210 	bic.w	r2, r3, #16
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	011b      	lsls	r3, r3, #4
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <OC2Config+0xf8>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d00b      	beq.n	8000ac4 <OC2Config+0x90>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a20      	ldr	r2, [pc, #128]	; (8000b30 <OC2Config+0xfc>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d007      	beq.n	8000ac4 <OC2Config+0x90>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a1f      	ldr	r2, [pc, #124]	; (8000b34 <OC2Config+0x100>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d003      	beq.n	8000ac4 <OC2Config+0x90>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a1e      	ldr	r2, [pc, #120]	; (8000b38 <OC2Config+0x104>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d11f      	bne.n	8000b04 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	019b      	lsls	r3, r3, #6
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	019b      	lsls	r3, r3, #6
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	4619      	mov	r1, r3
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fde2 	bl	80006e0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	697a      	ldr	r2, [r7, #20]
 8000b20:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40012c00 	.word	0x40012c00
 8000b30:	40014000 	.word	0x40014000
 8000b34:	40014400 	.word	0x40014400
 8000b38:	40014800 	.word	0x40014800

08000b3c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6a1b      	ldr	r3, [r3, #32]
 8000b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6a1b      	ldr	r3, [r3, #32]
 8000b62:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f023 0303 	bic.w	r3, r3, #3
 8000b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	6812      	ldr	r2, [r2, #0]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	4313      	orrs	r3, r2
 8000b98:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	021b      	lsls	r3, r3, #8
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a21      	ldr	r2, [pc, #132]	; (8000c34 <OC3Config+0xf8>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d00b      	beq.n	8000bca <OC3Config+0x8e>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a20      	ldr	r2, [pc, #128]	; (8000c38 <OC3Config+0xfc>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d007      	beq.n	8000bca <OC3Config+0x8e>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a1f      	ldr	r2, [pc, #124]	; (8000c3c <OC3Config+0x100>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d003      	beq.n	8000bca <OC3Config+0x8e>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <OC3Config+0x104>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d11f      	bne.n	8000c0a <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	029b      	lsls	r3, r3, #10
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	029b      	lsls	r3, r3, #10
 8000be6:	4313      	orrs	r3, r2
 8000be8:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	011b      	lsls	r3, r3, #4
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	69db      	ldr	r3, [r3, #28]
 8000c04:	015b      	lsls	r3, r3, #5
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff fd6d 	bl	80006fc <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40012c00 	.word	0x40012c00
 8000c38:	40014000 	.word	0x40014000
 8000c3c:	40014400 	.word	0x40014400
 8000c40:	40014800 	.word	0x40014800

08000c44 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a1b      	ldr	r3, [r3, #32]
 8000c5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a1b      	ldr	r3, [r3, #32]
 8000c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c7e:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000c8a:	683a      	ldr	r2, [r7, #0]
 8000c8c:	6812      	ldr	r2, [r2, #0]
 8000c8e:	0212      	lsls	r2, r2, #8
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	031b      	lsls	r3, r3, #12
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	031b      	lsls	r3, r3, #12
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a15      	ldr	r2, [pc, #84]	; (8000d0c <OC4Config+0xc8>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d00b      	beq.n	8000cd4 <OC4Config+0x90>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <OC4Config+0xcc>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d007      	beq.n	8000cd4 <OC4Config+0x90>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <OC4Config+0xd0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d003      	beq.n	8000cd4 <OC4Config+0x90>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <OC4Config+0xd4>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d107      	bne.n	8000ce4 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	019b      	lsls	r3, r3, #6
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff fd0e 	bl	8000718 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40012c00 	.word	0x40012c00
 8000d10:	40014000 	.word	0x40014000
 8000d14:	40014400 	.word	0x40014400
 8000d18:	40014800 	.word	0x40014800

08000d1c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a1b      	ldr	r3, [r3, #32]
 8000d32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a1b      	ldr	r3, [r3, #32]
 8000d3e:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d44:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	6812      	ldr	r2, [r2, #0]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	691b      	ldr	r3, [r3, #16]
 8000d62:	041b      	lsls	r3, r3, #16
 8000d64:	4313      	orrs	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	041b      	lsls	r3, r3, #16
 8000d74:	4313      	orrs	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a15      	ldr	r2, [pc, #84]	; (8000dd0 <OC5Config+0xb4>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d00b      	beq.n	8000d98 <OC5Config+0x7c>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <OC5Config+0xb8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d007      	beq.n	8000d98 <OC5Config+0x7c>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <OC5Config+0xbc>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d003      	beq.n	8000d98 <OC5Config+0x7c>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <OC5Config+0xc0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d109      	bne.n	8000dac <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	4619      	mov	r1, r3
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff fcbb 	bl	8000734 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68ba      	ldr	r2, [r7, #8]
 8000dc2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40012c00 	.word	0x40012c00
 8000dd4:	40014000 	.word	0x40014000
 8000dd8:	40014400 	.word	0x40014400
 8000ddc:	40014800 	.word	0x40014800

08000de0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a1b      	ldr	r3, [r3, #32]
 8000df6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a1b      	ldr	r3, [r3, #32]
 8000e02:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	6812      	ldr	r2, [r2, #0]
 8000e18:	0212      	lsls	r2, r2, #8
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	051b      	lsls	r3, r3, #20
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	051b      	lsls	r3, r3, #20
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <OC6Config+0xb4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d00b      	beq.n	8000e5e <OC6Config+0x7e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a13      	ldr	r2, [pc, #76]	; (8000e98 <OC6Config+0xb8>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d007      	beq.n	8000e5e <OC6Config+0x7e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <OC6Config+0xbc>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d003      	beq.n	8000e5e <OC6Config+0x7e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <OC6Config+0xc0>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d109      	bne.n	8000e72 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	029b      	lsls	r3, r3, #10
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff fc66 	bl	8000750 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40012c00 	.word	0x40012c00
 8000e98:	40014000 	.word	0x40014000
 8000e9c:	40014400 	.word	0x40014400
 8000ea0:	40014800 	.word	0x40014800

08000ea4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <LL_InitTick+0x30>)
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <LL_InitTick+0x30>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <LL_InitTick+0x30>)
 8000ec4:	2205      	movs	r2, #5
 8000ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e010 	.word	0xe000e010

08000ed8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000ee0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ffdd 	bl	8000ea4 <LL_InitTick>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <LL_mDelay+0x48>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000f02:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0a:	d00c      	beq.n	8000f26 <LL_mDelay+0x32>
  {
    Delay++;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000f12:	e008      	b.n	8000f26 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <LL_mDelay+0x48>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d002      	beq.n	8000f26 <LL_mDelay+0x32>
    {
      Delay--;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f3      	bne.n	8000f14 <LL_mDelay+0x20>
    }
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e010 	.word	0xe000e010

08000f40 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <LL_SetSystemCoreClock+0x1c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000014 	.word	0x20000014

08000f60 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	619a      	str	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_TIM_ClearFlag_UPDATE>:
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f06f 0201 	mvn.w	r2, #1
 8000fa6:	611a      	str	r2, [r3, #16]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	bf0c      	ite	eq
 8000fc8:	2301      	moveq	r3, #1
 8000fca:	2300      	movne	r3, #0
 8000fcc:	b2db      	uxtb	r3, r3
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <resetSegments>:
void updateDisplay(void);
void setDigit(uint8_t pos);

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000fe0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe8:	f7ff ffba 	bl	8000f60 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000fec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff4:	f7ff ffb4 	bl	8000f60 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <resetSegments+0x58>)
 8000ffc:	f7ff ffb0 	bl	8000f60 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001000:	2120      	movs	r1, #32
 8001002:	480c      	ldr	r0, [pc, #48]	; (8001034 <resetSegments+0x58>)
 8001004:	f7ff ffac 	bl	8000f60 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001008:	2110      	movs	r1, #16
 800100a:	480a      	ldr	r0, [pc, #40]	; (8001034 <resetSegments+0x58>)
 800100c:	f7ff ffa8 	bl	8000f60 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001010:	2101      	movs	r1, #1
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f7ff ffa3 	bl	8000f60 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 800101a:	2102      	movs	r1, #2
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f7ff ff9e 	bl	8000f60 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001024:	2108      	movs	r1, #8
 8001026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102a:	f7ff ff99 	bl	8000f60 <LL_GPIO_SetOutputPin>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	48000400 	.word	0x48000400

08001038 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 800103c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001044:	f7ff ff9a 	bl	8000f7c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001048:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001050:	f7ff ff94 	bl	8000f7c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001054:	2102      	movs	r1, #2
 8001056:	480e      	ldr	r0, [pc, #56]	; (8001090 <setSegments+0x58>)
 8001058:	f7ff ff90 	bl	8000f7c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 800105c:	2120      	movs	r1, #32
 800105e:	480c      	ldr	r0, [pc, #48]	; (8001090 <setSegments+0x58>)
 8001060:	f7ff ff8c 	bl	8000f7c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001064:	2110      	movs	r1, #16
 8001066:	480a      	ldr	r0, [pc, #40]	; (8001090 <setSegments+0x58>)
 8001068:	f7ff ff88 	bl	8000f7c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 800106c:	2101      	movs	r1, #1
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f7ff ff83 	bl	8000f7c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001076:	2102      	movs	r1, #2
 8001078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107c:	f7ff ff7e 	bl	8000f7c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001080:	2108      	movs	r1, #8
 8001082:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001086:	f7ff ff79 	bl	8000f7c <LL_GPIO_ResetOutputPin>
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	48000400 	.word	0x48000400

08001094 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8001098:	2104      	movs	r1, #4
 800109a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109e:	f7ff ff6d 	bl	8000f7c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 80010a2:	2120      	movs	r1, #32
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a8:	f7ff ff68 	bl	8000f7c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80010ac:	2110      	movs	r1, #16
 80010ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b2:	f7ff ff63 	bl	8000f7c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 80010b6:	2140      	movs	r1, #64	; 0x40
 80010b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010bc:	f7ff ff5e 	bl	8000f7c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c6:	f7ff ff59 	bl	8000f7c <LL_GPIO_ResetOutputPin>
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}

080010ce <setDigits>:


/* Reset (turn-on) all digits*/
void setDigits(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 80010d2:	2120      	movs	r1, #32
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d8:	f7ff ff42 	bl	8000f60 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 80010dc:	2110      	movs	r1, #16
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f7ff ff3d 	bl	8000f60 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 80010e6:	2140      	movs	r1, #64	; 0x40
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f7ff ff38 	bl	8000f60 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 80010f0:	2104      	movs	r1, #4
 80010f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f6:	f7ff ff33 	bl	8000f60 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001100:	f7ff ff2e 	bl	8000f60 <LL_GPIO_SetOutputPin>
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <setA>:
    0x13, 0x3B, 0x6D
};
/* Functions to display numbers 0 - 9 */


void setA(void){
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800110c:	2102      	movs	r1, #2
 800110e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001112:	f7ff ff33 	bl	8000f7c <LL_GPIO_ResetOutputPin>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}

0800111a <setB>:

void setB(void){
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800111e:	2101      	movs	r1, #1
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f7ff ff2a 	bl	8000f7c <LL_GPIO_ResetOutputPin>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <setC>:

void setC(void){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001130:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f7ff ff20 	bl	8000f7c <LL_GPIO_ResetOutputPin>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <setD>:

void setD(void){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001144:	2120      	movs	r1, #32
 8001146:	4802      	ldr	r0, [pc, #8]	; (8001150 <setD+0x10>)
 8001148:	f7ff ff18 	bl	8000f7c <LL_GPIO_ResetOutputPin>
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	48000400 	.word	0x48000400

08001154 <setE>:

void setE(void){
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001158:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f7ff ff0c 	bl	8000f7c <LL_GPIO_ResetOutputPin>
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <setF>:

void setF(void){
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800116c:	2108      	movs	r1, #8
 800116e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001172:	f7ff ff03 	bl	8000f7c <LL_GPIO_ResetOutputPin>
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <setG>:

void setG(void){
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001180:	2110      	movs	r1, #16
 8001182:	4802      	ldr	r0, [pc, #8]	; (800118c <setG+0x10>)
 8001184:	f7ff fefa 	bl	8000f7c <LL_GPIO_ResetOutputPin>
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	48000400 	.word	0x48000400

08001190 <displayNumber>:
 *
 * Pre-process number before it is displayed. Extract digits of the number
 */

void displayNumber(char char1,char char2,char char3,char char4)
{
 8001190:	b490      	push	{r4, r7}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	4604      	mov	r4, r0
 8001198:	4608      	mov	r0, r1
 800119a:	4611      	mov	r1, r2
 800119c:	461a      	mov	r2, r3
 800119e:	4623      	mov	r3, r4
 80011a0:	71fb      	strb	r3, [r7, #7]
 80011a2:	4603      	mov	r3, r0
 80011a4:	71bb      	strb	r3, [r7, #6]
 80011a6:	460b      	mov	r3, r1
 80011a8:	717b      	strb	r3, [r7, #5]
 80011aa:	4613      	mov	r3, r2
 80011ac:	713b      	strb	r3, [r7, #4]
	uint8_t i = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]


	dDisplayData.digit_num = 4;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <displayNumber+0x50>)
 80011b4:	2204      	movs	r2, #4
 80011b6:	711a      	strb	r2, [r3, #4]
	dDisplayData.resolution = 0;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <displayNumber+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	719a      	strb	r2, [r3, #6]

	dDisplayData.dispText[0] = char1;
 80011be:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <displayNumber+0x50>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	71d3      	strb	r3, [r2, #7]
	dDisplayData.dispText[1] = char2;
 80011c4:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <displayNumber+0x50>)
 80011c6:	79bb      	ldrb	r3, [r7, #6]
 80011c8:	7213      	strb	r3, [r2, #8]
	dDisplayData.dispText[2] = char3;
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <displayNumber+0x50>)
 80011cc:	797b      	ldrb	r3, [r7, #5]
 80011ce:	7253      	strb	r3, [r2, #9]
	dDisplayData.dispText[3] = char4;
 80011d0:	4a03      	ldr	r2, [pc, #12]	; (80011e0 <displayNumber+0x50>)
 80011d2:	793b      	ldrb	r3, [r7, #4]
 80011d4:	7293      	strb	r3, [r2, #10]
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc90      	pop	{r4, r7}
 80011de:	4770      	bx	lr
 80011e0:	2000003c 	.word	0x2000003c

080011e4 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d823      	bhi.n	800123c <setDigit+0x58>
 80011f4:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <setDigit+0x18>)
 80011f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fa:	bf00      	nop
 80011fc:	0800120d 	.word	0x0800120d
 8001200:	08001219 	.word	0x08001219
 8001204:	08001225 	.word	0x08001225
 8001208:	08001231 	.word	0x08001231
	{
		case 0:
			DIGIT_4_ON;
 800120c:	2104      	movs	r1, #4
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f7ff fea5 	bl	8000f60 <LL_GPIO_SetOutputPin>
			break;
 8001216:	e011      	b.n	800123c <setDigit+0x58>
		case 1:
			DIGIT_3_ON;
 8001218:	2140      	movs	r1, #64	; 0x40
 800121a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121e:	f7ff fe9f 	bl	8000f60 <LL_GPIO_SetOutputPin>
			break;
 8001222:	e00b      	b.n	800123c <setDigit+0x58>
		case 2:
			DIGIT_2_ON;
 8001224:	2110      	movs	r1, #16
 8001226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122a:	f7ff fe99 	bl	8000f60 <LL_GPIO_SetOutputPin>
			break;
 800122e:	e005      	b.n	800123c <setDigit+0x58>
		case 3:
			DIGIT_1_ON;
 8001230:	2120      	movs	r1, #32
 8001232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001236:	f7ff fe93 	bl	8000f60 <LL_GPIO_SetOutputPin>
			break;
 800123a:	bf00      	nop
	}
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <decode_7seg>:
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */

unsigned char decode_7seg(unsigned char chr)
{ /* Implementation uses ASCII */
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
    if (chr > (unsigned char)'z')
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b7a      	cmp	r3, #122	; 0x7a
 8001252:	d901      	bls.n	8001258 <decode_7seg+0x14>
        return 0x00;
 8001254:	2300      	movs	r3, #0
 8001256:	e003      	b.n	8001260 <decode_7seg+0x1c>
    return seven_seg_digits_decode_abcdefg[chr - '0'];
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	3b30      	subs	r3, #48	; 0x30
 800125c:	4a03      	ldr	r2, [pc, #12]	; (800126c <decode_7seg+0x28>)
 800125e:	5cd3      	ldrb	r3, [r2, r3]
    /* or
	return seven_seg_digits_decode_gfedcba[chr - '0']; */
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	0800258c 	.word	0x0800258c

08001270 <updateDisplay>:

#define CHECK_BIT(var,pos) ((var) & (1<<(pos)))
void updateDisplay(void)
{
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	e058      	b.n	800132e <updateDisplay+0xbe>
	{
		setDigit(i);
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ffb0 	bl	80011e4 <setDigit>
		unsigned char seg7 = decode_7seg(dDisplayData.dispText[i]);
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4a2e      	ldr	r2, [pc, #184]	; (8001340 <updateDisplay+0xd0>)
 8001288:	4413      	add	r3, r2
 800128a:	79db      	ldrb	r3, [r3, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ffd9 	bl	8001244 <decode_7seg>
 8001292:	4603      	mov	r3, r0
 8001294:	71bb      	strb	r3, [r7, #6]
		if(CHECK_BIT(seg7,6)){
 8001296:	79bb      	ldrb	r3, [r7, #6]
 8001298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <updateDisplay+0x34>
			setA();}
 80012a0:	f7ff ff32 	bl	8001108 <setA>
		if(CHECK_BIT(seg7,5)){
 80012a4:	79bb      	ldrb	r3, [r7, #6]
 80012a6:	f003 0320 	and.w	r3, r3, #32
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <updateDisplay+0x42>
			setB();}
 80012ae:	f7ff ff34 	bl	800111a <setB>
		if(CHECK_BIT(seg7,4)){
 80012b2:	79bb      	ldrb	r3, [r7, #6]
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <updateDisplay+0x50>
			setC();}
 80012bc:	f7ff ff36 	bl	800112c <setC>
		if(CHECK_BIT(seg7,3)){
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <updateDisplay+0x5e>
			setD();}
 80012ca:	f7ff ff39 	bl	8001140 <setD>
		if(CHECK_BIT(seg7,2)){
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <updateDisplay+0x6c>
			setE();}
 80012d8:	f7ff ff3c 	bl	8001154 <setE>
		if(CHECK_BIT(seg7,1)){
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <updateDisplay+0x7a>
			setF();}
 80012e6:	f7ff ff3f 	bl	8001168 <setF>
		if(CHECK_BIT(seg7,0)){
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <updateDisplay+0x88>
			setG();}
 80012f4:	f7ff ff42 	bl	800117c <setG>

		disp_time_saved = disp_time;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <updateDisplay+0xd4>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	4912      	ldr	r1, [pc, #72]	; (8001348 <updateDisplay+0xd8>)
 8001300:	e9c1 2300 	strd	r2, r3, [r1]
		while((disp_time_saved + 2) > disp_time){};
 8001304:	bf00      	nop
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <updateDisplay+0xd8>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	1c94      	adds	r4, r2, #2
 800130e:	f143 0500 	adc.w	r5, r3, #0
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <updateDisplay+0xd4>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	42ab      	cmp	r3, r5
 800131a:	bf08      	it	eq
 800131c:	42a2      	cmpeq	r2, r4
 800131e:	d3f2      	bcc.n	8001306 <updateDisplay+0x96>

		resetDigits();
 8001320:	f7ff feb8 	bl	8001094 <resetDigits>
		resetSegments();
 8001324:	f7ff fe5a 	bl	8000fdc <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	3301      	adds	r3, #1
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b03      	cmp	r3, #3
 8001332:	d9a3      	bls.n	800127c <updateDisplay+0xc>
	}
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bdb0      	pop	{r4, r5, r7, pc}
 800133e:	bf00      	nop
 8001340:	2000003c 	.word	0x2000003c
 8001344:	20000048 	.word	0x20000048
 8001348:	20000050 	.word	0x20000050

0800134c <TIM3_IRQHandler>:

//Update displayed data and keep display ON
void TIM3_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8001350:	4806      	ldr	r0, [pc, #24]	; (800136c <TIM3_IRQHandler+0x20>)
 8001352:	f7ff fe2f 	bl	8000fb4 <LL_TIM_IsActiveFlag_UPDATE>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <TIM3_IRQHandler+0x14>
	{
		updateDisplay();
 800135c:	f7ff ff88 	bl	8001270 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <TIM3_IRQHandler+0x20>)
 8001362:	f7ff fe19 	bl	8000f98 <LL_TIM_ClearFlag_UPDATE>
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40000400 	.word	0x40000400

08001370 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	4907      	ldr	r1, [pc, #28]	; (800139c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4313      	orrs	r3, r2
 8001382:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001386:	695a      	ldr	r2, [r3, #20]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4013      	ands	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40021000 	.word	0x40021000

080013a0 <LL_GPIO_ResetOutputPin>:
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	463b      	mov	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80013d2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80013d6:	f7ff ffcb 	bl	8001370 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80013da:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80013de:	f7ff ffc7 	bl	8001370 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 80013e2:	f640 111b 	movw	r1, #2331	; 0x91b
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ea:	f7ff ffd9 	bl	80013a0 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 80013ee:	2132      	movs	r1, #50	; 0x32
 80013f0:	4813      	ldr	r0, [pc, #76]	; (8001440 <MX_GPIO_Init+0x84>)
 80013f2:	f7ff ffd5 	bl	80013a0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
 80013f6:	f640 13ff 	movw	r3, #2559	; 0x9ff
 80013fa:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013fc:	2301      	movs	r3, #1
 80013fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	463b      	mov	r3, r7
 800140e:	4619      	mov	r1, r3
 8001410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001414:	f7fe ffd3 	bl	80003be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001418:	2332      	movs	r3, #50	; 0x32
 800141a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800141c:	2301      	movs	r3, #1
 800141e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	4803      	ldr	r0, [pc, #12]	; (8001440 <MX_GPIO_Init+0x84>)
 8001432:	f7fe ffc4 	bl	80003be <LL_GPIO_Init>

}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	48000400 	.word	0x48000400

08001444 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f003 021f 	and.w	r2, r3, #31
 8001470:	4907      	ldr	r1, [pc, #28]	; (8001490 <NVIC_EnableIRQ+0x30>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	2001      	movs	r0, #1
 800147a:	fa00 f202 	lsl.w	r2, r0, r2
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000e100 	.word	0xe000e100

08001494 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	da0b      	bge.n	80014c0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	; (80014e0 <NVIC_SetPriority+0x4c>)
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 030f 	and.w	r3, r3, #15
 80014b4:	3b04      	subs	r3, #4
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014be:	e009      	b.n	80014d4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	4907      	ldr	r1, [pc, #28]	; (80014e4 <NVIC_SetPriority+0x50>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00
 80014e4:	e000e100 	.word	0xe000e100

080014e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
         );
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <LL_I2C_Enable>:
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f043 0201 	orr.w	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	601a      	str	r2, [r3, #0]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <LL_I2C_EnableClockStretching>:
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	601a      	str	r2, [r3, #0]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <LL_I2C_DisableGeneralCall>:
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	601a      	str	r2, [r3, #0]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_I2C_SetOwnAddress2>:
{
 80015ae:	b480      	push	{r7}
 80015b0:	b085      	sub	sp, #20
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015c2:	f023 0306 	bic.w	r3, r3, #6
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	431a      	orrs	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	60da      	str	r2, [r3, #12]
}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_I2C_DisableOwnAddress2>:
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	60da      	str	r2, [r3, #12]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <LL_I2C_EnableIT_RX>:
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f043 0204 	orr.w	r2, r3, #4
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	601a      	str	r2, [r3, #0]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <LL_I2C_DisableIT_RX>:
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 0204 	bic.w	r2, r3, #4
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	601a      	str	r2, [r3, #0]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <LL_I2C_IsActiveFlag_TXIS>:
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b02      	cmp	r3, #2
 8001650:	bf0c      	ite	eq
 8001652:	2301      	moveq	r3, #1
 8001654:	2300      	movne	r3, #0
 8001656:	b2db      	uxtb	r3, r3
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_I2C_IsActiveFlag_RXNE>:
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b04      	cmp	r3, #4
 8001676:	bf0c      	ite	eq
 8001678:	2301      	moveq	r3, #1
 800167a:	2300      	movne	r3, #0
 800167c:	b2db      	uxtb	r3, r3
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <LL_I2C_IsActiveFlag_STOP>:
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f003 0320 	and.w	r3, r3, #32
 800169a:	2b20      	cmp	r3, #32
 800169c:	bf0c      	ite	eq
 800169e:	2301      	moveq	r3, #1
 80016a0:	2300      	movne	r3, #0
 80016a2:	b2db      	uxtb	r3, r3
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_I2C_ClearFlag_STOP>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	f043 0220 	orr.w	r2, r3, #32
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	61da      	str	r2, [r3, #28]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_I2C_EnableAutoEndMode>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	605a      	str	r2, [r3, #4]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	0d5b      	lsrs	r3, r3, #21
 8001706:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <LL_I2C_HandleTransfer+0x48>)
 800170c:	430b      	orrs	r3, r1
 800170e:	43db      	mvns	r3, r3
 8001710:	401a      	ands	r2, r3
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4319      	orrs	r1, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	041b      	lsls	r3, r3, #16
 800171c:	4319      	orrs	r1, r3
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	4319      	orrs	r1, r3
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	430b      	orrs	r3, r1
 8001726:	431a      	orrs	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	03ff7bff 	.word	0x03ff7bff

0800173c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	b2db      	uxtb	r3, r3
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	460b      	mov	r3, r1
 8001760:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001762:	78fa      	ldrb	r2, [r7, #3]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_AHB1_GRP1_EnableClock>:
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	4907      	ldr	r1, [pc, #28]	; (80017a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4313      	orrs	r3, r2
 8001786:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800178a:	695a      	ldr	r2, [r3, #20]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4013      	ands	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40021000 	.word	0x40021000

080017a4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017ae:	69da      	ldr	r2, [r3, #28]
 80017b0:	4907      	ldr	r1, [pc, #28]	; (80017d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017ba:	69da      	ldr	r2, [r3, #28]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4013      	ands	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	40021000 	.word	0x40021000

080017d4 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08e      	sub	sp, #56	; 0x38
 80017d8:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
 80017ea:	615a      	str	r2, [r3, #20]
 80017ec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	615a      	str	r2, [r3, #20]
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80017fe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001802:	f7ff ffb7 	bl	8001774 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001806:	23c0      	movs	r3, #192	; 0xc0
 8001808:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800180a:	2302      	movs	r3, #2
 800180c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001812:	2301      	movs	r3, #1
 8001814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001816:	2301      	movs	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800181a:	2304      	movs	r3, #4
 800181c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4619      	mov	r1, r3
 8001822:	4821      	ldr	r0, [pc, #132]	; (80018a8 <MX_I2C1_Init+0xd4>)
 8001824:	f7fe fdcb 	bl	80003be <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001828:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800182c:	f7ff ffba 	bl	80017a4 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001830:	f7ff fe08 	bl	8001444 <NVIC_GetPriorityGrouping>
 8001834:	4603      	mov	r3, r0
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fe54 	bl	80014e8 <NVIC_EncodePriority>
 8001840:	4603      	mov	r3, r0
 8001842:	4619      	mov	r1, r3
 8001844:	201f      	movs	r0, #31
 8001846:	f7ff fe25 	bl	8001494 <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800184a:	201f      	movs	r0, #31
 800184c:	f7ff fe08 	bl	8001460 <NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001850:	4816      	ldr	r0, [pc, #88]	; (80018ac <MX_I2C1_Init+0xd8>)
 8001852:	f7ff ff3d 	bl	80016d0 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001856:	4815      	ldr	r0, [pc, #84]	; (80018ac <MX_I2C1_Init+0xd8>)
 8001858:	f7ff fec1 	bl	80015de <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800185c:	4813      	ldr	r0, [pc, #76]	; (80018ac <MX_I2C1_Init+0xd8>)
 800185e:	f7ff fe96 	bl	800158e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001862:	4812      	ldr	r0, [pc, #72]	; (80018ac <MX_I2C1_Init+0xd8>)
 8001864:	f7ff fe83 	bl	800156e <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 800186c:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <MX_I2C1_Init+0xdc>)
 800186e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001878:	2302      	movs	r3, #2
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800187c:	2300      	movs	r3, #0
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001880:	2300      	movs	r3, #0
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	4808      	ldr	r0, [pc, #32]	; (80018ac <MX_I2C1_Init+0xd8>)
 800188c:	f7fe feb4 	bl	80005f8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001890:	2200      	movs	r2, #0
 8001892:	2100      	movs	r1, #0
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_I2C1_Init+0xd8>)
 8001896:	f7ff fe8a 	bl	80015ae <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 800189a:	4804      	ldr	r0, [pc, #16]	; (80018ac <MX_I2C1_Init+0xd8>)
 800189c:	f7ff fe57 	bl	800154e <LL_I2C_Enable>
}
 80018a0:	bf00      	nop
 80018a2:	3738      	adds	r7, #56	; 0x38
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	48000400 	.word	0x48000400
 80018ac:	40005400 	.word	0x40005400
 80018b0:	2000090e 	.word	0x2000090e

080018b4 <i2c_master_write>:


void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	4604      	mov	r4, r0
 80018bc:	4608      	mov	r0, r1
 80018be:	4611      	mov	r1, r2
 80018c0:	461a      	mov	r2, r3
 80018c2:	4623      	mov	r3, r4
 80018c4:	71fb      	strb	r3, [r7, #7]
 80018c6:	4603      	mov	r3, r0
 80018c8:	71bb      	strb	r3, [r7, #6]
 80018ca:	460b      	mov	r3, r1
 80018cc:	717b      	strb	r3, [r7, #5]
 80018ce:	4613      	mov	r3, r2
 80018d0:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 80018d2:	793b      	ldrb	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018de:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80018e0:	7979      	ldrb	r1, [r7, #5]
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <i2c_master_write+0x80>)
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2302      	movs	r3, #2
 80018ee:	2200      	movs	r2, #0
 80018f0:	4811      	ldr	r0, [pc, #68]	; (8001938 <i2c_master_write+0x84>)
 80018f2:	f7ff fefd 	bl	80016f0 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 80018f6:	79bb      	ldrb	r3, [r7, #6]
 80018f8:	4619      	mov	r1, r3
 80018fa:	480f      	ldr	r0, [pc, #60]	; (8001938 <i2c_master_write+0x84>)
 80018fc:	f7ff ff2b 	bl	8001756 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001900:	e00a      	b.n	8001918 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001902:	480d      	ldr	r0, [pc, #52]	; (8001938 <i2c_master_write+0x84>)
 8001904:	f7ff fe9b 	bl	800163e <LL_I2C_IsActiveFlag_TXIS>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d004      	beq.n	8001918 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	4619      	mov	r1, r3
 8001912:	4809      	ldr	r0, [pc, #36]	; (8001938 <i2c_master_write+0x84>)
 8001914:	f7ff ff1f 	bl	8001756 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001918:	4807      	ldr	r0, [pc, #28]	; (8001938 <i2c_master_write+0x84>)
 800191a:	f7ff feb6 	bl	800168a <LL_I2C_IsActiveFlag_STOP>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0ee      	beq.n	8001902 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001924:	4804      	ldr	r0, [pc, #16]	; (8001938 <i2c_master_write+0x84>)
 8001926:	f7ff fec3 	bl	80016b0 <LL_I2C_ClearFlag_STOP>
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bd90      	pop	{r4, r7, pc}
 8001932:	bf00      	nop
 8001934:	80002000 	.word	0x80002000
 8001938:	40005400 	.word	0x40005400

0800193c <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af02      	add	r7, sp, #8
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	4608      	mov	r0, r1
 8001946:	4611      	mov	r1, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4603      	mov	r3, r0
 800194c:	70fb      	strb	r3, [r7, #3]
 800194e:	460b      	mov	r3, r1
 8001950:	70bb      	strb	r3, [r7, #2]
 8001952:	4613      	mov	r3, r2
 8001954:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8001956:	4a30      	ldr	r2, [pc, #192]	; (8001a18 <i2c_master_read+0xdc>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6013      	str	r3, [r2, #0]

	if(read_flag)
 800195c:	7c3b      	ldrb	r3, [r7, #16]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001962:	78bb      	ldrb	r3, [r7, #2]
 8001964:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001968:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 800196a:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <i2c_master_read+0xe0>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001970:	482b      	ldr	r0, [pc, #172]	; (8001a20 <i2c_master_read+0xe4>)
 8001972:	f7ff fe44 	bl	80015fe <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001976:	7879      	ldrb	r1, [r7, #1]
 8001978:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <i2c_master_read+0xe8>)
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2301      	movs	r3, #1
 8001984:	2200      	movs	r2, #0
 8001986:	4826      	ldr	r0, [pc, #152]	; (8001a20 <i2c_master_read+0xe4>)
 8001988:	f7ff feb2 	bl	80016f0 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800198c:	e00a      	b.n	80019a4 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800198e:	4824      	ldr	r0, [pc, #144]	; (8001a20 <i2c_master_read+0xe4>)
 8001990:	f7ff fe55 	bl	800163e <LL_I2C_IsActiveFlag_TXIS>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 800199a:	78bb      	ldrb	r3, [r7, #2]
 800199c:	4619      	mov	r1, r3
 800199e:	4820      	ldr	r0, [pc, #128]	; (8001a20 <i2c_master_read+0xe4>)
 80019a0:	f7ff fed9 	bl	8001756 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80019a4:	481e      	ldr	r0, [pc, #120]	; (8001a20 <i2c_master_read+0xe4>)
 80019a6:	f7ff fe70 	bl	800168a <LL_I2C_IsActiveFlag_STOP>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0ee      	beq.n	800198e <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80019b0:	481b      	ldr	r0, [pc, #108]	; (8001a20 <i2c_master_read+0xe4>)
 80019b2:	f7ff fe7d 	bl	80016b0 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 80019b6:	bf00      	nop
 80019b8:	4819      	ldr	r0, [pc, #100]	; (8001a20 <i2c_master_read+0xe4>)
 80019ba:	f7ff fe66 	bl	800168a <LL_I2C_IsActiveFlag_STOP>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1f9      	bne.n	80019b8 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80019c4:	7879      	ldrb	r1, [r7, #1]
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <i2c_master_read+0xec>)
 80019ca:	9201      	str	r2, [sp, #4]
 80019cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d0:	9200      	str	r2, [sp, #0]
 80019d2:	2200      	movs	r2, #0
 80019d4:	4812      	ldr	r0, [pc, #72]	; (8001a20 <i2c_master_read+0xe4>)
 80019d6:	f7ff fe8b 	bl	80016f0 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80019da:	bf00      	nop
 80019dc:	4810      	ldr	r0, [pc, #64]	; (8001a20 <i2c_master_read+0xe4>)
 80019de:	f7ff fe54 	bl	800168a <LL_I2C_IsActiveFlag_STOP>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f9      	beq.n	80019dc <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <i2c_master_read+0xe4>)
 80019ea:	f7ff fe61 	bl	80016b0 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 80019ee:	480c      	ldr	r0, [pc, #48]	; (8001a20 <i2c_master_read+0xe4>)
 80019f0:	f7ff fe15 	bl	800161e <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <i2c_master_read+0xe4>)
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <i2c_master_read+0xe4>)
 80019fa:	f043 0310 	orr.w	r3, r3, #16
 80019fe:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <i2c_master_read+0xf0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <i2c_master_read+0xe0>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001a0c:	4b02      	ldr	r3, [pc, #8]	; (8001a18 <i2c_master_read+0xdc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	2000005c 	.word	0x2000005c
 8001a1c:	20000058 	.word	0x20000058
 8001a20:	40005400 	.word	0x40005400
 8001a24:	80002000 	.word	0x80002000
 8001a28:	80002400 	.word	0x80002400
 8001a2c:	20000059 	.word	0x20000059

08001a30 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8001a30:	b598      	push	{r3, r4, r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001a34:	4812      	ldr	r0, [pc, #72]	; (8001a80 <I2C1_EV_IRQHandler+0x50>)
 8001a36:	f7ff fe15 	bl	8001664 <LL_I2C_IsActiveFlag_RXNE>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d01c      	beq.n	8001a7a <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <I2C1_EV_IRQHandler+0x54>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <I2C1_EV_IRQHandler+0x58>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	1c59      	adds	r1, r3, #1
 8001a4c:	b2c8      	uxtb	r0, r1
 8001a4e:	490e      	ldr	r1, [pc, #56]	; (8001a88 <I2C1_EV_IRQHandler+0x58>)
 8001a50:	7008      	strb	r0, [r1, #0]
 8001a52:	18d4      	adds	r4, r2, r3
 8001a54:	480a      	ldr	r0, [pc, #40]	; (8001a80 <I2C1_EV_IRQHandler+0x50>)
 8001a56:	f7ff fe71 	bl	800173c <LL_I2C_ReceiveData8>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <I2C1_EV_IRQHandler+0x58>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b13      	cmp	r3, #19
 8001a66:	d903      	bls.n	8001a70 <I2C1_EV_IRQHandler+0x40>
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <I2C1_EV_IRQHandler+0x58>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	e001      	b.n	8001a74 <I2C1_EV_IRQHandler+0x44>
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <I2C1_EV_IRQHandler+0x58>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <I2C1_EV_IRQHandler+0x5c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
	}
}
 8001a7a:	bf00      	nop
 8001a7c:	bd98      	pop	{r3, r4, r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40005400 	.word	0x40005400
 8001a84:	2000005c 	.word	0x2000005c
 8001a88:	20000059 	.word	0x20000059
 8001a8c:	20000058 	.word	0x20000058

08001a90 <NVIC_SetPriorityGrouping>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <NVIC_SetPriorityGrouping+0x44>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <NVIC_SetPriorityGrouping+0x44>)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	60d3      	str	r3, [r2, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <LL_RCC_HSI_Enable+0x1c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <LL_RCC_HSI_Enable+0x1c>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000

08001af8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <LL_RCC_HSI_IsReady+0x20>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	40021000 	.word	0x40021000

08001b1c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4904      	ldr	r1, [pc, #16]	; (8001b44 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000

08001b48 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <LL_RCC_SetSysClkSource+0x24>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f023 0203 	bic.w	r2, r3, #3
 8001b58:	4904      	ldr	r1, [pc, #16]	; (8001b6c <LL_RCC_SetSysClkSource+0x24>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	40021000 	.word	0x40021000

08001b70 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <LL_RCC_GetSysClkSource+0x18>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 030c 	and.w	r3, r3, #12
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000

08001b8c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <LL_RCC_SetAHBPrescaler+0x24>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9c:	4904      	ldr	r1, [pc, #16]	; (8001bb0 <LL_RCC_SetAHBPrescaler+0x24>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bc4:	4904      	ldr	r1, [pc, #16]	; (8001bd8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	40021000 	.word	0x40021000

08001bdc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bec:	4904      	ldr	r1, [pc, #16]	; (8001c00 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40021000 	.word	0x40021000

08001c04 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <LL_RCC_SetI2CClockSource+0x2c>)
 8001c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	0e1b      	lsrs	r3, r3, #24
 8001c14:	43db      	mvns	r3, r3
 8001c16:	401a      	ands	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c1e:	4904      	ldr	r1, [pc, #16]	; (8001c30 <LL_RCC_SetI2CClockSource+0x2c>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	40021000 	.word	0x40021000

08001c34 <LL_APB1_GRP1_EnableClock>:
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c3e:	69da      	ldr	r2, [r3, #28]
 8001c40:	4907      	ldr	r1, [pc, #28]	; (8001c60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c4a:	69da      	ldr	r2, [r3, #28]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40021000 	.word	0x40021000

08001c64 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c6e:	699a      	ldr	r2, [r3, #24]
 8001c70:	4907      	ldr	r1, [pc, #28]	; (8001c90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c7a:	699a      	ldr	r2, [r3, #24]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	40021000 	.word	0x40021000

08001c94 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <LL_FLASH_SetLatency+0x24>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f023 0207 	bic.w	r2, r3, #7
 8001ca4:	4904      	ldr	r1, [pc, #16]	; (8001cb8 <LL_FLASH_SetLatency+0x24>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	40022000 	.word	0x40022000

08001cbc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <LL_FLASH_GetLatency+0x18>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40022000 	.word	0x40022000

08001cd8 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d106      	bne.n	8001cf4 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <LL_SYSTICK_SetClkSource+0x34>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <LL_SYSTICK_SetClkSource+0x34>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001cf2:	e005      	b.n	8001d00 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <LL_SYSTICK_SetClkSource+0x34>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <LL_SYSTICK_SetClkSource+0x34>)
 8001cfa:	f023 0304 	bic.w	r3, r3, #4
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000e010 	.word	0xe000e010

08001d10 <main>:
uint64_t saved_time;
double num_to_display = 10;
char name[] = "Janko_Bukvicka_123";

int main(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f7ff ffa4 	bl	8001c64 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001d1c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001d20:	f7ff ff88 	bl	8001c34 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d24:	2003      	movs	r0, #3
 8001d26:	f7ff feb3 	bl	8001a90 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8001d2a:	f000 f875 	bl	8001e18 <SystemClock_Config>

  MX_GPIO_Init();
 8001d2e:	f7ff fb45 	bl	80013bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d32:	f7ff fd4f 	bl	80017d4 <MX_I2C1_Init>

  lsm6ds0_init();
 8001d36:	f000 fbbf 	bl	80024b8 <lsm6ds0_init>

  setSegments();
 8001d3a:	f7ff f97d 	bl	8001038 <setSegments>
  setDigits();
 8001d3e:	f7ff f9c6 	bl	80010ce <setDigits>

  LL_mDelay(2000);
 8001d42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d46:	f7ff f8d5 	bl	8000ef4 <LL_mDelay>

  resetDigits();
 8001d4a:	f7ff f9a3 	bl	8001094 <resetDigits>
  resetSegments();
 8001d4e:	f7ff f945 	bl	8000fdc <resetSegments>

  MX_TIM3_Init();
 8001d52:	f000 fa7b 	bl	800224c <MX_TIM3_Init>

  int dispStart = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
  int goForward = 1;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
  while (1)
  {
	  // z predchadzajuceho zadania
	  char text[4];

	  if(goForward){
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d023      	beq.n	8001dac <main+0x9c>
		  text[0] = name[(dispStart)];
 8001d64:	4a28      	ldr	r2, [pc, #160]	; (8001e08 <main+0xf8>)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4413      	add	r3, r2
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	713b      	strb	r3, [r7, #4]
		  text[1] = name[(dispStart + 1)];
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3301      	adds	r3, #1
 8001d72:	4a25      	ldr	r2, [pc, #148]	; (8001e08 <main+0xf8>)
 8001d74:	5cd3      	ldrb	r3, [r2, r3]
 8001d76:	717b      	strb	r3, [r7, #5]
		  text[2] = name[(dispStart + 2)];
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	4a22      	ldr	r2, [pc, #136]	; (8001e08 <main+0xf8>)
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	71bb      	strb	r3, [r7, #6]
		  text[3] = name[(dispStart + 3)];
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3303      	adds	r3, #3
 8001d86:	4a20      	ldr	r2, [pc, #128]	; (8001e08 <main+0xf8>)
 8001d88:	5cd3      	ldrb	r3, [r2, r3]
 8001d8a:	71fb      	strb	r3, [r7, #7]
		  displayNumber(text[3],text[2],text[1],text[0]);
 8001d8c:	79f8      	ldrb	r0, [r7, #7]
 8001d8e:	79b9      	ldrb	r1, [r7, #6]
 8001d90:	797a      	ldrb	r2, [r7, #5]
 8001d92:	793b      	ldrb	r3, [r7, #4]
 8001d94:	f7ff f9fc 	bl	8001190 <displayNumber>
		  dispStart++;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
		  if(dispStart + 3 >= sizeof(name))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3303      	adds	r3, #3
 8001da2:	2b12      	cmp	r3, #18
 8001da4:	d925      	bls.n	8001df2 <main+0xe2>
		  {
			  goForward = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	e022      	b.n	8001df2 <main+0xe2>
		  }
	  }else
	  {
		  text[0] = name[(dispStart)];
 8001dac:	4a16      	ldr	r2, [pc, #88]	; (8001e08 <main+0xf8>)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4413      	add	r3, r2
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	713b      	strb	r3, [r7, #4]
		  text[1] = name[(dispStart - 1)];
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	4a13      	ldr	r2, [pc, #76]	; (8001e08 <main+0xf8>)
 8001dbc:	5cd3      	ldrb	r3, [r2, r3]
 8001dbe:	717b      	strb	r3, [r7, #5]
		  text[2] = name[(dispStart - 2)];
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3b02      	subs	r3, #2
 8001dc4:	4a10      	ldr	r2, [pc, #64]	; (8001e08 <main+0xf8>)
 8001dc6:	5cd3      	ldrb	r3, [r2, r3]
 8001dc8:	71bb      	strb	r3, [r7, #6]
		  text[3] = name[(dispStart - 3)];
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <main+0xf8>)
 8001dd0:	5cd3      	ldrb	r3, [r2, r3]
 8001dd2:	71fb      	strb	r3, [r7, #7]
		  displayNumber(text[0],text[1],text[2],text[3]);
 8001dd4:	7938      	ldrb	r0, [r7, #4]
 8001dd6:	7979      	ldrb	r1, [r7, #5]
 8001dd8:	79ba      	ldrb	r2, [r7, #6]
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f7ff f9d8 	bl	8001190 <displayNumber>
		  dispStart--;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
		  if(dispStart - 3 >= sizeof(name))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3b03      	subs	r3, #3
 8001dea:	2b12      	cmp	r3, #18
 8001dec:	d901      	bls.n	8001df2 <main+0xe2>
		  {
		  	goForward = 1;
 8001dee:	2301      	movs	r3, #1
 8001df0:	60bb      	str	r3, [r7, #8]
		  }
	  }

	  //os			   x      y        z
	  lsm6ds0_get_acc(acc, (acc+1), (acc+2));
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <main+0xfc>)
 8001df4:	4a06      	ldr	r2, [pc, #24]	; (8001e10 <main+0x100>)
 8001df6:	4619      	mov	r1, r3
 8001df8:	4806      	ldr	r0, [pc, #24]	; (8001e14 <main+0x104>)
 8001dfa:	f000 fafb 	bl	80023f4 <lsm6ds0_get_acc>
	  LL_mDelay(50); // moze byt potrebne zmenit na 500
 8001dfe:	2032      	movs	r0, #50	; 0x32
 8001e00:	f7ff f878 	bl	8000ef4 <LL_mDelay>
  {
 8001e04:	e7ab      	b.n	8001d5e <main+0x4e>
 8001e06:	bf00      	nop
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	20000064 	.word	0x20000064
 8001e10:	20000068 	.word	0x20000068
 8001e14:	20000060 	.word	0x20000060

08001e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7ff ff39 	bl	8001c94 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001e22:	f7ff ff4b 	bl	8001cbc <LL_FLASH_GetLatency>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8001e2c:	f000 f82e 	bl	8001e8c <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001e30:	f7ff fe52 	bl	8001ad8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001e34:	bf00      	nop
 8001e36:	f7ff fe5f 	bl	8001af8 <LL_RCC_HSI_IsReady>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d1fa      	bne.n	8001e36 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001e40:	2010      	movs	r0, #16
 8001e42:	f7ff fe6b 	bl	8001b1c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff fea0 	bl	8001b8c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7ff feb1 	bl	8001bb4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001e52:	2000      	movs	r0, #0
 8001e54:	f7ff fec2 	bl	8001bdc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7ff fe75 	bl	8001b48 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001e5e:	bf00      	nop
 8001e60:	f7ff fe86 	bl	8001b70 <LL_RCC_GetSysClkSource>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1fa      	bne.n	8001e60 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8001e6a:	4807      	ldr	r0, [pc, #28]	; (8001e88 <SystemClock_Config+0x70>)
 8001e6c:	f7ff f834 	bl	8000ed8 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001e70:	2004      	movs	r0, #4
 8001e72:	f7ff ff31 	bl	8001cd8 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8001e76:	4804      	ldr	r0, [pc, #16]	; (8001e88 <SystemClock_Config+0x70>)
 8001e78:	f7ff f862 	bl	8000f40 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001e7c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001e80:	f7ff fec0 	bl	8001c04 <LL_RCC_SetI2CClockSource>
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	007a1200 	.word	0x007a1200

08001e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <HardFault_Handler+0x4>

08001eae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <MemManage_Handler+0x4>

08001eb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <BusFault_Handler+0x4>

08001eba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <UsageFault_Handler+0x4>

08001ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  disp_time++;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <SysTick_Handler+0x20>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	1c50      	adds	r0, r2, #1
 8001ef8:	f143 0100 	adc.w	r1, r3, #0
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <SysTick_Handler+0x20>)
 8001efe:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	20000048 	.word	0x20000048

08001f10 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f14:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <SystemInit+0x84>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1a:	4a1e      	ldr	r2, [pc, #120]	; (8001f94 <SystemInit+0x84>)
 8001f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f24:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <SystemInit+0x88>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <SystemInit+0x88>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <SystemInit+0x88>)
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	4918      	ldr	r1, [pc, #96]	; (8001f98 <SystemInit+0x88>)
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <SystemInit+0x8c>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <SystemInit+0x88>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a15      	ldr	r2, [pc, #84]	; (8001f98 <SystemInit+0x88>)
 8001f42:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <SystemInit+0x88>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <SystemInit+0x88>)
 8001f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f56:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <SystemInit+0x88>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <SystemInit+0x88>)
 8001f5e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001f62:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <SystemInit+0x88>)
 8001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f68:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <SystemInit+0x88>)
 8001f6a:	f023 030f 	bic.w	r3, r3, #15
 8001f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <SystemInit+0x88>)
 8001f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f74:	4908      	ldr	r1, [pc, #32]	; (8001f98 <SystemInit+0x88>)
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <SystemInit+0x90>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <SystemInit+0x88>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <SystemInit+0x84>)
 8001f84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f88:	609a      	str	r2, [r3, #8]
#endif
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	f87fc00c 	.word	0xf87fc00c
 8001fa0:	ff00fccc 	.word	0xff00fccc

08001fa4 <NVIC_GetPriorityGrouping>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <NVIC_GetPriorityGrouping+0x18>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 0307 	and.w	r3, r3, #7
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EnableIRQ>:
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f003 021f 	and.w	r2, r3, #31
 8001fd0:	4907      	ldr	r1, [pc, #28]	; (8001ff0 <NVIC_EnableIRQ+0x30>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	2001      	movs	r0, #1
 8001fda:	fa00 f202 	lsl.w	r2, r0, r2
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000e100 	.word	0xe000e100

08001ff4 <NVIC_SetPriority>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	2b00      	cmp	r3, #0
 8002006:	da0b      	bge.n	8002020 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	490c      	ldr	r1, [pc, #48]	; (8002040 <NVIC_SetPriority+0x4c>)
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	3b04      	subs	r3, #4
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	440b      	add	r3, r1
 800201c:	761a      	strb	r2, [r3, #24]
}
 800201e:	e009      	b.n	8002034 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	4907      	ldr	r1, [pc, #28]	; (8002044 <NVIC_SetPriority+0x50>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	0112      	lsls	r2, r2, #4
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	440b      	add	r3, r1
 8002030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000ed00 	.word	0xe000ed00
 8002044:	e000e100 	.word	0xe000e100

08002048 <NVIC_EncodePriority>:
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f1c3 0307 	rsb	r3, r3, #7
 8002062:	2b04      	cmp	r3, #4
 8002064:	bf28      	it	cs
 8002066:	2304      	movcs	r3, #4
 8002068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3304      	adds	r3, #4
 800206e:	2b06      	cmp	r3, #6
 8002070:	d902      	bls.n	8002078 <NVIC_EncodePriority+0x30>
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3b03      	subs	r3, #3
 8002076:	e000      	b.n	800207a <NVIC_EncodePriority+0x32>
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	f04f 32ff 	mov.w	r2, #4294967295
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	401a      	ands	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002090:	f04f 31ff 	mov.w	r1, #4294967295
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43d9      	mvns	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	4313      	orrs	r3, r2
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	; 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <LL_APB1_GRP1_EnableClock>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80020ba:	69da      	ldr	r2, [r3, #28]
 80020bc:	4907      	ldr	r1, [pc, #28]	; (80020dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80020c6:	69da      	ldr	r2, [r3, #28]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4013      	ands	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020ce:	68fb      	ldr	r3, [r7, #12]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	40021000 	.word	0x40021000

080020e0 <LL_TIM_EnableCounter>:
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f043 0201 	orr.w	r2, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	601a      	str	r2, [r3, #0]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_TIM_EnableARRPreload>:
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	601a      	str	r2, [r3, #0]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_TIM_OC_DisableFast>:
{
 8002120:	b4b0      	push	{r4, r5, r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d028      	beq.n	8002182 <LL_TIM_OC_DisableFast+0x62>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2b04      	cmp	r3, #4
 8002134:	d023      	beq.n	800217e <LL_TIM_OC_DisableFast+0x5e>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b10      	cmp	r3, #16
 800213a:	d01e      	beq.n	800217a <LL_TIM_OC_DisableFast+0x5a>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2b40      	cmp	r3, #64	; 0x40
 8002140:	d019      	beq.n	8002176 <LL_TIM_OC_DisableFast+0x56>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002148:	d013      	beq.n	8002172 <LL_TIM_OC_DisableFast+0x52>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002150:	d00d      	beq.n	800216e <LL_TIM_OC_DisableFast+0x4e>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002158:	d007      	beq.n	800216a <LL_TIM_OC_DisableFast+0x4a>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002160:	d101      	bne.n	8002166 <LL_TIM_OC_DisableFast+0x46>
 8002162:	2307      	movs	r3, #7
 8002164:	e00e      	b.n	8002184 <LL_TIM_OC_DisableFast+0x64>
 8002166:	2308      	movs	r3, #8
 8002168:	e00c      	b.n	8002184 <LL_TIM_OC_DisableFast+0x64>
 800216a:	2306      	movs	r3, #6
 800216c:	e00a      	b.n	8002184 <LL_TIM_OC_DisableFast+0x64>
 800216e:	2305      	movs	r3, #5
 8002170:	e008      	b.n	8002184 <LL_TIM_OC_DisableFast+0x64>
 8002172:	2304      	movs	r3, #4
 8002174:	e006      	b.n	8002184 <LL_TIM_OC_DisableFast+0x64>
 8002176:	2303      	movs	r3, #3
 8002178:	e004      	b.n	8002184 <LL_TIM_OC_DisableFast+0x64>
 800217a:	2302      	movs	r3, #2
 800217c:	e002      	b.n	8002184 <LL_TIM_OC_DisableFast+0x64>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <LL_TIM_OC_DisableFast+0x64>
 8002182:	2300      	movs	r3, #0
 8002184:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3318      	adds	r3, #24
 800218a:	461a      	mov	r2, r3
 800218c:	4629      	mov	r1, r5
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <LL_TIM_OC_DisableFast+0x94>)
 8002190:	5c5b      	ldrb	r3, [r3, r1]
 8002192:	4413      	add	r3, r2
 8002194:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002196:	6822      	ldr	r2, [r4, #0]
 8002198:	4629      	mov	r1, r5
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <LL_TIM_OC_DisableFast+0x98>)
 800219c:	5c5b      	ldrb	r3, [r3, r1]
 800219e:	4619      	mov	r1, r3
 80021a0:	2304      	movs	r3, #4
 80021a2:	408b      	lsls	r3, r1
 80021a4:	43db      	mvns	r3, r3
 80021a6:	4013      	ands	r3, r2
 80021a8:	6023      	str	r3, [r4, #0]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bcb0      	pop	{r4, r5, r7}
 80021b2:	4770      	bx	lr
 80021b4:	080025d8 	.word	0x080025d8
 80021b8:	080025e4 	.word	0x080025e4

080021bc <LL_TIM_SetClockSource>:
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80021ce:	f023 0307 	bic.w	r3, r3, #7
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	609a      	str	r2, [r3, #8]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <LL_TIM_SetTriggerOutput>:
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	605a      	str	r2, [r3, #4]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_TIM_DisableMasterSlaveMode>:
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	609a      	str	r2, [r3, #8]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_TIM_EnableIT_UPDATE>:
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	60da      	str	r2, [r3, #12]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08e      	sub	sp, #56	; 0x38
 8002250:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
 8002260:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	2220      	movs	r2, #32
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f000 f97b 	bl	8002564 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800226e:	2002      	movs	r0, #2
 8002270:	f7ff ff1e 	bl	80020b0 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 8002274:	f7ff fe96 	bl	8001fa4 <NVIC_GetPriorityGrouping>
 8002278:	4603      	mov	r3, r0
 800227a:	2202      	movs	r2, #2
 800227c:	2102      	movs	r1, #2
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fee2 	bl	8002048 <NVIC_EncodePriority>
 8002284:	4603      	mov	r3, r0
 8002286:	4619      	mov	r1, r3
 8002288:	201d      	movs	r0, #29
 800228a:	f7ff feb3 	bl	8001ff4 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 800228e:	201d      	movs	r0, #29
 8002290:	f7ff fe96 	bl	8001fc0 <NVIC_EnableIRQ>

  //TIM3 clock = 8MHz
  TIM_InitStruct.Prescaler = 7999; 								//1kHz
 8002294:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8002298:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800229a:	2300      	movs	r3, #0
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;								//20ms
 800229e:	2313      	movs	r3, #19
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80022a2:	2300      	movs	r3, #0
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80022a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022aa:	4619      	mov	r1, r3
 80022ac:	4817      	ldr	r0, [pc, #92]	; (800230c <MX_TIM3_Init+0xc0>)
 80022ae:	f7fe fa6d 	bl	800078c <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_EnableARRPreload(TIM3);
 80022b2:	4816      	ldr	r0, [pc, #88]	; (800230c <MX_TIM3_Init+0xc0>)
 80022b4:	f7ff ff24 	bl	8002100 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80022b8:	2100      	movs	r1, #0
 80022ba:	4814      	ldr	r0, [pc, #80]	; (800230c <MX_TIM3_Init+0xc0>)
 80022bc:	f7ff ff7e 	bl	80021bc <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 80022c0:	2310      	movs	r3, #16
 80022c2:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	461a      	mov	r2, r3
 80022d8:	2101      	movs	r1, #1
 80022da:	480c      	ldr	r0, [pc, #48]	; (800230c <MX_TIM3_Init+0xc0>)
 80022dc:	f7fe faca 	bl	8000874 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80022e0:	2101      	movs	r1, #1
 80022e2:	480a      	ldr	r0, [pc, #40]	; (800230c <MX_TIM3_Init+0xc0>)
 80022e4:	f7ff ff1c 	bl	8002120 <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80022e8:	2100      	movs	r1, #0
 80022ea:	4808      	ldr	r0, [pc, #32]	; (800230c <MX_TIM3_Init+0xc0>)
 80022ec:	f7ff ff7b 	bl	80021e6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80022f0:	4806      	ldr	r0, [pc, #24]	; (800230c <MX_TIM3_Init+0xc0>)
 80022f2:	f7ff ff8b 	bl	800220c <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM3);
 80022f6:	4805      	ldr	r0, [pc, #20]	; (800230c <MX_TIM3_Init+0xc0>)
 80022f8:	f7ff ff98 	bl	800222c <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 80022fc:	4803      	ldr	r0, [pc, #12]	; (800230c <MX_TIM3_Init+0xc0>)
 80022fe:	f7ff feef 	bl	80020e0 <LL_TIM_EnableCounter>

}
 8002302:	bf00      	nop
 8002304:	3738      	adds	r7, #56	; 0x38
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40000400 	.word	0x40000400

08002310 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002348 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002314:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002316:	e003      	b.n	8002320 <LoopCopyDataInit>

08002318 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800231a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800231c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800231e:	3104      	adds	r1, #4

08002320 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002320:	480b      	ldr	r0, [pc, #44]	; (8002350 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002324:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002326:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002328:	d3f6      	bcc.n	8002318 <CopyDataInit>
	ldr	r2, =_sbss
 800232a:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <LoopForever+0x12>)
	b	LoopFillZerobss
 800232c:	e002      	b.n	8002334 <LoopFillZerobss>

0800232e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800232e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002330:	f842 3b04 	str.w	r3, [r2], #4

08002334 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <LoopForever+0x16>)
	cmp	r2, r3
 8002336:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002338:	d3f9      	bcc.n	800232e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800233a:	f7ff fde9 	bl	8001f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800233e:	f000 f8ed 	bl	800251c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002342:	f7ff fce5 	bl	8001d10 <main>

08002346 <LoopForever>:

LoopForever:
    b LoopForever
 8002346:	e7fe      	b.n	8002346 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002348:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800234c:	080025f8 	.word	0x080025f8
	ldr	r0, =_sdata
 8002350:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002354:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8002358:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 800235c:	20000084 	.word	0x20000084

08002360 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002360:	e7fe      	b.n	8002360 <ADC1_2_IRQHandler>
	...

08002364 <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af02      	add	r7, sp, #8
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <lsm6ds0_read_byte+0x30>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	79fa      	ldrb	r2, [r7, #7]
 8002378:	f107 000f 	add.w	r0, r7, #15
 800237c:	2100      	movs	r1, #0
 800237e:	9100      	str	r1, [sp, #0]
 8002380:	2101      	movs	r1, #1
 8002382:	f7ff fadb 	bl	800193c <i2c_master_read>
 8002386:	4603      	mov	r3, r0
 8002388:	781b      	ldrb	r3, [r3, #0]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000018 	.word	0x20000018

08002398 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	460a      	mov	r2, r1
 80023a2:	71fb      	strb	r3, [r7, #7]
 80023a4:	4613      	mov	r3, r2
 80023a6:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <lsm6ds0_write_byte+0x28>)
 80023aa:	781a      	ldrb	r2, [r3, #0]
 80023ac:	79f9      	ldrb	r1, [r7, #7]
 80023ae:	79b8      	ldrb	r0, [r7, #6]
 80023b0:	2300      	movs	r3, #0
 80023b2:	f7ff fa7f 	bl	80018b4 <i2c_master_write>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000018 	.word	0x20000018

080023c4 <lsm6ds0_readArray>:


void lsm6ds0_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	70fb      	strb	r3, [r7, #3]
 80023d0:	4613      	mov	r3, r2
 80023d2:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres, 1);
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <lsm6ds0_readArray+0x2c>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	78b9      	ldrb	r1, [r7, #2]
 80023dc:	2001      	movs	r0, #1
 80023de:	9000      	str	r0, [sp, #0]
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff faab 	bl	800193c <i2c_master_read>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000018 	.word	0x20000018

080023f4 <lsm6ds0_get_acc>:
	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}


void lsm6ds0_get_acc(float* x, float* y, float* z)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
	int16_t xx, yy, zz;

	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lsm6ds0_read_byte(LSM6DS0_ADDRESS_CTRL1);
 8002400:	2010      	movs	r0, #16
 8002402:	f7ff ffaf 	bl	8002364 <lsm6ds0_read_byte>
 8002406:	4603      	mov	r3, r0
 8002408:	77fb      	strb	r3, [r7, #31]

	temp = temp >> 2;
 800240a:	7ffb      	ldrb	r3, [r7, #31]
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	77fb      	strb	r3, [r7, #31]
    temp &= 0x03;			//full scale bits exctracted
 8002410:	7ffb      	ldrb	r3, [r7, #31]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	77fb      	strb	r3, [r7, #31]

	lsm6ds0_readArray(data, LSM6DS0_ADDRESS_ACCX, 6);
 8002418:	f107 0310 	add.w	r3, r7, #16
 800241c:	2206      	movs	r2, #6
 800241e:	2128      	movs	r1, #40	; 0x28
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ffcf 	bl	80023c4 <lsm6ds0_readArray>

	xx = ((uint16_t)data[1]) << 8 | data[0];
 8002426:	7c7b      	ldrb	r3, [r7, #17]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	b21a      	sxth	r2, r3
 800242c:	7c3b      	ldrb	r3, [r7, #16]
 800242e:	b21b      	sxth	r3, r3
 8002430:	4313      	orrs	r3, r2
 8002432:	83bb      	strh	r3, [r7, #28]
	yy = ((uint16_t)data[3]) << 8 | data[2];
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	b21a      	sxth	r2, r3
 800243a:	7cbb      	ldrb	r3, [r7, #18]
 800243c:	b21b      	sxth	r3, r3
 800243e:	4313      	orrs	r3, r2
 8002440:	837b      	strh	r3, [r7, #26]
	zz = ((uint16_t)data[5]) << 8 | data[4];
 8002442:	7d7b      	ldrb	r3, [r7, #21]
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	b21a      	sxth	r2, r3
 8002448:	7d3b      	ldrb	r3, [r7, #20]
 800244a:	b21b      	sxth	r3, r3
 800244c:	4313      	orrs	r3, r2
 800244e:	833b      	strh	r3, [r7, #24]

	*x = (xx >> 4) / 1000.0f;
 8002450:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002454:	111b      	asrs	r3, r3, #4
 8002456:	b21b      	sxth	r3, r3
 8002458:	ee07 3a90 	vmov	s15, r3
 800245c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002460:	eddf 6a14 	vldr	s13, [pc, #80]	; 80024b4 <lsm6ds0_get_acc+0xc0>
 8002464:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	edc3 7a00 	vstr	s15, [r3]
	*y = (yy >> 4) / 1000.0f;
 800246e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002472:	111b      	asrs	r3, r3, #4
 8002474:	b21b      	sxth	r3, r3
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800247e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80024b4 <lsm6ds0_get_acc+0xc0>
 8002482:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	edc3 7a00 	vstr	s15, [r3]
	*z = (zz >> 4) / 1000.0f;
 800248c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002490:	111b      	asrs	r3, r3, #4
 8002492:	b21b      	sxth	r3, r3
 8002494:	ee07 3a90 	vmov	s15, r3
 8002498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800249c:	eddf 6a05 	vldr	s13, [pc, #20]	; 80024b4 <lsm6ds0_get_acc+0xc0>
 80024a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	edc3 7a00 	vstr	s15, [r3]
}
 80024aa:	bf00      	nop
 80024ac:	3720      	adds	r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	447a0000 	.word	0x447a0000

080024b8 <lsm6ds0_init>:


uint8_t lsm6ds0_init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 80024be:	2301      	movs	r3, #1
 80024c0:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 80024c2:	2064      	movs	r0, #100	; 0x64
 80024c4:	f7fe fd16 	bl	8000ef4 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 80024c8:	200f      	movs	r0, #15
 80024ca:	f7ff ff4b 	bl	8002364 <lsm6ds0_read_byte>
 80024ce:	4603      	mov	r3, r0
 80024d0:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 80024d2:	79bb      	ldrb	r3, [r7, #6]
 80024d4:	2b68      	cmp	r3, #104	; 0x68
 80024d6:	d102      	bne.n	80024de <lsm6ds0_init+0x26>
	{
		status = 1;
 80024d8:	2301      	movs	r3, #1
 80024da:	71fb      	strb	r3, [r7, #7]
 80024dc:	e00f      	b.n	80024fe <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <lsm6ds0_init+0x60>)
 80024e0:	22d6      	movs	r2, #214	; 0xd6
 80024e2:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 80024e4:	200f      	movs	r0, #15
 80024e6:	f7ff ff3d 	bl	8002364 <lsm6ds0_read_byte>
 80024ea:	4603      	mov	r3, r0
 80024ec:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 80024ee:	79bb      	ldrb	r3, [r7, #6]
 80024f0:	2b68      	cmp	r3, #104	; 0x68
 80024f2:	d102      	bne.n	80024fa <lsm6ds0_init+0x42>
		{
			status = 1;
 80024f4:	2301      	movs	r3, #1
 80024f6:	71fb      	strb	r3, [r7, #7]
 80024f8:	e001      	b.n	80024fe <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8002502:	797b      	ldrb	r3, [r7, #5]
 8002504:	4619      	mov	r1, r3
 8002506:	2010      	movs	r0, #16
 8002508:	f7ff ff46 	bl	8002398 <lsm6ds0_write_byte>

	return status;
 800250c:	79fb      	ldrb	r3, [r7, #7]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000018 	.word	0x20000018

0800251c <__libc_init_array>:
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	4d0d      	ldr	r5, [pc, #52]	; (8002554 <__libc_init_array+0x38>)
 8002520:	4c0d      	ldr	r4, [pc, #52]	; (8002558 <__libc_init_array+0x3c>)
 8002522:	1b64      	subs	r4, r4, r5
 8002524:	10a4      	asrs	r4, r4, #2
 8002526:	2600      	movs	r6, #0
 8002528:	42a6      	cmp	r6, r4
 800252a:	d109      	bne.n	8002540 <__libc_init_array+0x24>
 800252c:	4d0b      	ldr	r5, [pc, #44]	; (800255c <__libc_init_array+0x40>)
 800252e:	4c0c      	ldr	r4, [pc, #48]	; (8002560 <__libc_init_array+0x44>)
 8002530:	f000 f820 	bl	8002574 <_init>
 8002534:	1b64      	subs	r4, r4, r5
 8002536:	10a4      	asrs	r4, r4, #2
 8002538:	2600      	movs	r6, #0
 800253a:	42a6      	cmp	r6, r4
 800253c:	d105      	bne.n	800254a <__libc_init_array+0x2e>
 800253e:	bd70      	pop	{r4, r5, r6, pc}
 8002540:	f855 3b04 	ldr.w	r3, [r5], #4
 8002544:	4798      	blx	r3
 8002546:	3601      	adds	r6, #1
 8002548:	e7ee      	b.n	8002528 <__libc_init_array+0xc>
 800254a:	f855 3b04 	ldr.w	r3, [r5], #4
 800254e:	4798      	blx	r3
 8002550:	3601      	adds	r6, #1
 8002552:	e7f2      	b.n	800253a <__libc_init_array+0x1e>
 8002554:	080025f0 	.word	0x080025f0
 8002558:	080025f0 	.word	0x080025f0
 800255c:	080025f0 	.word	0x080025f0
 8002560:	080025f4 	.word	0x080025f4

08002564 <memset>:
 8002564:	4402      	add	r2, r0
 8002566:	4603      	mov	r3, r0
 8002568:	4293      	cmp	r3, r2
 800256a:	d100      	bne.n	800256e <memset+0xa>
 800256c:	4770      	bx	lr
 800256e:	f803 1b01 	strb.w	r1, [r3], #1
 8002572:	e7f9      	b.n	8002568 <memset+0x4>

08002574 <_init>:
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002576:	bf00      	nop
 8002578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257a:	bc08      	pop	{r3}
 800257c:	469e      	mov	lr, r3
 800257e:	4770      	bx	lr

08002580 <_fini>:
 8002580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002582:	bf00      	nop
 8002584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002586:	bc08      	pop	{r3}
 8002588:	469e      	mov	lr, r3
 800258a:	4770      	bx	lr
